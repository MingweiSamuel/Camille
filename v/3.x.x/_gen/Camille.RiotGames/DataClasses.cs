
﻿
// This file is automatically generated.
// Do not directly edit.
// Generated on 2022-01-19T02:15:07.378Z

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version be7cba85eef6d2262d61d1befff94fe2d6628d8e

using System.Collections.Generic;
using System.Linq;


#if USE_NEWTONSOFT
using JsonPropertyAttribute = Newtonsoft.Json.JsonPropertyAttribute;
using JsonExtensionDataAttribute = Newtonsoft.Json.JsonExtensionDataAttribute;
#elif USE_SYSTEXTJSON
using JsonPropertyAttribute = System.Text.Json.Serialization.JsonPropertyNameAttribute;
using JsonExtensionDataAttribute = System.Text.Json.Serialization.JsonExtensionDataAttribute;
#else
#error One of USE_NEWTONSOFT or USE_SYSTEXTJSON must be set.
#endif

// ReSharper disable InconsistentNaming

namespace Camille.RiotGames.AccountV1
{
    /// <summary>
    /// Account data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Account
    {

#nullable disable
        public Account() {}
#nullable restore

        /// <summary>
        /// This field may be excluded from the response if the account doesn't have a gameName.
        /// </summary>
        [JsonProperty("gameName")]
        public string? GameName { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// This field may be excluded from the response if the account doesn't have a tagLine.
        /// </summary>
        [JsonProperty("tagLine")]
        public string? TagLine { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Account("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.AccountV1
{
    /// <summary>
    /// ActiveShard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ActiveShard
    {

#nullable disable
        public ActiveShard() {}
#nullable restore

        [JsonProperty("activeShard")]
        public string ActiveShardstring { get; set; }
        [JsonProperty("game")]
        public string Game { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ActiveShard("
                + "Puuid: " + Puuid + ", "
                + "Game: " + Game + ", "
                + "ActiveShardstring: " + ActiveShardstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ChampionMasteryV4
{
    /// <summary>
    /// ChampionMastery data object. This class is automatically generated.<para />
    /// This object contains single Champion Mastery information for player and champion combination.
    /// </summary>
    public class ChampionMastery
    {

#nullable disable
        public ChampionMastery() {}
#nullable restore

        /// <summary>
        /// Champion ID for this entry.
        /// </summary>
        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        /// <summary>
        /// Champion level for specified player and champion combination.
        /// </summary>
        [JsonProperty("championLevel")]
        public int ChampionLevel { get; set; }
        /// <summary>
        /// Total number of champion points for this player and champion combination - they are used to determine championLevel.
        /// </summary>
        [JsonProperty("championPoints")]
        public int ChampionPoints { get; set; }
        /// <summary>
        /// Number of points earned since current level has been achieved.
        /// </summary>
        [JsonProperty("championPointsSinceLastLevel")]
        public long ChampionPointsSinceLastLevel { get; set; }
        /// <summary>
        /// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
        /// </summary>
        [JsonProperty("championPointsUntilNextLevel")]
        public long ChampionPointsUntilNextLevel { get; set; }
        /// <summary>
        /// Is chest granted for this champion or not in current season.
        /// </summary>
        [JsonProperty("chestGranted")]
        public bool ChestGranted { get; set; }
        /// <summary>
        /// Last time this champion was played by this player - in Unix milliseconds time format.
        /// </summary>
        [JsonProperty("lastPlayTime")]
        public long LastPlayTime { get; set; }
        /// <summary>
        /// Summoner ID for this entry. (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
        /// </summary>
        [JsonProperty("tokensEarned")]
        public int TokensEarned { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionMastery("
                + "ChampionPointsUntilNextLevel: " + ChampionPointsUntilNextLevel + ", "
                + "ChestGranted: " + ChestGranted + ", "
                + "ChampionId: " + ChampionId + ", "
                + "LastPlayTime: " + LastPlayTime + ", "
                + "ChampionLevel: " + ChampionLevel + ", "
                + "SummonerId: " + SummonerId + ", "
                + "ChampionPoints: " + ChampionPoints + ", "
                + "ChampionPointsSinceLastLevel: " + ChampionPointsSinceLastLevel + ", "
                + "TokensEarned: " + TokensEarned + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ChampionV3
{
    /// <summary>
    /// ChampionInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ChampionInfo
    {

#nullable disable
        public ChampionInfo() {}
#nullable restore

        [JsonProperty("freeChampionIds")]
        public Camille.Enums.Champion[] FreeChampionIds { get; set; }
        [JsonProperty("freeChampionIdsForNewPlayers")]
        public Camille.Enums.Champion[] FreeChampionIdsForNewPlayers { get; set; }
        [JsonProperty("maxNewPlayerLevel")]
        public int MaxNewPlayerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionInfo("
                + "MaxNewPlayerLevel: " + MaxNewPlayerLevel + ", "
                + "FreeChampionIdsForNewPlayers: " + FreeChampionIdsForNewPlayers + ", "
                + "FreeChampionIds: " + FreeChampionIds + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ClashV1
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {

#nullable disable
        public Player() {}
#nullable restore

        /// <summary>
        /// (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
        /// </summary>
        [JsonProperty("position")]
        public string Position { get; set; }
        /// <summary>
        /// (Legal values:  CAPTAIN,  MEMBER)
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("teamId")]
        public string? TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "SummonerId: " + SummonerId + ", "
                + "TeamId: " + TeamId + ", "
                + "Position: " + Position + ", "
                + "Role: " + Role + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ClashV1
{
    /// <summary>
    /// Team data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Team
    {

#nullable disable
        public Team() {}
#nullable restore

        [JsonProperty("abbreviation")]
        public string Abbreviation { get; set; }
        /// <summary>
        /// Summoner ID of the team captain.
        /// </summary>
        [JsonProperty("captain")]
        public string Captain { get; set; }
        [JsonProperty("iconId")]
        public int IconId { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Team members.
        /// </summary>
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        [JsonProperty("tier")]
        public int Tier { get; set; }
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Team("
                + "Id: " + Id + ", "
                + "TournamentId: " + TournamentId + ", "
                + "Name: " + Name + ", "
                + "IconId: " + IconId + ", "
                + "Tier: " + Tier + ", "
                + "Captain: " + Captain + ", "
                + "Abbreviation: " + Abbreviation + ", "
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ClashV1
{
    /// <summary>
    /// Tournament data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Tournament
    {

#nullable disable
        public Tournament() {}
#nullable restore

        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("nameKey")]
        public string NameKey { get; set; }
        [JsonProperty("nameKeySecondary")]
        public string NameKeySecondary { get; set; }
        /// <summary>
        /// Tournament phase.
        /// </summary>
        [JsonProperty("schedule")]
        public TournamentPhase[] Schedule { get; set; }
        [JsonProperty("themeId")]
        public int ThemeId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Tournament("
                + "Id: " + Id + ", "
                + "ThemeId: " + ThemeId + ", "
                + "NameKey: " + NameKey + ", "
                + "NameKeySecondary: " + NameKeySecondary + ", "
                + "Schedule: " + Schedule + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ClashV1
{
    /// <summary>
    /// TournamentPhase data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentPhase
    {

#nullable disable
        public TournamentPhase() {}
#nullable restore

        [JsonProperty("cancelled")]
        public bool Cancelled { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("registrationTime")]
        public long RegistrationTime { get; set; }
        [JsonProperty("startTime")]
        public long StartTime { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentPhase("
                + "Id: " + Id + ", "
                + "RegistrationTime: " + RegistrationTime + ", "
                + "StartTime: " + StartTime + ", "
                + "Cancelled: " + Cancelled + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueExpV4
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {

#nullable disable
        public LeagueEntry() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public Camille.Enums.QueueType QueueType { get; set; }
        /// <summary>
        /// The player's division within a tier.
        /// </summary>
        [JsonProperty("rank")]
        public Camille.Enums.Division Rank { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("tier")]
        public Camille.Enums.Tier Tier { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueExpV4
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {

#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueV4
{
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {

#nullable disable
        public LeagueList() {}
#nullable restore

        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public Camille.Enums.QueueType Queue { get; set; }
        [JsonProperty("tier")]
        public Camille.Enums.Tier Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList("
                + "LeagueId: " + LeagueId + ", "
                + "Entries: " + Entries + ", "
                + "Tier: " + Tier + ", "
                + "Name: " + Name + ", "
                + "Queue: " + Queue + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueV4
{
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {

#nullable disable
        public LeagueItem() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("rank")]
        public Camille.Enums.Division Rank { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem("
                + "FreshBlood: " + FreshBlood + ", "
                + "Wins: " + Wins + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Inactive: " + Inactive + ", "
                + "Veteran: " + Veteran + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Losses: " + Losses + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueV4
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {

#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LeagueV4
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {

#nullable disable
        public LeagueEntry() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leagueId")]
        public string? LeagueId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public Camille.Enums.QueueType QueueType { get; set; }
        /// <summary>
        /// The player's division within a tier.
        /// </summary>
        [JsonProperty("rank")]
        public Camille.Enums.Division? Rank { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("tier")]
        public Camille.Enums.Tier? Tier { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV3
{
    /// <summary>
    /// ShardStatus data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ShardStatus
    {

#nullable disable
        public ShardStatus() {}
#nullable restore

        [JsonProperty("hostname")]
        public string Hostname { get; set; }
        [JsonProperty("locales")]
        public Camille.Enums.Locale[] Locales { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("region_tag")]
        public string RegionTag { get; set; }
        [JsonProperty("services")]
        public Service[] Services { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ShardStatus("
                + "Locales: " + Locales + ", "
                + "Hostname: " + Hostname + ", "
                + "Name: " + Name + ", "
                + "Services: " + Services + ", "
                + "Slug: " + Slug + ", "
                + "RegionTag: " + RegionTag + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV3
{
    /// <summary>
    /// Service data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Service
    {

#nullable disable
        public Service() {}
#nullable restore

        [JsonProperty("incidents")]
        public Incident[] Incidents { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Service("
                + "Name: " + Name + ", "
                + "Slug: " + Slug + ", "
                + "Status: " + Status + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV3
{
    /// <summary>
    /// Incident data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Incident
    {

#nullable disable
        public Incident() {}
#nullable restore

        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public long Id { get; set; }
        [JsonProperty("updates")]
        public Message[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Incident("
                + "Id: " + Id + ", "
                + "Active: " + Active + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Updates: " + Updates + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV3
{
    /// <summary>
    /// Message data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Message
    {

#nullable disable
        public Message() {}
#nullable restore

        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("heading")]
        public string Heading { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("severity")]
        public string Severity { get; set; }
        [JsonProperty("translations")]
        public Translation[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Message("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Heading: " + Heading + ", "
                + "Content: " + Content + ", "
                + "Severity: " + Severity + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Translations: " + Translations + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV3
{
    /// <summary>
    /// Translation data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Translation
    {

#nullable disable
        public Translation() {}
#nullable restore

        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("locale")]
        public Camille.Enums.Locale Locale { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Translation("
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Locale: " + Locale + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV4
{
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {

#nullable disable
        public PlatformData() {}
#nullable restore

        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }
        [JsonProperty("locales")]
        public Camille.Enums.Locale[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV4
{
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {

#nullable disable
        public Status() {}
#nullable restore

        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV4
{
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {

#nullable disable
        public Content() {}
#nullable restore

        [JsonProperty("content")]
        public string Contentstring { get; set; }
        [JsonProperty("locale")]
        public string Locale { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LolStatusV4
{
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {

#nullable disable
        public Update() {}
#nullable restore

        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorDeckV1
{
    /// <summary>
    /// Deck data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Deck
    {

#nullable disable
        public Deck() {}
#nullable restore

        [JsonProperty("code")]
        public string Code { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Deck("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Code: " + Code + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorDeckV1
{
    /// <summary>
    /// NewDeck data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class NewDeck
    {

#nullable disable
        public NewDeck() {}
#nullable restore

        [JsonProperty("code")]
        public string Code { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "NewDeck("
                + "Name: " + Name + ", "
                + "Code: " + Code + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorInventoryV1
{
    /// <summary>
    /// Card data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Card
    {

#nullable disable
        public Card() {}
#nullable restore

        [JsonProperty("code")]
        public string Code { get; set; }
        [JsonProperty("count")]
        public string Count { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Card("
                + "Code: " + Code + ", "
                + "Count: " + Count + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorMatchV1
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {

#nullable disable
        public Match() {}
#nullable restore

        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorMatchV1
{
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {

#nullable disable
        public Metadata() {}
#nullable restore

        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("data_version")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("match_id")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata("
                + "DataVersion: " + DataVersion + ", "
                + "MatchId: " + MatchId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorMatchV1
{
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {

#nullable disable
        public Info() {}
#nullable restore

        /// <summary>
        /// (Legal values:  Constructed,  Expeditions,  Tutorial)
        /// </summary>
        [JsonProperty("game_mode")]
        public string GameMode { get; set; }
        [JsonProperty("game_start_time_utc")]
        public string GameStartTimeUtc { get; set; }
        /// <summary>
        /// (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet)
        /// </summary>
        [JsonProperty("game_type")]
        public string GameType { get; set; }
        [JsonProperty("game_version")]
        public string GameVersion { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        /// <summary>
        /// Total turns taken by both players.
        /// </summary>
        [JsonProperty("total_turn_count")]
        public int TotalTurnCount { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info("
                + "GameMode: " + GameMode + ", "
                + "GameType: " + GameType + ", "
                + "GameStartTimeUtc: " + GameStartTimeUtc + ", "
                + "GameVersion: " + GameVersion + ", "
                + "Players: " + Players + ", "
                + "TotalTurnCount: " + TotalTurnCount + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorMatchV1
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {

#nullable disable
        public Player() {}
#nullable restore

        /// <summary>
        /// Code for the deck played. Refer to LOR documentation for details on deck codes.
        /// </summary>
        [JsonProperty("deck_code")]
        public string DeckCode { get; set; }
        [JsonProperty("deck_id")]
        public string DeckId { get; set; }
        [JsonProperty("factions")]
        public string[] Factions { get; set; }
        [JsonProperty("game_outcome")]
        public string GameOutcome { get; set; }
        /// <summary>
        /// The order in which the players took turns.
        /// </summary>
        [JsonProperty("order_of_play")]
        public int OrderOfPlay { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "DeckId: " + DeckId + ", "
                + "DeckCode: " + DeckCode + ", "
                + "Factions: " + Factions + ", "
                + "GameOutcome: " + GameOutcome + ", "
                + "OrderOfPlay: " + OrderOfPlay + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorRankedV1
{
    /// <summary>
    /// Leaderboard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Leaderboard
    {

#nullable disable
        public Leaderboard() {}
#nullable restore

        /// <summary>
        /// A list of players in Master tier.
        /// </summary>
        [JsonProperty("players")]
        public Player[] Players { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Leaderboard("
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorRankedV1
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {

#nullable disable
        public Player() {}
#nullable restore

        /// <summary>
        /// League points.
        /// </summary>
        [JsonProperty("lp")]
        public int Lp { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Name: " + Name + ", "
                + "Rank: " + Rank + ", "
                + "Lp: " + Lp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorStatusV1
{
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {

#nullable disable
        public PlatformData() {}
#nullable restore

        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorStatusV1
{
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {

#nullable disable
        public Status() {}
#nullable restore

        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorStatusV1
{
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {

#nullable disable
        public Content() {}
#nullable restore

        [JsonProperty("content")]
        public string Contentstring { get; set; }
        [JsonProperty("locale")]
        public string Locale { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.LorStatusV1
{
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {

#nullable disable
        public Update() {}
#nullable restore

        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {

#nullable disable
        public Match() {}
#nullable restore

        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {

#nullable disable
        public Metadata() {}
#nullable restore

        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("dataVersion")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("matchId")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata("
                + "DataVersion: " + DataVersion + ", "
                + "MatchId: " + MatchId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {

#nullable disable
        public Info() {}
#nullable restore

        /// <summary>
        /// Unix timestamp for when the game is created on the game server (i.e., the loading screen).
        /// </summary>
        [JsonProperty("gameCreation")]
        public long GameCreation { get; set; }
        /// <summary>
        /// Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn't in the response and to treat the value as seconds if gameEndTimestamp is in the response.
        /// </summary>
        [JsonProperty("gameDuration")]
        public long GameDuration { get; set; }
        /// <summary>
        /// Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match "ends". The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
        /// </summary>
        [JsonProperty("gameEndTimestamp")]
        public long? GameEndTimestamp { get; set; }
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// Refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameMode")]
        public Camille.Enums.GameMode GameMode { get; set; }
        [JsonProperty("gameName")]
        public string GameName { get; set; }
        /// <summary>
        /// Unix timestamp for when match starts on the game server.
        /// </summary>
        [JsonProperty("gameStartTimestamp")]
        public long GameStartTimestamp { get; set; }
        [JsonProperty("gameType")]
        public Camille.Enums.GameType GameType { get; set; }
        /// <summary>
        /// The first two parts can be used to determine the patch a game was played on.
        /// </summary>
        [JsonProperty("gameVersion")]
        public string GameVersion { get; set; }
        /// <summary>
        /// Refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("mapId")]
        public Camille.Enums.Map MapId { get; set; }
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Platform where the match was played.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// Refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("queueId")]
        public Camille.Enums.Queue QueueId { get; set; }
        [JsonProperty("teams")]
        public Team[] Teams { get; set; }
        /// <summary>
        /// Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.
        /// </summary>
        [JsonProperty("tournamentCode")]
        public string? TournamentCode { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info("
                + "GameCreation: " + GameCreation + ", "
                + "GameDuration: " + GameDuration + ", "
                + "GameEndTimestamp: " + GameEndTimestamp + ", "
                + "GameId: " + GameId + ", "
                + "GameMode: " + GameMode + ", "
                + "GameName: " + GameName + ", "
                + "GameStartTimestamp: " + GameStartTimestamp + ", "
                + "GameType: " + GameType + ", "
                + "GameVersion: " + GameVersion + ", "
                + "MapId: " + MapId + ", "
                + "Participants: " + Participants + ", "
                + "PlatformId: " + PlatformId + ", "
                + "QueueId: " + QueueId + ", "
                + "Teams: " + Teams + ", "
                + "TournamentCode: " + TournamentCode + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {

#nullable disable
        public Participant() {}
#nullable restore

        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("baronKills")]
        public int BaronKills { get; set; }
        [JsonProperty("bountyLevel")]
        public int BountyLevel { get; set; }
        [JsonProperty("champExperience")]
        public int ChampExperience { get; set; }
        /// <summary>
        /// Prior to patch 11.4, on Feb 18th, 2021, this field returned invalid championIds. We recommend determining the champion based on the championName field for matches played prior to patch 11.4.
        /// </summary>
        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        [JsonProperty("championName")]
        public string ChampionName { get; set; }
        /// <summary>
        /// This field is currently only utilized for Kayn's transformations. (Legal values: 0 - None, 1 - Slayer, 2 - Assassin)
        /// </summary>
        [JsonProperty("championTransform")]
        public int ChampionTransform { get; set; }
        [JsonProperty("champLevel")]
        public int ChampLevel { get; set; }
        [JsonProperty("consumablesPurchased")]
        public int ConsumablesPurchased { get; set; }
        [JsonProperty("damageDealtToBuildings")]
        public int? DamageDealtToBuildings { get; set; }
        [JsonProperty("damageDealtToObjectives")]
        public int DamageDealtToObjectives { get; set; }
        [JsonProperty("damageDealtToTurrets")]
        public int DamageDealtToTurrets { get; set; }
        [JsonProperty("damageSelfMitigated")]
        public int DamageSelfMitigated { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("detectorWardsPlaced")]
        public int DetectorWardsPlaced { get; set; }
        [JsonProperty("doubleKills")]
        public int DoubleKills { get; set; }
        [JsonProperty("dragonKills")]
        public int DragonKills { get; set; }
        [JsonProperty("firstBloodAssist")]
        public bool FirstBloodAssist { get; set; }
        [JsonProperty("firstBloodKill")]
        public bool FirstBloodKill { get; set; }
        [JsonProperty("firstTowerAssist")]
        public bool FirstTowerAssist { get; set; }
        [JsonProperty("firstTowerKill")]
        public bool FirstTowerKill { get; set; }
        [JsonProperty("gameEndedInEarlySurrender")]
        public bool GameEndedInEarlySurrender { get; set; }
        [JsonProperty("gameEndedInSurrender")]
        public bool GameEndedInSurrender { get; set; }
        [JsonProperty("goldEarned")]
        public int GoldEarned { get; set; }
        [JsonProperty("goldSpent")]
        public int GoldSpent { get; set; }
        /// <summary>
        /// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
        /// </summary>
        [JsonProperty("individualPosition")]
        public string IndividualPosition { get; set; }
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        [JsonProperty("inhibitorsLost")]
        public int? InhibitorsLost { get; set; }
        [JsonProperty("inhibitorTakedowns")]
        public int? InhibitorTakedowns { get; set; }
        [JsonProperty("item0")]
        public int Item0 { get; set; }
        [JsonProperty("item1")]
        public int Item1 { get; set; }
        [JsonProperty("item2")]
        public int Item2 { get; set; }
        [JsonProperty("item3")]
        public int Item3 { get; set; }
        [JsonProperty("item4")]
        public int Item4 { get; set; }
        [JsonProperty("item5")]
        public int Item5 { get; set; }
        [JsonProperty("item6")]
        public int Item6 { get; set; }
        [JsonProperty("itemsPurchased")]
        public int ItemsPurchased { get; set; }
        [JsonProperty("killingSprees")]
        public int KillingSprees { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("lane")]
        public string Lane { get; set; }
        [JsonProperty("largestCriticalStrike")]
        public int LargestCriticalStrike { get; set; }
        [JsonProperty("largestKillingSpree")]
        public int LargestKillingSpree { get; set; }
        [JsonProperty("largestMultiKill")]
        public int LargestMultiKill { get; set; }
        [JsonProperty("longestTimeSpentLiving")]
        public int LongestTimeSpentLiving { get; set; }
        [JsonProperty("magicDamageDealt")]
        public int MagicDamageDealt { get; set; }
        [JsonProperty("magicDamageDealtToChampions")]
        public int MagicDamageDealtToChampions { get; set; }
        [JsonProperty("magicDamageTaken")]
        public int MagicDamageTaken { get; set; }
        [JsonProperty("neutralMinionsKilled")]
        public int NeutralMinionsKilled { get; set; }
        [JsonProperty("nexusKills")]
        public int NexusKills { get; set; }
        [JsonProperty("nexusLost")]
        public int? NexusLost { get; set; }
        [JsonProperty("nexusTakedowns")]
        public int? NexusTakedowns { get; set; }
        [JsonProperty("objectivesStolen")]
        public int ObjectivesStolen { get; set; }
        [JsonProperty("objectivesStolenAssists")]
        public int ObjectivesStolenAssists { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("pentaKills")]
        public int PentaKills { get; set; }
        [JsonProperty("perks")]
        public Perks Perks { get; set; }
        [JsonProperty("physicalDamageDealt")]
        public int PhysicalDamageDealt { get; set; }
        [JsonProperty("physicalDamageDealtToChampions")]
        public int PhysicalDamageDealtToChampions { get; set; }
        [JsonProperty("physicalDamageTaken")]
        public int PhysicalDamageTaken { get; set; }
        [JsonProperty("profileIcon")]
        public int ProfileIcon { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("quadraKills")]
        public int QuadraKills { get; set; }
        [JsonProperty("riotIdName")]
        public string RiotIdName { get; set; }
        [JsonProperty("riotIdTagline")]
        public string RiotIdTagline { get; set; }
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("sightWardsBoughtInGame")]
        public int SightWardsBoughtInGame { get; set; }
        [JsonProperty("spell1Casts")]
        public int Spell1Casts { get; set; }
        [JsonProperty("spell2Casts")]
        public int Spell2Casts { get; set; }
        [JsonProperty("spell3Casts")]
        public int Spell3Casts { get; set; }
        [JsonProperty("spell4Casts")]
        public int Spell4Casts { get; set; }
        [JsonProperty("summoner1Casts")]
        public int Summoner1Casts { get; set; }
        [JsonProperty("summoner1Id")]
        public int Summoner1Id { get; set; }
        [JsonProperty("summoner2Casts")]
        public int Summoner2Casts { get; set; }
        [JsonProperty("summoner2Id")]
        public int Summoner2Id { get; set; }
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerLevel")]
        public int SummonerLevel { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("teamEarlySurrendered")]
        public bool TeamEarlySurrendered { get; set; }
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team TeamId { get; set; }
        /// <summary>
        /// Both individualPosition and teamPosition are computed by the game server and are different versions of the most likely position played by a player. The individualPosition is the best guess for which position the player actually played in isolation of anything else. The teamPosition is the best guess for which position the player actually played if we add the constraint that each team must have one top player, one jungle, one middle, etc. Generally the recommendation is to use the teamPosition field over the individualPosition field.
        /// </summary>
        [JsonProperty("teamPosition")]
        public string TeamPosition { get; set; }
        [JsonProperty("timeCCingOthers")]
        public int TimeCCingOthers { get; set; }
        [JsonProperty("timePlayed")]
        public int TimePlayed { get; set; }
        [JsonProperty("totalDamageDealt")]
        public int TotalDamageDealt { get; set; }
        [JsonProperty("totalDamageDealtToChampions")]
        public int TotalDamageDealtToChampions { get; set; }
        [JsonProperty("totalDamageShieldedOnTeammates")]
        public int TotalDamageShieldedOnTeammates { get; set; }
        [JsonProperty("totalDamageTaken")]
        public int TotalDamageTaken { get; set; }
        [JsonProperty("totalHeal")]
        public int TotalHeal { get; set; }
        [JsonProperty("totalHealsOnTeammates")]
        public int TotalHealsOnTeammates { get; set; }
        [JsonProperty("totalMinionsKilled")]
        public int TotalMinionsKilled { get; set; }
        [JsonProperty("totalTimeCCDealt")]
        public int TotalTimeCCDealt { get; set; }
        [JsonProperty("totalTimeSpentDead")]
        public int TotalTimeSpentDead { get; set; }
        [JsonProperty("totalUnitsHealed")]
        public int TotalUnitsHealed { get; set; }
        [JsonProperty("tripleKills")]
        public int TripleKills { get; set; }
        [JsonProperty("trueDamageDealt")]
        public int TrueDamageDealt { get; set; }
        [JsonProperty("trueDamageDealtToChampions")]
        public int TrueDamageDealtToChampions { get; set; }
        [JsonProperty("trueDamageTaken")]
        public int TrueDamageTaken { get; set; }
        [JsonProperty("turretKills")]
        public int TurretKills { get; set; }
        [JsonProperty("turretsLost")]
        public int? TurretsLost { get; set; }
        [JsonProperty("turretTakedowns")]
        public int? TurretTakedowns { get; set; }
        [JsonProperty("unrealKills")]
        public int UnrealKills { get; set; }
        [JsonProperty("visionScore")]
        public int VisionScore { get; set; }
        [JsonProperty("visionWardsBoughtInGame")]
        public int VisionWardsBoughtInGame { get; set; }
        [JsonProperty("wardsKilled")]
        public int WardsKilled { get; set; }
        [JsonProperty("wardsPlaced")]
        public int WardsPlaced { get; set; }
        [JsonProperty("win")]
        public bool Win { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "Assists: " + Assists + ", "
                + "BaronKills: " + BaronKills + ", "
                + "BountyLevel: " + BountyLevel + ", "
                + "ChampExperience: " + ChampExperience + ", "
                + "ChampLevel: " + ChampLevel + ", "
                + "ChampionId: " + ChampionId + ", "
                + "ChampionName: " + ChampionName + ", "
                + "ChampionTransform: " + ChampionTransform + ", "
                + "ConsumablesPurchased: " + ConsumablesPurchased + ", "
                + "DamageDealtToBuildings: " + DamageDealtToBuildings + ", "
                + "DamageDealtToObjectives: " + DamageDealtToObjectives + ", "
                + "DamageDealtToTurrets: " + DamageDealtToTurrets + ", "
                + "DamageSelfMitigated: " + DamageSelfMitigated + ", "
                + "Deaths: " + Deaths + ", "
                + "DetectorWardsPlaced: " + DetectorWardsPlaced + ", "
                + "DoubleKills: " + DoubleKills + ", "
                + "DragonKills: " + DragonKills + ", "
                + "FirstBloodAssist: " + FirstBloodAssist + ", "
                + "FirstBloodKill: " + FirstBloodKill + ", "
                + "FirstTowerAssist: " + FirstTowerAssist + ", "
                + "FirstTowerKill: " + FirstTowerKill + ", "
                + "GameEndedInEarlySurrender: " + GameEndedInEarlySurrender + ", "
                + "GameEndedInSurrender: " + GameEndedInSurrender + ", "
                + "GoldEarned: " + GoldEarned + ", "
                + "GoldSpent: " + GoldSpent + ", "
                + "IndividualPosition: " + IndividualPosition + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "InhibitorTakedowns: " + InhibitorTakedowns + ", "
                + "InhibitorsLost: " + InhibitorsLost + ", "
                + "Item0: " + Item0 + ", "
                + "Item1: " + Item1 + ", "
                + "Item2: " + Item2 + ", "
                + "Item3: " + Item3 + ", "
                + "Item4: " + Item4 + ", "
                + "Item5: " + Item5 + ", "
                + "Item6: " + Item6 + ", "
                + "ItemsPurchased: " + ItemsPurchased + ", "
                + "KillingSprees: " + KillingSprees + ", "
                + "Kills: " + Kills + ", "
                + "Lane: " + Lane + ", "
                + "LargestCriticalStrike: " + LargestCriticalStrike + ", "
                + "LargestKillingSpree: " + LargestKillingSpree + ", "
                + "LargestMultiKill: " + LargestMultiKill + ", "
                + "LongestTimeSpentLiving: " + LongestTimeSpentLiving + ", "
                + "MagicDamageDealt: " + MagicDamageDealt + ", "
                + "MagicDamageDealtToChampions: " + MagicDamageDealtToChampions + ", "
                + "MagicDamageTaken: " + MagicDamageTaken + ", "
                + "NeutralMinionsKilled: " + NeutralMinionsKilled + ", "
                + "NexusKills: " + NexusKills + ", "
                + "NexusTakedowns: " + NexusTakedowns + ", "
                + "NexusLost: " + NexusLost + ", "
                + "ObjectivesStolen: " + ObjectivesStolen + ", "
                + "ObjectivesStolenAssists: " + ObjectivesStolenAssists + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "PentaKills: " + PentaKills + ", "
                + "Perks: " + Perks + ", "
                + "PhysicalDamageDealt: " + PhysicalDamageDealt + ", "
                + "PhysicalDamageDealtToChampions: " + PhysicalDamageDealtToChampions + ", "
                + "PhysicalDamageTaken: " + PhysicalDamageTaken + ", "
                + "ProfileIcon: " + ProfileIcon + ", "
                + "Puuid: " + Puuid + ", "
                + "QuadraKills: " + QuadraKills + ", "
                + "RiotIdName: " + RiotIdName + ", "
                + "RiotIdTagline: " + RiotIdTagline + ", "
                + "Role: " + Role + ", "
                + "SightWardsBoughtInGame: " + SightWardsBoughtInGame + ", "
                + "Spell1Casts: " + Spell1Casts + ", "
                + "Spell2Casts: " + Spell2Casts + ", "
                + "Spell3Casts: " + Spell3Casts + ", "
                + "Spell4Casts: " + Spell4Casts + ", "
                + "Summoner1Casts: " + Summoner1Casts + ", "
                + "Summoner1Id: " + Summoner1Id + ", "
                + "Summoner2Casts: " + Summoner2Casts + ", "
                + "Summoner2Id: " + Summoner2Id + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "SummonerName: " + SummonerName + ", "
                + "TeamEarlySurrendered: " + TeamEarlySurrendered + ", "
                + "TeamId: " + TeamId + ", "
                + "TeamPosition: " + TeamPosition + ", "
                + "TimeCCingOthers: " + TimeCCingOthers + ", "
                + "TimePlayed: " + TimePlayed + ", "
                + "TotalDamageDealt: " + TotalDamageDealt + ", "
                + "TotalDamageDealtToChampions: " + TotalDamageDealtToChampions + ", "
                + "TotalDamageShieldedOnTeammates: " + TotalDamageShieldedOnTeammates + ", "
                + "TotalDamageTaken: " + TotalDamageTaken + ", "
                + "TotalHeal: " + TotalHeal + ", "
                + "TotalHealsOnTeammates: " + TotalHealsOnTeammates + ", "
                + "TotalMinionsKilled: " + TotalMinionsKilled + ", "
                + "TotalTimeCCDealt: " + TotalTimeCCDealt + ", "
                + "TotalTimeSpentDead: " + TotalTimeSpentDead + ", "
                + "TotalUnitsHealed: " + TotalUnitsHealed + ", "
                + "TripleKills: " + TripleKills + ", "
                + "TrueDamageDealt: " + TrueDamageDealt + ", "
                + "TrueDamageDealtToChampions: " + TrueDamageDealtToChampions + ", "
                + "TrueDamageTaken: " + TrueDamageTaken + ", "
                + "TurretKills: " + TurretKills + ", "
                + "TurretTakedowns: " + TurretTakedowns + ", "
                + "TurretsLost: " + TurretsLost + ", "
                + "UnrealKills: " + UnrealKills + ", "
                + "VisionScore: " + VisionScore + ", "
                + "VisionWardsBoughtInGame: " + VisionWardsBoughtInGame + ", "
                + "WardsKilled: " + WardsKilled + ", "
                + "WardsPlaced: " + WardsPlaced + ", "
                + "Win: " + Win + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Perks data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Perks
    {

#nullable disable
        public Perks() {}
#nullable restore

        [JsonProperty("statPerks")]
        public PerkStats StatPerks { get; set; }
        [JsonProperty("styles")]
        public PerkStyle[] Styles { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Perks("
                + "StatPerks: " + StatPerks + ", "
                + "Styles: " + Styles + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// PerkStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PerkStats
    {

#nullable disable
        public PerkStats() {}
#nullable restore

        [JsonProperty("defense")]
        public int Defense { get; set; }
        [JsonProperty("flex")]
        public int Flex { get; set; }
        [JsonProperty("offense")]
        public int Offense { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PerkStats("
                + "Defense: " + Defense + ", "
                + "Flex: " + Flex + ", "
                + "Offense: " + Offense + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// PerkStyle data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PerkStyle
    {

#nullable disable
        public PerkStyle() {}
#nullable restore

        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("selections")]
        public PerkStyleSelection[] Selections { get; set; }
        [JsonProperty("style")]
        public int Style { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PerkStyle("
                + "Description: " + Description + ", "
                + "Selections: " + Selections + ", "
                + "Style: " + Style + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// PerkStyleSelection data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PerkStyleSelection
    {

#nullable disable
        public PerkStyleSelection() {}
#nullable restore

        [JsonProperty("perk")]
        public int Perk { get; set; }
        [JsonProperty("var1")]
        public int Var1 { get; set; }
        [JsonProperty("var2")]
        public int Var2 { get; set; }
        [JsonProperty("var3")]
        public int Var3 { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PerkStyleSelection("
                + "Perk: " + Perk + ", "
                + "Var1: " + Var1 + ", "
                + "Var2: " + Var2 + ", "
                + "Var3: " + Var3 + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Team data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Team
    {

#nullable disable
        public Team() {}
#nullable restore

        [JsonProperty("bans")]
        public Ban[] Bans { get; set; }
        [JsonProperty("objectives")]
        public Objectives Objectives { get; set; }
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team TeamId { get; set; }
        [JsonProperty("win")]
        public bool Win { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Team("
                + "Bans: " + Bans + ", "
                + "Objectives: " + Objectives + ", "
                + "TeamId: " + TeamId + ", "
                + "Win: " + Win + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Ban data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Ban
    {

#nullable disable
        public Ban() {}
#nullable restore

        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Ban("
                + "ChampionId: " + ChampionId + ", "
                + "PickTurn: " + PickTurn + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Objectives data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Objectives
    {

#nullable disable
        public Objectives() {}
#nullable restore

        [JsonProperty("baron")]
        public Objective Baron { get; set; }
        [JsonProperty("champion")]
        public Objective Champion { get; set; }
        [JsonProperty("dragon")]
        public Objective Dragon { get; set; }
        [JsonProperty("inhibitor")]
        public Objective Inhibitor { get; set; }
        [JsonProperty("riftHerald")]
        public Objective RiftHerald { get; set; }
        [JsonProperty("tower")]
        public Objective Tower { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Objectives("
                + "Baron: " + Baron + ", "
                + "Champion: " + Champion + ", "
                + "Dragon: " + Dragon + ", "
                + "Inhibitor: " + Inhibitor + ", "
                + "RiftHerald: " + RiftHerald + ", "
                + "Tower: " + Tower + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// Objective data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Objective
    {

#nullable disable
        public Objective() {}
#nullable restore

        [JsonProperty("first")]
        public bool First { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Objective("
                + "First: " + First + ", "
                + "Kills: " + Kills + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimeline
    {

#nullable disable
        public MatchTimeline() {}
#nullable restore

        [JsonProperty("info")]
        public MatchTimelineInfo Info { get; set; }
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimeline("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// CurrentGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameInfo
    {

#nullable disable
        public CurrentGameInfo() {}
#nullable restore

        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The game mode
        /// </summary>
        [JsonProperty("gameMode")]
        public Camille.Enums.GameMode GameMode { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public Camille.Enums.Queue? GameQueueConfigId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The game type
        /// </summary>
        [JsonProperty("gameType")]
        public Camille.Enums.GameType GameType { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public Camille.Enums.Map MapId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public CurrentGameParticipant[] Participants { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameInfo("
                + "GameId: " + GameId + ", "
                + "GameType: " + GameType + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "MapId: " + MapId + ", "
                + "GameLength: " + GameLength + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// BannedChampion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class BannedChampion
    {

#nullable disable
        public BannedChampion() {}
#nullable restore

        /// <summary>
        /// The ID of the banned champion
        /// </summary>
        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        /// <summary>
        /// The turn during which the champion was banned
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }
        /// <summary>
        /// The ID of the team that banned the champion
        /// </summary>
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "BannedChampion("
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// Observer data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Observer
    {

#nullable disable
        public Observer() {}
#nullable restore

        /// <summary>
        /// Key used to decrypt the spectator grid game data for playback
        /// </summary>
        [JsonProperty("encryptionKey")]
        public string EncryptionKey { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Observer("
                + "EncryptionKey: " + EncryptionKey + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// CurrentGameParticipant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameParticipant
    {

#nullable disable
        public CurrentGameParticipant() {}
#nullable restore

        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        /// <summary>
        /// List of Game Customizations
        /// </summary>
        [JsonProperty("gameCustomizationObjects")]
        public GameCustomizationObject[] GameCustomizationObjects { get; set; }
        /// <summary>
        /// Perks/Runes Reforged Information
        /// </summary>
        [JsonProperty("perks")]
        public Perks? Perks { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The encrypted summoner ID of this participant
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameParticipant("
                + "ChampionId: " + ChampionId + ", "
                + "Perks: " + Perks + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "Bot: " + Bot + ", "
                + "TeamId: " + TeamId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "SummonerId: " + SummonerId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "GameCustomizationObjects: " + GameCustomizationObjects + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// Perks data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Perks
    {

#nullable disable
        public Perks() {}
#nullable restore

        /// <summary>
        /// IDs of the perks/runes assigned.
        /// </summary>
        [JsonProperty("perkIds")]
        public long[] PerkIds { get; set; }
        /// <summary>
        /// Primary runes path
        /// </summary>
        [JsonProperty("perkStyle")]
        public long PerkStyle { get; set; }
        /// <summary>
        /// Secondary runes path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public long PerkSubStyle { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Perks("
                + "PerkIds: " + PerkIds + ", "
                + "PerkStyle: " + PerkStyle + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// GameCustomizationObject data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class GameCustomizationObject
    {

#nullable disable
        public GameCustomizationObject() {}
#nullable restore

        /// <summary>
        /// Category identifier for Game Customization
        /// </summary>
        [JsonProperty("category")]
        public string Category { get; set; }
        /// <summary>
        /// Game Customization content
        /// </summary>
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "GameCustomizationObject("
                + "Category: " + Category + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// FeaturedGames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGames
    {

#nullable disable
        public FeaturedGames() {}
#nullable restore

        /// <summary>
        /// The suggested interval to wait before requesting FeaturedGames again
        /// </summary>
        [JsonProperty("clientRefreshInterval")]
        public long ClientRefreshInterval { get; set; }
        /// <summary>
        /// The list of featured games
        /// </summary>
        [JsonProperty("gameList")]
        public FeaturedGameInfo[] GameList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGames("
                + "GameList: " + GameList + ", "
                + "ClientRefreshInterval: " + ClientRefreshInterval + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// FeaturedGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGameInfo
    {

#nullable disable
        public FeaturedGameInfo() {}
#nullable restore

        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The game mode<para />
        /// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
        /// </summary>
        [JsonProperty("gameMode")]
        public Camille.Enums.GameMode GameMode { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public Camille.Enums.Queue GameQueueConfigId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The game type<para />
        /// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
        /// </summary>
        [JsonProperty("gameType")]
        public Camille.Enums.GameType GameType { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public Camille.Enums.Map MapId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGameInfo("
                + "GameMode: " + GameMode + ", "
                + "GameLength: " + GameLength + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "GameId: " + GameId + ", "
                + "Observers: " + Observers + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "Participants: " + Participants + ", "
                + "PlatformId: " + PlatformId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SpectatorV4
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {

#nullable disable
        public Participant() {}
#nullable restore

        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public Camille.Enums.Champion ChampionId { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "Bot: " + Bot + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.SummonerV4
{
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {

#nullable disable
        public Summoner() {}
#nullable restore

        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner("
                + "AccountId: " + AccountId + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Name: " + Name + ", "
                + "Id: " + Id + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftLeagueV1
{
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {

#nullable disable
        public LeagueList() {}
#nullable restore

        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public Camille.Enums.QueueType Queue { get; set; }
        [JsonProperty("tier")]
        public Camille.Enums.Tier Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList("
                + "LeagueId: " + LeagueId + ", "
                + "Entries: " + Entries + ", "
                + "Tier: " + Tier + ", "
                + "Name: " + Name + ", "
                + "Queue: " + Queue + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftLeagueV1
{
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {

#nullable disable
        public LeagueItem() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("rank")]
        public Camille.Enums.Division Rank { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem("
                + "FreshBlood: " + FreshBlood + ", "
                + "Wins: " + Wins + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Inactive: " + Inactive + ", "
                + "Veteran: " + Veteran + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Losses: " + Losses + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftLeagueV1
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {

#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftLeagueV1
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {

#nullable disable
        public LeagueEntry() {}
#nullable restore

        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("freshBlood")]
        public bool? FreshBlood { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("hotStreak")]
        public bool? HotStreak { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("inactive")]
        public bool? Inactive { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("leagueId")]
        public string? LeagueId { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("leaguePoints")]
        public int? LeaguePoints { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public Camille.Enums.QueueType QueueType { get; set; }
        /// <summary>
        /// A player's division within a tier. Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("rank")]
        public Camille.Enums.Division? Rank { get; set; }
        /// <summary>
        /// Only included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("ratedRating")]
        public int? RatedRating { get; set; }
        /// <summary>
        /// Only included for the RANKED_TFT_TURBO queueType.<para />
        /// (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
        /// </summary>
        [JsonProperty("ratedTier")]
        public string? RatedTier { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("tier")]
        public Camille.Enums.Tier? Tier { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("veteran")]
        public bool? Veteran { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "RatedTier: " + RatedTier + ", "
                + "RatedRating: " + RatedRating + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftLeagueV1
{
    /// <summary>
    /// TopRatedLadderEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TopRatedLadderEntry
    {

#nullable disable
        public TopRatedLadderEntry() {}
#nullable restore

        [JsonProperty("previousUpdateLadderPosition")]
        public int PreviousUpdateLadderPosition { get; set; }
        [JsonProperty("ratedRating")]
        public int RatedRating { get; set; }
        /// <summary>
        /// (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
        /// </summary>
        [JsonProperty("ratedTier")]
        public string RatedTier { get; set; }
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TopRatedLadderEntry("
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "RatedTier: " + RatedTier + ", "
                + "RatedRating: " + RatedRating + ", "
                + "Wins: " + Wins + ", "
                + "PreviousUpdateLadderPosition: " + PreviousUpdateLadderPosition + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {

#nullable disable
        public Match() {}
#nullable restore

        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {

#nullable disable
        public Metadata() {}
#nullable restore

        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("data_version")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("match_id")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata("
                + "DataVersion: " + DataVersion + ", "
                + "MatchId: " + MatchId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {

#nullable disable
        public Info() {}
#nullable restore

        /// <summary>
        /// Unix timestamp.
        /// </summary>
        [JsonProperty("game_datetime")]
        public long GameDatetime { get; set; }
        /// <summary>
        /// Game length in seconds.
        /// </summary>
        [JsonProperty("game_length")]
        public float GameLength { get; set; }
        /// <summary>
        /// Game variation key. Game variations documented in TFT static data.
        /// </summary>
        [JsonProperty("game_variation")]
        public string? GameVariation { get; set; }
        /// <summary>
        /// Game client version.
        /// </summary>
        [JsonProperty("game_version")]
        public string GameVersion { get; set; }
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Please refer to the League of Legends documentation.
        /// </summary>
        [JsonProperty("queue_id")]
        public int QueueId { get; set; }
        /// <summary>
        /// Teamfight Tactics set number.
        /// </summary>
        [JsonProperty("tft_set_number")]
        public int TftSetNumber { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info("
                + "GameDatetime: " + GameDatetime + ", "
                + "GameLength: " + GameLength + ", "
                + "GameVariation: " + GameVariation + ", "
                + "GameVersion: " + GameVersion + ", "
                + "Participants: " + Participants + ", "
                + "QueueId: " + QueueId + ", "
                + "TftSetNumber: " + TftSetNumber + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {

#nullable disable
        public Participant() {}
#nullable restore

        /// <summary>
        /// Participant's companion.
        /// </summary>
        [JsonProperty("companion")]
        public Companion Companion { get; set; }
        /// <summary>
        /// Gold left after participant was eliminated.
        /// </summary>
        [JsonProperty("gold_left")]
        public int GoldLeft { get; set; }
        /// <summary>
        /// The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
        /// </summary>
        [JsonProperty("last_round")]
        public int LastRound { get; set; }
        /// <summary>
        /// Participant Little Legend level. Note: This is not the number of active units.
        /// </summary>
        [JsonProperty("level")]
        public int Level { get; set; }
        /// <summary>
        /// Participant placement upon elimination.
        /// </summary>
        [JsonProperty("placement")]
        public int Placement { get; set; }
        /// <summary>
        /// Number of players the participant eliminated.
        /// </summary>
        [JsonProperty("players_eliminated")]
        public int PlayersEliminated { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// The number of seconds before the participant was eliminated.
        /// </summary>
        [JsonProperty("time_eliminated")]
        public float TimeEliminated { get; set; }
        /// <summary>
        /// Damage the participant dealt to other players.
        /// </summary>
        [JsonProperty("total_damage_to_players")]
        public int TotalDamageToPlayers { get; set; }
        /// <summary>
        /// A complete list of traits for the participant's active units.
        /// </summary>
        [JsonProperty("traits")]
        public Trait[] Traits { get; set; }
        /// <summary>
        /// A list of active units for the participant.
        /// </summary>
        [JsonProperty("units")]
        public Unit[] Units { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "Companion: " + Companion + ", "
                + "GoldLeft: " + GoldLeft + ", "
                + "LastRound: " + LastRound + ", "
                + "Level: " + Level + ", "
                + "Placement: " + Placement + ", "
                + "PlayersEliminated: " + PlayersEliminated + ", "
                + "Puuid: " + Puuid + ", "
                + "TimeEliminated: " + TimeEliminated + ", "
                + "TotalDamageToPlayers: " + TotalDamageToPlayers + ", "
                + "Traits: " + Traits + ", "
                + "Units: " + Units + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Trait data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Trait
    {

#nullable disable
        public Trait() {}
#nullable restore

        /// <summary>
        /// Trait name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Number of units with this trait.
        /// </summary>
        [JsonProperty("num_units")]
        public int NumUnits { get; set; }
        /// <summary>
        /// Current style for this trait. (0 = No style, 1 = Bronze, 2 = Silver, 3 = Gold, 4 = Chromatic)
        /// </summary>
        [JsonProperty("style")]
        public int? Style { get; set; }
        /// <summary>
        /// Current active tier for the trait.
        /// </summary>
        [JsonProperty("tier_current")]
        public int TierCurrent { get; set; }
        /// <summary>
        /// Total tiers for the trait.
        /// </summary>
        [JsonProperty("tier_total")]
        public int? TierTotal { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Trait("
                + "Name: " + Name + ", "
                + "NumUnits: " + NumUnits + ", "
                + "Style: " + Style + ", "
                + "TierCurrent: " + TierCurrent + ", "
                + "TierTotal: " + TierTotal + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Unit data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Unit
    {

#nullable disable
        public Unit() {}
#nullable restore

        /// <summary>
        /// This field was introduced in patch 9.22 with data_version 2.
        /// </summary>
        [JsonProperty("character_id")]
        public string CharacterId { get; set; }
        /// <summary>
        /// If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response.
        /// </summary>
        [JsonProperty("chosen")]
        public string? Chosen { get; set; }
        /// <summary>
        /// A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids.
        /// </summary>
        [JsonProperty("items")]
        public int[] Items { get; set; }
        /// <summary>
        /// Unit name. This field is often left blank.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Unit rarity. This doesn't equate to the unit cost.
        /// </summary>
        [JsonProperty("rarity")]
        public int Rarity { get; set; }
        /// <summary>
        /// Unit tier.
        /// </summary>
        [JsonProperty("tier")]
        public int Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Unit("
                + "Items: " + Items + ", "
                + "CharacterId: " + CharacterId + ", "
                + "Chosen: " + Chosen + ", "
                + "Name: " + Name + ", "
                + "Rarity: " + Rarity + ", "
                + "Tier: " + Tier + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftMatchV1
{
    /// <summary>
    /// Companion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Companion
    {

#nullable disable
        public Companion() {}
#nullable restore

        [JsonProperty("content_ID")]
        public string ContentID { get; set; }
        [JsonProperty("skin_ID")]
        public int SkinID { get; set; }
        [JsonProperty("species")]
        public string Species { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Companion("
                + "SkinID: " + SkinID + ", "
                + "ContentID: " + ContentID + ", "
                + "Species: " + Species + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TftSummonerV1
{
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {

#nullable disable
        public Summoner() {}
#nullable restore

        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change.
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner("
                + "AccountId: " + AccountId + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Name: " + Name + ", "
                + "Id: " + Id + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentStubV4
{
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {

#nullable disable
        public TournamentCodeParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string? Metadata { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "Metadata: " + Metadata + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentStubV4
{
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {

#nullable disable
        public LobbyEventWrapper() {}
#nullable restore

        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper("
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentStubV4
{
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {

#nullable disable
        public LobbyEvent() {}
#nullable restore

        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent("
                + "SummonerId: " + SummonerId + ", "
                + "EventType: " + EventType + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentStubV4
{
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {

#nullable disable
        public ProviderRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters("
                + "Region: " + Region + ", "
                + "Url: " + Url + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentStubV4
{
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {

#nullable disable
        public TournamentRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters("
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {

#nullable disable
        public TournamentCodeParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string? Metadata { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "Metadata: " + Metadata + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// TournamentCode data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCode
    {

#nullable disable
        public TournamentCode() {}
#nullable restore

        /// <summary>
        /// The tournament code.
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }
        /// <summary>
        /// The tournament code's ID.
        /// </summary>
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// The lobby name for the tournament code game.
        /// </summary>
        [JsonProperty("lobbyName")]
        public string LobbyName { get; set; }
        /// <summary>
        /// The game map for the tournament code game
        /// </summary>
        [JsonProperty("map")]
        public string Map { get; set; }
        /// <summary>
        /// The metadata for tournament code.
        /// </summary>
        [JsonProperty("metaData")]
        public string MetaData { get; set; }
        /// <summary>
        /// The summonerIds of the participants (Encrypted)
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }
        /// <summary>
        /// The password for the tournament code game.
        /// </summary>
        [JsonProperty("password")]
        public string Password { get; set; }
        /// <summary>
        /// The pick mode for tournament code game.
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The provider's ID.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The tournament code's region.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The spectator mode for the tournament code game.
        /// </summary>
        [JsonProperty("spectators")]
        public string Spectators { get; set; }
        /// <summary>
        /// The team size for the tournament code game.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The tournament's ID.
        /// </summary>
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCode("
                + "Code: " + Code + ", "
                + "Spectators: " + Spectators + ", "
                + "LobbyName: " + LobbyName + ", "
                + "MetaData: " + MetaData + ", "
                + "Password: " + Password + ", "
                + "TeamSize: " + TeamSize + ", "
                + "ProviderId: " + ProviderId + ", "
                + "PickType: " + PickType + ", "
                + "TournamentId: " + TournamentId + ", "
                + "Id: " + Id + ", "
                + "Region: " + Region + ", "
                + "Map: " + Map + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// TournamentCodeUpdateParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeUpdateParameters
    {

#nullable disable
        public TournamentCodeUpdateParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// The pick type<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeUpdateParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {

#nullable disable
        public LobbyEventWrapper() {}
#nullable restore

        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper("
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {

#nullable disable
        public LobbyEvent() {}
#nullable restore

        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent("
                + "Timestamp: " + Timestamp + ", "
                + "EventType: " + EventType + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {

#nullable disable
        public ProviderRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters("
                + "Region: " + Region + ", "
                + "Url: " + Url + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.TournamentV4
{
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {

#nullable disable
        public TournamentRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters("
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValContentV1
{
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {

#nullable disable
        public Content() {}
#nullable restore

        [JsonProperty("acts")]
        public Act[] Acts { get; set; }
        [JsonProperty("characters")]
        public ContentItem[] Characters { get; set; }
        [JsonProperty("charmLevels")]
        public ContentItem[] CharmLevels { get; set; }
        [JsonProperty("charms")]
        public ContentItem[] Charms { get; set; }
        [JsonProperty("chromas")]
        public ContentItem[] Chromas { get; set; }
        [JsonProperty("equips")]
        public ContentItem[] Equips { get; set; }
        [JsonProperty("gameModes")]
        public ContentItem[] GameModes { get; set; }
        [JsonProperty("maps")]
        public ContentItem[] Maps { get; set; }
        [JsonProperty("playerCards")]
        public ContentItem[] PlayerCards { get; set; }
        [JsonProperty("playerTitles")]
        public ContentItem[] PlayerTitles { get; set; }
        [JsonProperty("skinLevels")]
        public ContentItem[] SkinLevels { get; set; }
        [JsonProperty("skins")]
        public ContentItem[] Skins { get; set; }
        [JsonProperty("sprayLevels")]
        public ContentItem[] SprayLevels { get; set; }
        [JsonProperty("sprays")]
        public ContentItem[] Sprays { get; set; }
        [JsonProperty("version")]
        public string Version { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Version: " + Version + ", "
                + "Characters: " + Characters + ", "
                + "Maps: " + Maps + ", "
                + "Chromas: " + Chromas + ", "
                + "Skins: " + Skins + ", "
                + "SkinLevels: " + SkinLevels + ", "
                + "Equips: " + Equips + ", "
                + "GameModes: " + GameModes + ", "
                + "Sprays: " + Sprays + ", "
                + "SprayLevels: " + SprayLevels + ", "
                + "Charms: " + Charms + ", "
                + "CharmLevels: " + CharmLevels + ", "
                + "PlayerCards: " + PlayerCards + ", "
                + "PlayerTitles: " + PlayerTitles + ", "
                + "Acts: " + Acts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValContentV1
{
    /// <summary>
    /// ContentItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ContentItem
    {

#nullable disable
        public ContentItem() {}
#nullable restore

        [JsonProperty("assetName")]
        public string AssetName { get; set; }
        /// <summary>
        /// This field is only included for maps and game modes. These values are used in the match response.
        /// </summary>
        [JsonProperty("assetPath")]
        public string? AssetPath { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// This field is excluded from the response when a locale is set
        /// </summary>
        [JsonProperty("localizedNames")]
        public LocalizedNames? LocalizedNames { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ContentItem("
                + "Name: " + Name + ", "
                + "LocalizedNames: " + LocalizedNames + ", "
                + "Id: " + Id + ", "
                + "AssetName: " + AssetName + ", "
                + "AssetPath: " + AssetPath + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValContentV1
{
    /// <summary>
    /// LocalizedNames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LocalizedNames
    {

#nullable disable
        public LocalizedNames() {}
#nullable restore

        [JsonProperty("ar-AE")]
        public string ArAE { get; set; }
        [JsonProperty("de-DE")]
        public string DeDE { get; set; }
        [JsonProperty("en-GB")]
        public string EnGB { get; set; }
        [JsonProperty("en-US")]
        public string EnUS { get; set; }
        [JsonProperty("es-ES")]
        public string EsES { get; set; }
        [JsonProperty("es-MX")]
        public string EsMX { get; set; }
        [JsonProperty("fr-FR")]
        public string FrFR { get; set; }
        [JsonProperty("id-ID")]
        public string IdID { get; set; }
        [JsonProperty("it-IT")]
        public string ItIT { get; set; }
        [JsonProperty("ja-JP")]
        public string JaJP { get; set; }
        [JsonProperty("ko-KR")]
        public string KoKR { get; set; }
        [JsonProperty("pl-PL")]
        public string PlPL { get; set; }
        [JsonProperty("pt-BR")]
        public string PtBR { get; set; }
        [JsonProperty("ru-RU")]
        public string RuRU { get; set; }
        [JsonProperty("th-TH")]
        public string ThTH { get; set; }
        [JsonProperty("tr-TR")]
        public string TrTR { get; set; }
        [JsonProperty("vi-VN")]
        public string ViVN { get; set; }
        [JsonProperty("zh-CN")]
        public string ZhCN { get; set; }
        [JsonProperty("zh-TW")]
        public string ZhTW { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LocalizedNames("
                + "ArAE: " + ArAE + ", "
                + "DeDE: " + DeDE + ", "
                + "EnGB: " + EnGB + ", "
                + "EnUS: " + EnUS + ", "
                + "EsES: " + EsES + ", "
                + "EsMX: " + EsMX + ", "
                + "FrFR: " + FrFR + ", "
                + "IdID: " + IdID + ", "
                + "ItIT: " + ItIT + ", "
                + "JaJP: " + JaJP + ", "
                + "KoKR: " + KoKR + ", "
                + "PlPL: " + PlPL + ", "
                + "PtBR: " + PtBR + ", "
                + "RuRU: " + RuRU + ", "
                + "ThTH: " + ThTH + ", "
                + "TrTR: " + TrTR + ", "
                + "ViVN: " + ViVN + ", "
                + "ZhCN: " + ZhCN + ", "
                + "ZhTW: " + ZhTW + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValContentV1
{
    /// <summary>
    /// Act data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Act
    {

#nullable disable
        public Act() {}
#nullable restore

        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("isActive")]
        public bool IsActive { get; set; }
        /// <summary>
        /// This field is excluded from the response when a locale is set
        /// </summary>
        [JsonProperty("localizedNames")]
        public LocalizedNames? LocalizedNames { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Act("
                + "Name: " + Name + ", "
                + "LocalizedNames: " + LocalizedNames + ", "
                + "Id: " + Id + ", "
                + "IsActive: " + IsActive + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {

#nullable disable
        public Match() {}
#nullable restore

        [JsonProperty("coaches")]
        public Coach[] Coaches { get; set; }
        [JsonProperty("matchInfo")]
        public MatchInfo MatchInfo { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        [JsonProperty("roundResults")]
        public RoundResult[] RoundResults { get; set; }
        [JsonProperty("teams")]
        public Team[] Teams { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "MatchInfo: " + MatchInfo + ", "
                + "Players: " + Players + ", "
                + "Coaches: " + Coaches + ", "
                + "Teams: " + Teams + ", "
                + "RoundResults: " + RoundResults + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// MatchInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchInfo
    {

#nullable disable
        public MatchInfo() {}
#nullable restore

        [JsonProperty("customGameName")]
        public string CustomGameName { get; set; }
        [JsonProperty("gameLengthMillis")]
        public int GameLengthMillis { get; set; }
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        [JsonProperty("gameStartMillis")]
        public long GameStartMillis { get; set; }
        [JsonProperty("isCompleted")]
        public bool IsCompleted { get; set; }
        [JsonProperty("isRanked")]
        public bool IsRanked { get; set; }
        [JsonProperty("mapId")]
        public string MapId { get; set; }
        [JsonProperty("matchId")]
        public string MatchId { get; set; }
        [JsonProperty("provisioningFlowId")]
        public string ProvisioningFlowId { get; set; }
        [JsonProperty("queueId")]
        public string QueueId { get; set; }
        [JsonProperty("seasonId")]
        public string SeasonId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchInfo("
                + "MatchId: " + MatchId + ", "
                + "MapId: " + MapId + ", "
                + "GameLengthMillis: " + GameLengthMillis + ", "
                + "GameStartMillis: " + GameStartMillis + ", "
                + "ProvisioningFlowId: " + ProvisioningFlowId + ", "
                + "IsCompleted: " + IsCompleted + ", "
                + "CustomGameName: " + CustomGameName + ", "
                + "QueueId: " + QueueId + ", "
                + "GameMode: " + GameMode + ", "
                + "IsRanked: " + IsRanked + ", "
                + "SeasonId: " + SeasonId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {

#nullable disable
        public Player() {}
#nullable restore

        [JsonProperty("characterId")]
        public string CharacterId { get; set; }
        [JsonProperty("competitiveTier")]
        public int CompetitiveTier { get; set; }
        [JsonProperty("gameName")]
        public string GameName { get; set; }
        [JsonProperty("partyId")]
        public string PartyId { get; set; }
        [JsonProperty("playerCard")]
        public string PlayerCard { get; set; }
        [JsonProperty("playerTitle")]
        public string PlayerTitle { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("stats")]
        public PlayerStats Stats { get; set; }
        [JsonProperty("tagLine")]
        public string TagLine { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "TeamId: " + TeamId + ", "
                + "PartyId: " + PartyId + ", "
                + "CharacterId: " + CharacterId + ", "
                + "Stats: " + Stats + ", "
                + "CompetitiveTier: " + CompetitiveTier + ", "
                + "PlayerCard: " + PlayerCard + ", "
                + "PlayerTitle: " + PlayerTitle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// PlayerStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerStats
    {

#nullable disable
        public PlayerStats() {}
#nullable restore

        [JsonProperty("abilityCasts")]
        public AbilityCasts AbilityCasts { get; set; }
        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("playtimeMillis")]
        public int PlaytimeMillis { get; set; }
        [JsonProperty("roundsPlayed")]
        public int RoundsPlayed { get; set; }
        [JsonProperty("score")]
        public int Score { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerStats("
                + "Score: " + Score + ", "
                + "RoundsPlayed: " + RoundsPlayed + ", "
                + "Kills: " + Kills + ", "
                + "Deaths: " + Deaths + ", "
                + "Assists: " + Assists + ", "
                + "PlaytimeMillis: " + PlaytimeMillis + ", "
                + "AbilityCasts: " + AbilityCasts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// AbilityCasts data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class AbilityCasts
    {

#nullable disable
        public AbilityCasts() {}
#nullable restore

        [JsonProperty("ability1Casts")]
        public int Ability1Casts { get; set; }
        [JsonProperty("ability2Casts")]
        public int Ability2Casts { get; set; }
        [JsonProperty("grenadeCasts")]
        public int GrenadeCasts { get; set; }
        [JsonProperty("ultimateCasts")]
        public int UltimateCasts { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "AbilityCasts("
                + "GrenadeCasts: " + GrenadeCasts + ", "
                + "Ability1Casts: " + Ability1Casts + ", "
                + "Ability2Casts: " + Ability2Casts + ", "
                + "UltimateCasts: " + UltimateCasts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Coach data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Coach
    {

#nullable disable
        public Coach() {}
#nullable restore

        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Coach("
                + "Puuid: " + Puuid + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Team data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Team
    {

#nullable disable
        public Team() {}
#nullable restore

        /// <summary>
        /// Team points scored. Number of kills in deathmatch.
        /// </summary>
        [JsonProperty("numPoints")]
        public int NumPoints { get; set; }
        [JsonProperty("roundsPlayed")]
        public int RoundsPlayed { get; set; }
        [JsonProperty("roundsWon")]
        public int RoundsWon { get; set; }
        /// <summary>
        /// This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch.
        /// </summary>
        [JsonProperty("teamId")]
        public string TeamId { get; set; }
        [JsonProperty("won")]
        public bool Won { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Team("
                + "TeamId: " + TeamId + ", "
                + "Won: " + Won + ", "
                + "RoundsPlayed: " + RoundsPlayed + ", "
                + "RoundsWon: " + RoundsWon + ", "
                + "NumPoints: " + NumPoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// RoundResult data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class RoundResult
    {

#nullable disable
        public RoundResult() {}
#nullable restore

        /// <summary>
        /// PUUID of player
        /// </summary>
        [JsonProperty("bombDefuser")]
        public string BombDefuser { get; set; }
        /// <summary>
        /// PUUID of player
        /// </summary>
        [JsonProperty("bombPlanter")]
        public string BombPlanter { get; set; }
        [JsonProperty("defuseLocation")]
        public Location DefuseLocation { get; set; }
        [JsonProperty("defusePlayerLocations")]
        public PlayerLocations[] DefusePlayerLocations { get; set; }
        [JsonProperty("defuseRoundTime")]
        public int DefuseRoundTime { get; set; }
        [JsonProperty("plantLocation")]
        public Location PlantLocation { get; set; }
        [JsonProperty("plantPlayerLocations")]
        public PlayerLocations[] PlantPlayerLocations { get; set; }
        [JsonProperty("plantRoundTime")]
        public int PlantRoundTime { get; set; }
        [JsonProperty("plantSite")]
        public string PlantSite { get; set; }
        [JsonProperty("playerStats")]
        public PlayerRoundStats[] PlayerStats { get; set; }
        [JsonProperty("roundCeremony")]
        public string RoundCeremony { get; set; }
        [JsonProperty("roundNum")]
        public int RoundNum { get; set; }
        [JsonProperty("roundResultCode")]
        public string RoundResultCode { get; set; }
        [JsonProperty("roundResult")]
        public string RoundResultstring { get; set; }
        [JsonProperty("winningTeam")]
        public string WinningTeam { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "RoundResult("
                + "RoundNum: " + RoundNum + ", "
                + "RoundResultstring: " + RoundResultstring + ", "
                + "RoundCeremony: " + RoundCeremony + ", "
                + "WinningTeam: " + WinningTeam + ", "
                + "BombPlanter: " + BombPlanter + ", "
                + "BombDefuser: " + BombDefuser + ", "
                + "PlantRoundTime: " + PlantRoundTime + ", "
                + "PlantPlayerLocations: " + PlantPlayerLocations + ", "
                + "PlantLocation: " + PlantLocation + ", "
                + "PlantSite: " + PlantSite + ", "
                + "DefuseRoundTime: " + DefuseRoundTime + ", "
                + "DefusePlayerLocations: " + DefusePlayerLocations + ", "
                + "DefuseLocation: " + DefuseLocation + ", "
                + "PlayerStats: " + PlayerStats + ", "
                + "RoundResultCode: " + RoundResultCode + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// PlayerLocations data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerLocations
    {

#nullable disable
        public PlayerLocations() {}
#nullable restore

        [JsonProperty("location")]
        public Location Location { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("viewRadians")]
        public float ViewRadians { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerLocations("
                + "Puuid: " + Puuid + ", "
                + "ViewRadians: " + ViewRadians + ", "
                + "Location: " + Location + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Location data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Location
    {

#nullable disable
        public Location() {}
#nullable restore

        [JsonProperty("x")]
        public int X { get; set; }
        [JsonProperty("y")]
        public int Y { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Location("
                + "X: " + X + ", "
                + "Y: " + Y + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// PlayerRoundStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerRoundStats
    {

#nullable disable
        public PlayerRoundStats() {}
#nullable restore

        [JsonProperty("ability")]
        public Ability Ability { get; set; }
        [JsonProperty("damage")]
        public Damage[] Damage { get; set; }
        [JsonProperty("economy")]
        public Economy Economy { get; set; }
        [JsonProperty("kills")]
        public Kill[] Kills { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("score")]
        public int Score { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerRoundStats("
                + "Puuid: " + Puuid + ", "
                + "Kills: " + Kills + ", "
                + "Damage: " + Damage + ", "
                + "Score: " + Score + ", "
                + "Economy: " + Economy + ", "
                + "Ability: " + Ability + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Kill data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Kill
    {

#nullable disable
        public Kill() {}
#nullable restore

        /// <summary>
        /// List of PUUIDs
        /// </summary>
        [JsonProperty("assistants")]
        public string[] Assistants { get; set; }
        [JsonProperty("finishingDamage")]
        public FinishingDamage FinishingDamage { get; set; }
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("killer")]
        public string Killer { get; set; }
        [JsonProperty("playerLocations")]
        public PlayerLocations[] PlayerLocations { get; set; }
        [JsonProperty("timeSinceGameStartMillis")]
        public int TimeSinceGameStartMillis { get; set; }
        [JsonProperty("timeSinceRoundStartMillis")]
        public int TimeSinceRoundStartMillis { get; set; }
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("victim")]
        public string Victim { get; set; }
        [JsonProperty("victimLocation")]
        public Location VictimLocation { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Kill("
                + "TimeSinceGameStartMillis: " + TimeSinceGameStartMillis + ", "
                + "TimeSinceRoundStartMillis: " + TimeSinceRoundStartMillis + ", "
                + "Killer: " + Killer + ", "
                + "Victim: " + Victim + ", "
                + "VictimLocation: " + VictimLocation + ", "
                + "Assistants: " + Assistants + ", "
                + "PlayerLocations: " + PlayerLocations + ", "
                + "FinishingDamage: " + FinishingDamage + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// FinishingDamage data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FinishingDamage
    {

#nullable disable
        public FinishingDamage() {}
#nullable restore

        [JsonProperty("damageItem")]
        public string DamageItem { get; set; }
        [JsonProperty("damageType")]
        public string DamageType { get; set; }
        [JsonProperty("isSecondaryFireMode")]
        public bool IsSecondaryFireMode { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FinishingDamage("
                + "DamageType: " + DamageType + ", "
                + "DamageItem: " + DamageItem + ", "
                + "IsSecondaryFireMode: " + IsSecondaryFireMode + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Damage data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Damage
    {

#nullable disable
        public Damage() {}
#nullable restore

        [JsonProperty("bodyshots")]
        public int Bodyshots { get; set; }
        [JsonProperty("damage")]
        public int Damageint { get; set; }
        [JsonProperty("headshots")]
        public int Headshots { get; set; }
        [JsonProperty("legshots")]
        public int Legshots { get; set; }
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("receiver")]
        public string Receiver { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Damage("
                + "Receiver: " + Receiver + ", "
                + "Damageint: " + Damageint + ", "
                + "Legshots: " + Legshots + ", "
                + "Bodyshots: " + Bodyshots + ", "
                + "Headshots: " + Headshots + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Economy data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Economy
    {

#nullable disable
        public Economy() {}
#nullable restore

        [JsonProperty("armor")]
        public string Armor { get; set; }
        [JsonProperty("loadoutValue")]
        public int LoadoutValue { get; set; }
        [JsonProperty("remaining")]
        public int Remaining { get; set; }
        [JsonProperty("spent")]
        public int Spent { get; set; }
        [JsonProperty("weapon")]
        public string Weapon { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Economy("
                + "LoadoutValue: " + LoadoutValue + ", "
                + "Weapon: " + Weapon + ", "
                + "Armor: " + Armor + ", "
                + "Remaining: " + Remaining + ", "
                + "Spent: " + Spent + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Ability data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Ability
    {

#nullable disable
        public Ability() {}
#nullable restore

        [JsonProperty("ability1Effects")]
        public string Ability1Effects { get; set; }
        [JsonProperty("ability2Effects")]
        public string Ability2Effects { get; set; }
        [JsonProperty("grenadeEffects")]
        public string GrenadeEffects { get; set; }
        [JsonProperty("ultimateEffects")]
        public string UltimateEffects { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Ability("
                + "GrenadeEffects: " + GrenadeEffects + ", "
                + "Ability1Effects: " + Ability1Effects + ", "
                + "Ability2Effects: " + Ability2Effects + ", "
                + "UltimateEffects: " + UltimateEffects + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// Matchlist data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Matchlist
    {

#nullable disable
        public Matchlist() {}
#nullable restore

        [JsonProperty("history")]
        public MatchlistEntry[] History { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Matchlist("
                + "Puuid: " + Puuid + ", "
                + "History: " + History + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// MatchlistEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchlistEntry
    {

#nullable disable
        public MatchlistEntry() {}
#nullable restore

        [JsonProperty("gameStartTimeMillis")]
        public long GameStartTimeMillis { get; set; }
        [JsonProperty("matchId")]
        public string MatchId { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchlistEntry("
                + "MatchId: " + MatchId + ", "
                + "GameStartTimeMillis: " + GameStartTimeMillis + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValMatchV1
{
    /// <summary>
    /// RecentMatches data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class RecentMatches
    {

#nullable disable
        public RecentMatches() {}
#nullable restore

        [JsonProperty("currentTime")]
        public long CurrentTime { get; set; }
        /// <summary>
        /// A list of recent match ids.
        /// </summary>
        [JsonProperty("matchIds")]
        public string[] MatchIds { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "RecentMatches("
                + "CurrentTime: " + CurrentTime + ", "
                + "MatchIds: " + MatchIds + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValRankedV1
{
    /// <summary>
    /// Leaderboard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Leaderboard
    {

#nullable disable
        public Leaderboard() {}
#nullable restore

        /// <summary>
        /// The act id for the given leaderboard. Act ids can be found using the val-content API.
        /// </summary>
        [JsonProperty("actId")]
        public string ActId { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        /// <summary>
        /// The shard for the given leaderboard.
        /// </summary>
        [JsonProperty("shard")]
        public string Shard { get; set; }
        /// <summary>
        /// The total number of players in the leaderboard.
        /// </summary>
        [JsonProperty("totalPlayers")]
        public long TotalPlayers { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Leaderboard("
                + "Shard: " + Shard + ", "
                + "ActId: " + ActId + ", "
                + "TotalPlayers: " + TotalPlayers + ", "
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValRankedV1
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {

#nullable disable
        public Player() {}
#nullable restore

        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("gameName")]
        public string? GameName { get; set; }
        [JsonProperty("leaderboardRank")]
        public long LeaderboardRank { get; set; }
        [JsonProperty("numberOfWins")]
        public long NumberOfWins { get; set; }
        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("puuid")]
        public string? Puuid { get; set; }
        [JsonProperty("rankedRating")]
        public long RankedRating { get; set; }
        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("tagLine")]
        public string? TagLine { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "LeaderboardRank: " + LeaderboardRank + ", "
                + "RankedRating: " + RankedRating + ", "
                + "NumberOfWins: " + NumberOfWins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValStatusV1
{
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {

#nullable disable
        public PlatformData() {}
#nullable restore

        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValStatusV1
{
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {

#nullable disable
        public Status() {}
#nullable restore

        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValStatusV1
{
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {

#nullable disable
        public Content() {}
#nullable restore

        [JsonProperty("content")]
        public string Contentstring { get; set; }
        [JsonProperty("locale")]
        public string Locale { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.ValStatusV1
{
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {

#nullable disable
        public Update() {}
#nullable restore

        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameEvent
    {

#nullable disable
        public MatchTimelineInfoFrameEvent() {}
#nullable restore

        [JsonProperty("afterId")]
        public int? AfterId { get; set; }
        [JsonProperty("assistingParticipantIds")]
        public int[]? AssistingParticipantIds { get; set; }
        [JsonProperty("beforeId")]
        public int? BeforeId { get; set; }
        [JsonProperty("bounty")]
        public int? Bounty { get; set; }
        [JsonProperty("buildingType")]
        public string? BuildingType { get; set; }
        [JsonProperty("creatorId")]
        public int? CreatorId { get; set; }
        [JsonProperty("gameId")]
        public long? GameId { get; set; }
        [JsonProperty("goldGain")]
        public int? GoldGain { get; set; }
        [JsonProperty("itemId")]
        public int? ItemId { get; set; }
        [JsonProperty("killerId")]
        public int? KillerId { get; set; }
        [JsonProperty("killerTeamId")]
        public Camille.RiotGames.Enums.Team? KillerTeamId { get; set; }
        [JsonProperty("killStreakLength")]
        public int? KillStreakLength { get; set; }
        [JsonProperty("killType")]
        public string? KillType { get; set; }
        [JsonProperty("laneType")]
        public string? LaneType { get; set; }
        [JsonProperty("level")]
        public int? Level { get; set; }
        [JsonProperty("levelUpType")]
        public string? LevelUpType { get; set; }
        [JsonProperty("monsterSubType")]
        public string? MonsterSubType { get; set; }
        [JsonProperty("monsterType")]
        public string? MonsterType { get; set; }
        [JsonProperty("multiKillLength")]
        public int? MultiKillLength { get; set; }
        [JsonProperty("name")]
        public string? Name { get; set; }
        [JsonProperty("participantId")]
        public int? ParticipantId { get; set; }
        [JsonProperty("position")]
        public MatchTimelinePosition? Position { get; set; }
        [JsonProperty("realTimestamp")]
        public long? RealTimestamp { get; set; }
        [JsonProperty("skillSlot")]
        public int? SkillSlot { get; set; }
        [JsonProperty("teamId")]
        public Camille.RiotGames.Enums.Team? TeamId { get; set; }
        [JsonProperty("timestamp")]
        public int Timestamp { get; set; }
        [JsonProperty("towerType")]
        public string? TowerType { get; set; }
        [JsonProperty("transformType")]
        public string? TransformType { get; set; }
        /// <summary>
        /// Timeline event type.<para />
        /// (Known legal values: ASCENDED_EVENT, BUILDING_KILL, CAPTURE_POINT, CHAMPION_KILL, CHAMPION_SPECIAL_KILL, CHAMPION_TRANSFORM, DRAGON_SOUL_GIVEN, ELITE_MONSTER_KILL, GAME_END, ITEM_DESTROYED, ITEM_PURCHASED, ITEM_SOLD, ITEM_UNDO, LEVEL_UP, PAUSE_END, PAUSE_START, SKILL_LEVEL_UP, TURRET_PLATE_DESTROYED, WARD_KILL, WARD_PLACED)
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("victimDamageDealt")]
        public MatchTimelineInfoFrameEventVictimDamageDealt[]? VictimDamageDealt { get; set; }
        [JsonProperty("victimDamageReceived")]
        public MatchTimelineInfoFrameEventVictimDamageDealt[]? VictimDamageReceived { get; set; }
        [JsonProperty("victimId")]
        public int? VictimId { get; set; }
        [JsonProperty("wardType")]
        public string? WardType { get; set; }
        [JsonProperty("winningTeam")]
        public int? WinningTeam { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameEvent("
                + "RealTimestamp: " + RealTimestamp + ", "
                + "Timestamp: " + Timestamp + ", "
                + "Type: " + Type + ", "
                + "ItemId: " + ItemId + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "LevelUpType: " + LevelUpType + ", "
                + "SkillSlot: " + SkillSlot + ", "
                + "CreatorId: " + CreatorId + ", "
                + "WardType: " + WardType + ", "
                + "Level: " + Level + ", "
                + "AssistingParticipantIds: " + AssistingParticipantIds + ", "
                + "Bounty: " + Bounty + ", "
                + "KillStreakLength: " + KillStreakLength + ", "
                + "KillerId: " + KillerId + ", "
                + "Position: " + Position + ", "
                + "VictimDamageDealt: " + VictimDamageDealt + ", "
                + "VictimDamageReceived: " + VictimDamageReceived + ", "
                + "VictimId: " + VictimId + ", "
                + "KillType: " + KillType + ", "
                + "LaneType: " + LaneType + ", "
                + "TeamId: " + TeamId + ", "
                + "MultiKillLength: " + MultiKillLength + ", "
                + "KillerTeamId: " + KillerTeamId + ", "
                + "MonsterType: " + MonsterType + ", "
                + "MonsterSubType: " + MonsterSubType + ", "
                + "BuildingType: " + BuildingType + ", "
                + "TowerType: " + TowerType + ", "
                + "AfterId: " + AfterId + ", "
                + "BeforeId: " + BeforeId + ", "
                + "GoldGain: " + GoldGain + ", "
                + "GameId: " + GameId + ", "
                + "WinningTeam: " + WinningTeam + ", "
                + "TransformType: " + TransformType + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameParticipantFrameChampionStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameParticipantFrameChampionStats
    {

#nullable disable
        public MatchTimelineInfoFrameParticipantFrameChampionStats() {}
#nullable restore

        [JsonProperty("abilityHaste")]
        public int? AbilityHaste { get; set; }
        [JsonProperty("abilityPower")]
        public int AbilityPower { get; set; }
        [JsonProperty("armor")]
        public int Armor { get; set; }
        [JsonProperty("armorPen")]
        public int ArmorPen { get; set; }
        [JsonProperty("armorPenPercent")]
        public int ArmorPenPercent { get; set; }
        [JsonProperty("attackDamage")]
        public int AttackDamage { get; set; }
        [JsonProperty("attackSpeed")]
        public int AttackSpeed { get; set; }
        [JsonProperty("bonusArmorPenPercent")]
        public int BonusArmorPenPercent { get; set; }
        [JsonProperty("bonusMagicPenPercent")]
        public int BonusMagicPenPercent { get; set; }
        [JsonProperty("ccReduction")]
        public int CcReduction { get; set; }
        [JsonProperty("cooldownReduction")]
        public int CooldownReduction { get; set; }
        [JsonProperty("health")]
        public int Health { get; set; }
        [JsonProperty("healthMax")]
        public int HealthMax { get; set; }
        [JsonProperty("healthRegen")]
        public int HealthRegen { get; set; }
        [JsonProperty("lifesteal")]
        public int Lifesteal { get; set; }
        [JsonProperty("magicPen")]
        public int MagicPen { get; set; }
        [JsonProperty("magicPenPercent")]
        public int MagicPenPercent { get; set; }
        [JsonProperty("magicResist")]
        public int MagicResist { get; set; }
        [JsonProperty("movementSpeed")]
        public int MovementSpeed { get; set; }
        [JsonProperty("omnivamp")]
        public int? Omnivamp { get; set; }
        [JsonProperty("physicalVamp")]
        public int? PhysicalVamp { get; set; }
        [JsonProperty("power")]
        public int Power { get; set; }
        [JsonProperty("powerMax")]
        public int PowerMax { get; set; }
        [JsonProperty("powerRegen")]
        public int PowerRegen { get; set; }
        [JsonProperty("spellVamp")]
        public int SpellVamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameParticipantFrameChampionStats("
                + "AbilityHaste: " + AbilityHaste + ", "
                + "AbilityPower: " + AbilityPower + ", "
                + "Armor: " + Armor + ", "
                + "ArmorPen: " + ArmorPen + ", "
                + "ArmorPenPercent: " + ArmorPenPercent + ", "
                + "AttackDamage: " + AttackDamage + ", "
                + "AttackSpeed: " + AttackSpeed + ", "
                + "BonusArmorPenPercent: " + BonusArmorPenPercent + ", "
                + "BonusMagicPenPercent: " + BonusMagicPenPercent + ", "
                + "CcReduction: " + CcReduction + ", "
                + "CooldownReduction: " + CooldownReduction + ", "
                + "Health: " + Health + ", "
                + "HealthMax: " + HealthMax + ", "
                + "HealthRegen: " + HealthRegen + ", "
                + "Lifesteal: " + Lifesteal + ", "
                + "MagicPen: " + MagicPen + ", "
                + "MagicPenPercent: " + MagicPenPercent + ", "
                + "MagicResist: " + MagicResist + ", "
                + "MovementSpeed: " + MovementSpeed + ", "
                + "Omnivamp: " + Omnivamp + ", "
                + "PhysicalVamp: " + PhysicalVamp + ", "
                + "Power: " + Power + ", "
                + "PowerMax: " + PowerMax + ", "
                + "PowerRegen: " + PowerRegen + ", "
                + "SpellVamp: " + SpellVamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameParticipantFrameDamageStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameParticipantFrameDamageStats
    {

#nullable disable
        public MatchTimelineInfoFrameParticipantFrameDamageStats() {}
#nullable restore

        [JsonProperty("magicDamageDone")]
        public int MagicDamageDone { get; set; }
        [JsonProperty("magicDamageDoneToChampions")]
        public int MagicDamageDoneToChampions { get; set; }
        [JsonProperty("magicDamageTaken")]
        public int MagicDamageTaken { get; set; }
        [JsonProperty("physicalDamageDone")]
        public int PhysicalDamageDone { get; set; }
        [JsonProperty("physicalDamageDoneToChampions")]
        public int PhysicalDamageDoneToChampions { get; set; }
        [JsonProperty("physicalDamageTaken")]
        public int PhysicalDamageTaken { get; set; }
        [JsonProperty("totalDamageDone")]
        public int TotalDamageDone { get; set; }
        [JsonProperty("totalDamageDoneToChampions")]
        public int TotalDamageDoneToChampions { get; set; }
        [JsonProperty("totalDamageTaken")]
        public int TotalDamageTaken { get; set; }
        [JsonProperty("trueDamageDone")]
        public int TrueDamageDone { get; set; }
        [JsonProperty("trueDamageDoneToChampions")]
        public int TrueDamageDoneToChampions { get; set; }
        [JsonProperty("trueDamageTaken")]
        public int TrueDamageTaken { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameParticipantFrameDamageStats("
                + "MagicDamageDone: " + MagicDamageDone + ", "
                + "MagicDamageDoneToChampions: " + MagicDamageDoneToChampions + ", "
                + "MagicDamageTaken: " + MagicDamageTaken + ", "
                + "PhysicalDamageDone: " + PhysicalDamageDone + ", "
                + "PhysicalDamageDoneToChampions: " + PhysicalDamageDoneToChampions + ", "
                + "PhysicalDamageTaken: " + PhysicalDamageTaken + ", "
                + "TotalDamageDone: " + TotalDamageDone + ", "
                + "TotalDamageDoneToChampions: " + TotalDamageDoneToChampions + ", "
                + "TotalDamageTaken: " + TotalDamageTaken + ", "
                + "TrueDamageDone: " + TrueDamageDone + ", "
                + "TrueDamageDoneToChampions: " + TrueDamageDoneToChampions + ", "
                + "TrueDamageTaken: " + TrueDamageTaken + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelinePosition data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelinePosition
    {

#nullable disable
        public MatchTimelinePosition() {}
#nullable restore

        [JsonProperty("x")]
        public int X { get; set; }
        [JsonProperty("y")]
        public int Y { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelinePosition("
                + "X: " + X + ", "
                + "Y: " + Y + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameParticipantFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameParticipantFrame
    {

#nullable disable
        public MatchTimelineInfoFrameParticipantFrame() {}
#nullable restore

        [JsonProperty("championStats")]
        public MatchTimelineInfoFrameParticipantFrameChampionStats ChampionStats { get; set; }
        [JsonProperty("currentGold")]
        public int CurrentGold { get; set; }
        [JsonProperty("damageStats")]
        public MatchTimelineInfoFrameParticipantFrameDamageStats DamageStats { get; set; }
        [JsonProperty("goldPerSecond")]
        public int GoldPerSecond { get; set; }
        [JsonProperty("jungleMinionsKilled")]
        public int JungleMinionsKilled { get; set; }
        [JsonProperty("level")]
        public int Level { get; set; }
        [JsonProperty("minionsKilled")]
        public int MinionsKilled { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("position")]
        public MatchTimelinePosition Position { get; set; }
        [JsonProperty("timeEnemySpentControlled")]
        public int TimeEnemySpentControlled { get; set; }
        [JsonProperty("totalGold")]
        public int TotalGold { get; set; }
        [JsonProperty("xp")]
        public int Xp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameParticipantFrame("
                + "ChampionStats: " + ChampionStats + ", "
                + "CurrentGold: " + CurrentGold + ", "
                + "DamageStats: " + DamageStats + ", "
                + "GoldPerSecond: " + GoldPerSecond + ", "
                + "JungleMinionsKilled: " + JungleMinionsKilled + ", "
                + "Level: " + Level + ", "
                + "MinionsKilled: " + MinionsKilled + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "Position: " + Position + ", "
                + "TimeEnemySpentControlled: " + TimeEnemySpentControlled + ", "
                + "TotalGold: " + TotalGold + ", "
                + "Xp: " + Xp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameParticipantFrames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameParticipantFrames
    {

#nullable disable
        public MatchTimelineInfoFrameParticipantFrames() {}
#nullable restore

        [JsonProperty("1")]
        public MatchTimelineInfoFrameParticipantFrame X1 { get; set; }
        [JsonProperty("10")]
        public MatchTimelineInfoFrameParticipantFrame X10 { get; set; }
        [JsonProperty("2")]
        public MatchTimelineInfoFrameParticipantFrame X2 { get; set; }
        [JsonProperty("3")]
        public MatchTimelineInfoFrameParticipantFrame X3 { get; set; }
        [JsonProperty("4")]
        public MatchTimelineInfoFrameParticipantFrame X4 { get; set; }
        [JsonProperty("5")]
        public MatchTimelineInfoFrameParticipantFrame X5 { get; set; }
        [JsonProperty("6")]
        public MatchTimelineInfoFrameParticipantFrame X6 { get; set; }
        [JsonProperty("7")]
        public MatchTimelineInfoFrameParticipantFrame X7 { get; set; }
        [JsonProperty("8")]
        public MatchTimelineInfoFrameParticipantFrame X8 { get; set; }
        [JsonProperty("9")]
        public MatchTimelineInfoFrameParticipantFrame X9 { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameParticipantFrames("
                + "X1: " + X1 + ", "
                + "X2: " + X2 + ", "
                + "X3: " + X3 + ", "
                + "X4: " + X4 + ", "
                + "X5: " + X5 + ", "
                + "X6: " + X6 + ", "
                + "X7: " + X7 + ", "
                + "X8: " + X8 + ", "
                + "X9: " + X9 + ", "
                + "X10: " + X10 + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrame
    {

#nullable disable
        public MatchTimelineInfoFrame() {}
#nullable restore

        [JsonProperty("events")]
        public MatchTimelineInfoFrameEvent[] Events { get; set; }
        [JsonProperty("participantFrames")]
        public MatchTimelineInfoFrameParticipantFrames ParticipantFrames { get; set; }
        [JsonProperty("timestamp")]
        public int Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrame("
                + "Events: " + Events + ", "
                + "ParticipantFrames: " + ParticipantFrames + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoFrameEventVictimDamageDealt data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoFrameEventVictimDamageDealt
    {

#nullable disable
        public MatchTimelineInfoFrameEventVictimDamageDealt() {}
#nullable restore

        [JsonProperty("basic")]
        public bool Basic { get; set; }
        [JsonProperty("magicDamage")]
        public int MagicDamage { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("physicalDamage")]
        public int PhysicalDamage { get; set; }
        [JsonProperty("spellName")]
        public string SpellName { get; set; }
        [JsonProperty("spellSlot")]
        public int SpellSlot { get; set; }
        [JsonProperty("trueDamage")]
        public int TrueDamage { get; set; }
        [JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoFrameEventVictimDamageDealt("
                + "Basic: " + Basic + ", "
                + "MagicDamage: " + MagicDamage + ", "
                + "Name: " + Name + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "PhysicalDamage: " + PhysicalDamage + ", "
                + "SpellName: " + SpellName + ", "
                + "SpellSlot: " + SpellSlot + ", "
                + "TrueDamage: " + TrueDamage + ", "
                + "Type: " + Type + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfoParticipant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfoParticipant
    {

#nullable disable
        public MatchTimelineInfoParticipant() {}
#nullable restore

        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfoParticipant("
                + "ParticipantId: " + ParticipantId + ", "
                + "Puuid: " + Puuid + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

namespace Camille.RiotGames.MatchV5
{
    /// <summary>
    /// MatchTimelineInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimelineInfo
    {

#nullable disable
        public MatchTimelineInfo() {}
#nullable restore

        [JsonProperty("frameInterval")]
        public int FrameInterval { get; set; }
        [JsonProperty("frames")]
        public MatchTimelineInfoFrame[] Frames { get; set; }
        [JsonProperty("gameId")]
        public long? GameId { get; set; }
        [JsonProperty("participants")]
        public MatchTimelineInfoParticipant[]? Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles")]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimelineInfo("
                + "FrameInterval: " + FrameInterval + ", "
                + "Frames: " + Frames + ", "
                + "GameId: " + GameId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}


