﻿
// This file is automatically generated.
// Do not directly edit.
// Generated on 2021-05-20T20:52:44.779Z

using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Camille.Core;
using Camille.Enums;
using Camille.RiotGames.Enums;

#pragma warning disable IDE0017 // Simplify object initialization
#pragma warning disable IDE0028 // Simplify collection initialization

namespace Camille.RiotGames
{
    /// <summary>
    /// AccountV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#account-v1">https://developer.riotgames.com/api-methods/#account-v1</a>
    /// </summary>
    public class AccountV1Endpoints : Endpoints
    {
        internal AccountV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get account by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid">https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public AccountV1.Account GetByPuuid(RegionalRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            return GetByPuuidAsync(route, puuid, cancellationToken).Result;
        }

        /// <summary>
        /// Get account by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid">https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<AccountV1.Account> GetByPuuidAsync(RegionalRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riot/account/v1/accounts/by-puuid/{puuid}");
            return @base.Send<AccountV1.Account>(route.ToString(), "account-v1.getByPuuid", request, cancellationToken, false);
        }

        /// <summary>
        /// Get account by riot id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId">https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tagLine">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required, in path)</param>
        /// <param name="gameName">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public AccountV1.Account? GetByRiotId(RegionalRoute route, string gameName, string tagLine, CancellationToken? cancellationToken = null)
        {
            return GetByRiotIdAsync(route, gameName, tagLine, cancellationToken).Result;
        }

        /// <summary>
        /// Get account by riot id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId">https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tagLine">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required, in path)</param>
        /// <param name="gameName">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<AccountV1.Account?> GetByRiotIdAsync(RegionalRoute route, string gameName, string tagLine, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}");
            return @base.Send<AccountV1.Account?>(route.ToString(), "account-v1.getByRiotId", request, cancellationToken, false);
        }

        /// <summary>
        /// Get account by access token
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public AccountV1.Account GetByAccessToken(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            return GetByAccessTokenAsync(route, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Get account by access token
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#account-v1/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<AccountV1.Account> GetByAccessTokenAsync(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riot/account/v1/accounts/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            return @base.Send<AccountV1.Account>(route.ToString(), "account-v1.getByAccessToken", request, cancellationToken, false);
        }

        /// <summary>
        /// Get active shard for a player
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard">https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="game">(required, in path)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public AccountV1.ActiveShard? GetActiveShard(RegionalRoute route, string game, string puuid, CancellationToken? cancellationToken = null)
        {
            return GetActiveShardAsync(route, game, puuid, cancellationToken).Result;
        }

        /// <summary>
        /// Get active shard for a player
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard">https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="game">(required, in path)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<AccountV1.ActiveShard?> GetActiveShardAsync(RegionalRoute route, string game, string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}");
            return @base.Send<AccountV1.ActiveShard?>(route.ToString(), "account-v1.getActiveShard", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ChampionMasteryV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4">https://developer.riotgames.com/api-methods/#champion-mastery-v4</a>
    /// </summary>
    public class ChampionMasteryV4Endpoints : Endpoints
    {
        internal ChampionMasteryV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionMasteryV4.ChampionMastery[] GetAllChampionMasteries(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetAllChampionMasteriesAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionMasteryV4.ChampionMastery[]> GetAllChampionMasteriesAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}");
            return @base.Send<ChampionMasteryV4.ChampionMastery[]>(route.ToString(), "champion-mastery-v4.getAllChampionMasteries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required, in path)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionMasteryV4.ChampionMastery? GetChampionMastery(PlatformRoute route, string encryptedSummonerId, Champion championId, CancellationToken? cancellationToken = null)
        {
            return GetChampionMasteryAsync(route, encryptedSummonerId, championId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required, in path)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionMasteryV4.ChampionMastery?> GetChampionMasteryAsync(PlatformRoute route, string encryptedSummonerId, Champion championId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{(int)championId}");
            return @base.Send<ChampionMasteryV4.ChampionMastery?>(route.ToString(), "champion-mastery-v4.getChampionMastery", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetChampionMasteryScore(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetChampionMasteryScoreAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> GetChampionMasteryScoreAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}");
            return @base.Send<int>(route.ToString(), "champion-mastery-v4.getChampionMasteryScore", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ChampionV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-v3">https://developer.riotgames.com/api-methods/#champion-v3</a>
    /// </summary>
    public class ChampionV3Endpoints : Endpoints
    {
        internal ChampionV3Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionV3.ChampionInfo GetChampionInfo(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetChampionInfoAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionV3.ChampionInfo> GetChampionInfoAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/platform/v3/champion-rotations");
            return @base.Send<ChampionV3.ChampionInfo>(route.ToString(), "champion-v3.getChampionInfo", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ClashV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#clash-v1">https://developer.riotgames.com/api-methods/#clash-v1</a>
    /// </summary>
    public class ClashV1Endpoints : Endpoints
    {
        internal ClashV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get players by summoner ID.
        /// <para /><h4>Implementation Notes</h4>
        /// This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner">https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ClashV1.Player[] GetPlayersBySummoner(PlatformRoute route, string summonerId, CancellationToken? cancellationToken = null)
        {
            return GetPlayersBySummonerAsync(route, summonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get players by summoner ID.
        /// <para /><h4>Implementation Notes</h4>
        /// This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner">https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ClashV1.Player[]> GetPlayersBySummonerAsync(PlatformRoute route, string summonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/clash/v1/players/by-summoner/{summonerId}");
            return @base.Send<ClashV1.Player[]>(route.ToString(), "clash-v1.getPlayersBySummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get team by ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="teamId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ClashV1.Team? GetTeamById(PlatformRoute route, string teamId, CancellationToken? cancellationToken = null)
        {
            return GetTeamByIdAsync(route, teamId, cancellationToken).Result;
        }

        /// <summary>
        /// Get team by ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="teamId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ClashV1.Team?> GetTeamByIdAsync(PlatformRoute route, string teamId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/clash/v1/teams/{teamId}");
            return @base.Send<ClashV1.Team?>(route.ToString(), "clash-v1.getTeamById", request, cancellationToken, false);
        }

        /// <summary>
        /// Get all active or upcoming tournaments.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ClashV1.Tournament[] GetTournaments(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetTournamentsAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get all active or upcoming tournaments.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ClashV1.Tournament[]> GetTournamentsAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/clash/v1/tournaments");
            return @base.Send<ClashV1.Tournament[]>(route.ToString(), "clash-v1.getTournaments", request, cancellationToken, false);
        }

        /// <summary>
        /// Get tournament by team ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="teamId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ClashV1.Tournament? GetTournamentByTeam(PlatformRoute route, string teamId, CancellationToken? cancellationToken = null)
        {
            return GetTournamentByTeamAsync(route, teamId, cancellationToken).Result;
        }

        /// <summary>
        /// Get tournament by team ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="teamId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ClashV1.Tournament?> GetTournamentByTeamAsync(PlatformRoute route, string teamId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/clash/v1/tournaments/by-team/{teamId}");
            return @base.Send<ClashV1.Tournament?>(route.ToString(), "clash-v1.getTournamentByTeam", request, cancellationToken, false);
        }

        /// <summary>
        /// Get tournament by ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ClashV1.Tournament? GetTournamentById(PlatformRoute route, int tournamentId, CancellationToken? cancellationToken = null)
        {
            return GetTournamentByIdAsync(route, tournamentId, cancellationToken).Result;
        }

        /// <summary>
        /// Get tournament by ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ClashV1.Tournament?> GetTournamentByIdAsync(PlatformRoute route, int tournamentId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/clash/v1/tournaments/{tournamentId}");
            return @base.Send<ClashV1.Tournament?>(route.ToString(), "clash-v1.getTournamentById", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LeagueExpV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-exp-v4">https://developer.riotgames.com/api-methods/#league-exp-v4</a>
    /// </summary>
    public class LeagueExpV4Endpoints : Endpoints
    {
        internal LeagueExpV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueExpV4.LeagueEntry[] GetLeagueEntries(PlatformRoute route, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(route, queue, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueExpV4.LeagueEntry[]> GetLeagueEntriesAsync(PlatformRoute route, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != page) queryParams.Add(new KeyValuePair<string?, string?>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league-exp/v4/entries/{queue}/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return @base.Send<LeagueExpV4.LeagueEntry[]>(route.ToString(), "league-exp-v4.getLeagueEntries", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LeagueV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-v4">https://developer.riotgames.com/api-methods/#league-v4</a>
    /// </summary>
    public class LeagueV4Endpoints : Endpoints
    {
        internal LeagueV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the challenger league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetChallengerLeague(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetChallengerLeagueAsync(route, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the challenger league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetChallengerLeagueAsync(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/challengerleagues/by-queue/{queue}");
            return @base.Send<LeagueV4.LeagueList>(route.ToString(), "league-v4.getChallengerLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueEntry[] GetLeagueEntriesForSummoner(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesForSummonerAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueEntry[]> GetLeagueEntriesForSummonerAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/entries/by-summoner/{encryptedSummonerId}");
            return @base.Send<LeagueV4.LeagueEntry[]>(route.ToString(), "league-v4.getLeagueEntriesForSummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueEntry[] GetLeagueEntries(PlatformRoute route, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(route, queue, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueEntry[]> GetLeagueEntriesAsync(PlatformRoute route, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != page) queryParams.Add(new KeyValuePair<string?, string?>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/entries/{queue}/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return @base.Send<LeagueV4.LeagueEntry[]>(route.ToString(), "league-v4.getLeagueEntries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetGrandmasterLeague(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetGrandmasterLeagueAsync(route, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetGrandmasterLeagueAsync(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/grandmasterleagues/by-queue/{queue}");
            return @base.Send<LeagueV4.LeagueList>(route.ToString(), "league-v4.getGrandmasterLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList? GetLeagueById(PlatformRoute route, string leagueId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueByIdAsync(route, leagueId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList?> GetLeagueByIdAsync(PlatformRoute route, string leagueId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/leagues/{leagueId}");
            return @base.Send<LeagueV4.LeagueList?>(route.ToString(), "league-v4.getLeagueById", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the master league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetMasterLeague(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetMasterLeagueAsync(route, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the master league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetMasterLeagueAsync(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/masterleagues/by-queue/{queue}");
            return @base.Send<LeagueV4.LeagueList>(route.ToString(), "league-v4.getMasterLeague", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LolStatusV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-status-v3">https://developer.riotgames.com/api-methods/#lol-status-v3</a>
    /// </summary>
    public class LolStatusV3Endpoints : Endpoints
    {
        internal LolStatusV3Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get League of Legends status for the given shard.
        /// <para /><h4>Rate Limit Notes</h4>
        /// Requests to this API are not counted against the application Rate Limits.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolStatusV3.ShardStatus GetShardData(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetShardDataAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get League of Legends status for the given shard.
        /// <para /><h4>Rate Limit Notes</h4>
        /// Requests to this API are not counted against the application Rate Limits.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolStatusV3.ShardStatus> GetShardDataAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/status/v3/shard-data");
            return @base.Send<LolStatusV3.ShardStatus>(route.ToString(), "lol-status-v3.getShardData", request, cancellationToken, true);
        }

    }
    /// <summary>
    /// LolStatusV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-status-v4">https://developer.riotgames.com/api-methods/#lol-status-v4</a>
    /// </summary>
    public class LolStatusV4Endpoints : Endpoints
    {
        internal LolStatusV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get League of Legends status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolStatusV4.PlatformData GetPlatformData(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetPlatformDataAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get League of Legends status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolStatusV4.PlatformData> GetPlatformDataAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/status/v4/platform-data");
            return @base.Send<LolStatusV4.PlatformData>(route.ToString(), "lol-status-v4.getPlatformData", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LorDeckV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1">https://developer.riotgames.com/api-methods/#lor-deck-v1</a>
    /// </summary>
    public class LorDeckV1Endpoints : Endpoints
    {
        internal LorDeckV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a list of the calling user's decks.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1/GET_getDecks">https://developer.riotgames.com/api-methods/#lor-deck-v1/GET_getDecks</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorDeckV1.Deck[] GetDecks(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            return GetDecksAsync(route, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Get a list of the calling user's decks.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1/GET_getDecks">https://developer.riotgames.com/api-methods/#lor-deck-v1/GET_getDecks</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorDeckV1.Deck[]> GetDecksAsync(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/deck/v1/decks/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            return @base.Send<LorDeckV1.Deck[]>(route.ToString(), "lor-deck-v1.getDecks", request, cancellationToken, false);
        }

        /// <summary>
        /// Create a new deck for the calling user.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1/POST_createDeck">https://developer.riotgames.com/api-methods/#lor-deck-v1/POST_createDeck</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string CreateDeck(RegionalRoute route, LorDeckV1.deck body, string Authorization, CancellationToken? cancellationToken = null)
        {
            return CreateDeckAsync(route, body, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Create a new deck for the calling user.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1/POST_createDeck">https://developer.riotgames.com/api-methods/#lor-deck-v1/POST_createDeck</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string> CreateDeckAsync(RegionalRoute route, LorDeckV1.deck body, string Authorization, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lor/deck/v1/decks/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<string>(route.ToString(), "lor-deck-v1.createDeck", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LorInventoryV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-inventory-v1">https://developer.riotgames.com/api-methods/#lor-inventory-v1</a>
    /// </summary>
    public class LorInventoryV1Endpoints : Endpoints
    {
        internal LorInventoryV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Return a list of cards owned by the calling user.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-inventory-v1/GET_getCards">https://developer.riotgames.com/api-methods/#lor-inventory-v1/GET_getCards</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorInventoryV1.Card[] GetCards(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            return GetCardsAsync(route, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Return a list of cards owned by the calling user.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-inventory-v1/GET_getCards">https://developer.riotgames.com/api-methods/#lor-inventory-v1/GET_getCards</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">(required, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorInventoryV1.Card[]> GetCardsAsync(RegionalRoute route, string Authorization, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/inventory/v1/cards/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            return @base.Send<LorInventoryV1.Card[]>(route.ToString(), "lor-inventory-v1.getCards", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LorMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-match-v1">https://developer.riotgames.com/api-methods/#lor-match-v1</a>
    /// </summary>
    public class LorMatchV1Endpoints : Endpoints
    {
        internal LorMatchV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a list of match ids by PUUID
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] GetMatchIdsByPUUID(RegionalRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByPUUIDAsync(route, puuid, cancellationToken).Result;
        }

        /// <summary>
        /// Get a list of match ids by PUUID
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> GetMatchIdsByPUUIDAsync(RegionalRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/match/v1/matches/by-puuid/{puuid}/ids");
            return @base.Send<string[]>(route.ToString(), "lor-match-v1.getMatchIdsByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match by id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorMatchV1.Match GetMatch(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorMatchV1.Match> GetMatchAsync(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/match/v1/matches/{matchId}");
            return @base.Send<LorMatchV1.Match>(route.ToString(), "lor-match-v1.getMatch", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LorRankedV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1">https://developer.riotgames.com/api-methods/#lor-ranked-v1</a>
    /// </summary>
    public class LorRankedV1Endpoints : Endpoints
    {
        internal LorRankedV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the players in Master tier.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorRankedV1.Leaderboard GetLeaderboards(RegionalRoute route, CancellationToken? cancellationToken = null)
        {
            return GetLeaderboardsAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get the players in Master tier.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorRankedV1.Leaderboard> GetLeaderboardsAsync(RegionalRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/ranked/v1/leaderboards");
            return @base.Send<LorRankedV1.Leaderboard>(route.ToString(), "lor-ranked-v1.getLeaderboards", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LorStatusV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-status-v1">https://developer.riotgames.com/api-methods/#lor-status-v1</a>
    /// </summary>
    public class LorStatusV1Endpoints : Endpoints
    {
        internal LorStatusV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get Legends of Runeterra status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorStatusV1.PlatformData GetPlatformData(RegionalRoute route, CancellationToken? cancellationToken = null)
        {
            return GetPlatformDataAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get Legends of Runeterra status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorStatusV1.PlatformData> GetPlatformDataAsync(RegionalRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/status/v1/platform-data");
            return @base.Send<LorStatusV1.PlatformData>(route.ToString(), "lor-status-v1.getPlatformData", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// MatchV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#match-v4">https://developer.riotgames.com/api-methods/#match-v4</a>
    /// </summary>
    public class MatchV4Endpoints : Endpoints
    {
        internal MatchV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get match IDs by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public long[] GetMatchIdsByTournamentCode(PlatformRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByTournamentCodeAsync(route, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Get match IDs by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<long[]> GetMatchIdsByTournamentCodeAsync(PlatformRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids");
            return @base.Send<long[]>(route.ToString(), "match-v4.getMatchIdsByTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match by match ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Match? GetMatch(PlatformRoute route, long matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by match ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Match?> GetMatchAsync(PlatformRoute route, long matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/{matchId}");
            return @base.Send<MatchV4.Match?>(route.ToString(), "match-v4.getMatch", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match by match ID and tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required, in path)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Match GetMatchByTournamentCode(PlatformRoute route, long matchId, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetMatchByTournamentCodeAsync(route, matchId, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by match ID and tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required, in path)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Match> GetMatchByTournamentCodeAsync(PlatformRoute route, long matchId, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}");
            return @base.Send<MatchV4.Match>(route.ToString(), "match-v4.getMatchByTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
        /// <para /><h4>Implementation Notes</h4>
        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.
        /// 
        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
        /// 
        /// If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">The account ID. (required, in path)</param>
        /// <param name="champion">Set of champion IDs for filtering the matchlist. (optional, in query)</param>
        /// <param name="queue">Set of queue IDs for filtering the matchlist. (optional, in query)</param>
        /// <param name="season">[DEPRECATED] This field should not be considered reliable for the purposes of filtering matches by season. (optional, in query)</param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Matchlist? GetMatchlist(PlatformRoute route, string encryptedAccountId, long? beginTime = null, int? beginIndex = null, Champion[]? champion = null, long? endTime = null, int? endIndex = null, Queue[]? queue = null, Season[]? season = null, CancellationToken? cancellationToken = null)
        {
            return GetMatchlistAsync(route, encryptedAccountId, beginTime, beginIndex, champion, endTime, endIndex, queue, season, cancellationToken).Result;
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.
        /// <para /><h4>Implementation Notes</h4>
        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.
        /// 
        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.
        /// 
        /// If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">The account ID. (required, in path)</param>
        /// <param name="champion">Set of champion IDs for filtering the matchlist. (optional, in query)</param>
        /// <param name="queue">Set of queue IDs for filtering the matchlist. (optional, in query)</param>
        /// <param name="season">[DEPRECATED] This field should not be considered reliable for the purposes of filtering matches by season. (optional, in query)</param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Matchlist?> GetMatchlistAsync(PlatformRoute route, string encryptedAccountId, long? beginTime = null, int? beginIndex = null, Champion[]? champion = null, long? endTime = null, int? endIndex = null, Queue[]? queue = null, Season[]? season = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != beginTime) queryParams.Add(new KeyValuePair<string?, string?>(nameof(beginTime), beginTime.Value.ToString()));
            if (null != beginIndex) queryParams.Add(new KeyValuePair<string?, string?>(nameof(beginIndex), beginIndex.Value.ToString()));
            if (null != champion) queryParams.AddRange(champion.Select(w => new KeyValuePair<string?, string?>(nameof(champion), ((int) w).ToString())));
            if (null != endTime) queryParams.Add(new KeyValuePair<string?, string?>(nameof(endTime), endTime.Value.ToString()));
            if (null != endIndex) queryParams.Add(new KeyValuePair<string?, string?>(nameof(endIndex), endIndex.Value.ToString()));
            if (null != queue) queryParams.AddRange(queue.Select(w => new KeyValuePair<string?, string?>(nameof(queue), ((int) w).ToString())));
            if (null != season) queryParams.AddRange(season.Select(w => new KeyValuePair<string?, string?>(nameof(season), ((int) w).ToString())));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matchlists/by-account/{encryptedAccountId}?{content.ReadAsStringAsync().Result}");
            return @base.Send<MatchV4.Matchlist?>(route.ToString(), "match-v4.getMatchlist", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match timeline by match ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Not all matches have timeline data.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.MatchTimeline? GetMatchTimeline(PlatformRoute route, long matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchTimelineAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match timeline by match ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Not all matches have timeline data.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">The match ID. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.MatchTimeline?> GetMatchTimelineAsync(PlatformRoute route, long matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/timelines/by-match/{matchId}");
            return @base.Send<MatchV4.MatchTimeline?>(route.ToString(), "match-v4.getMatchTimeline", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// MatchV5 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#match-v5">https://developer.riotgames.com/api-methods/#match-v5</a>
    /// </summary>
    public class MatchV5Endpoints : Endpoints
    {
        internal MatchV5Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a list of match ids by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="start">Defaults to 0. Start index. (optional, in query)</param>
        /// <param name="count">Defaults to 20. Valid values: 0 to 100. Match id count. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] GetMatchIdsByPUUID(RegionalRoute route, string puuid, int? count = null, int? start = null, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByPUUIDAsync(route, puuid, count, start, cancellationToken).Result;
        }

        /// <summary>
        /// Get a list of match ids by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="start">Defaults to 0. Start index. (optional, in query)</param>
        /// <param name="count">Defaults to 20. Valid values: 0 to 100. Match id count. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> GetMatchIdsByPUUIDAsync(RegionalRoute route, string puuid, int? count = null, int? start = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != count) queryParams.Add(new KeyValuePair<string?, string?>(nameof(count), count.Value.ToString()));
            if (null != start) queryParams.Add(new KeyValuePair<string?, string?>(nameof(start), start.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v5/matches/by-puuid/{puuid}/ids?{content.ReadAsStringAsync().Result}");
            return @base.Send<string[]>(route.ToString(), "match-v5.getMatchIdsByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a match by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV5.Match GetMatch(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a match by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV5.Match> GetMatchAsync(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v5/matches/{matchId}");
            return @base.Send<MatchV5.Match>(route.ToString(), "match-v5.getMatch", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a match timeline by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline">https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV5.MatchTimeline GetTimeline(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetTimelineAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a match timeline by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline">https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV5.MatchTimeline> GetTimelineAsync(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v5/matches/{matchId}/timeline");
            return @base.Send<MatchV5.MatchTimeline>(route.ToString(), "match-v5.getTimeline", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// SpectatorV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#spectator-v4">https://developer.riotgames.com/api-methods/#spectator-v4</a>
    /// </summary>
    public class SpectatorV4Endpoints : Endpoints
    {
        internal SpectatorV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get current game information for the given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SpectatorV4.CurrentGameInfo? GetCurrentGameInfoBySummoner(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetCurrentGameInfoBySummonerAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get current game information for the given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SpectatorV4.CurrentGameInfo?> GetCurrentGameInfoBySummonerAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}");
            return @base.Send<SpectatorV4.CurrentGameInfo?>(route.ToString(), "spectator-v4.getCurrentGameInfoBySummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get list of featured games.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SpectatorV4.FeaturedGames GetFeaturedGames(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetFeaturedGamesAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get list of featured games.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SpectatorV4.FeaturedGames> GetFeaturedGamesAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/spectator/v4/featured-games");
            return @base.Send<SpectatorV4.FeaturedGames>(route.ToString(), "spectator-v4.getFeaturedGames", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// SummonerV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#summoner-v4">https://developer.riotgames.com/api-methods/#summoner-v4</a>
    /// </summary>
    public class SummonerV4Endpoints : Endpoints
    {
        internal SummonerV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetByAccountId(PlatformRoute route, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return GetByAccountIdAsync(route, encryptedAccountId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetByAccountIdAsync(PlatformRoute route, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-account/{encryptedAccountId}");
            return @base.Send<SummonerV4.Summoner>(route.ToString(), "summoner-v4.getByAccountId", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerName">Summoner Name (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner? GetBySummonerName(PlatformRoute route, string summonerName, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerNameAsync(route, summonerName, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerName">Summoner Name (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner?> GetBySummonerNameAsync(PlatformRoute route, string summonerName, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-name/{summonerName}");
            return @base.Send<SummonerV4.Summoner?>(route.ToString(), "summoner-v4.getBySummonerName", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetByPUUID(PlatformRoute route, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return GetByPUUIDAsync(route, encryptedPUUID, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetByPUUIDAsync(PlatformRoute route, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}");
            return @base.Send<SummonerV4.Summoner>(route.ToString(), "summoner-v4.getByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by access token.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">Bearer token (optional, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetByAccessToken(PlatformRoute route, string? Authorization = null, CancellationToken? cancellationToken = null)
        {
            return GetByAccessTokenAsync(route, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by access token.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">Bearer token (optional, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetByAccessTokenAsync(PlatformRoute route, string? Authorization = null, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            return @base.Send<SummonerV4.Summoner>(route.ToString(), "summoner-v4.getByAccessToken", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetBySummonerId(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerIdAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetBySummonerIdAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/{encryptedSummonerId}");
            return @base.Send<SummonerV4.Summoner>(route.ToString(), "summoner-v4.getBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftLeagueV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-league-v1">https://developer.riotgames.com/api-methods/#tft-league-v1</a>
    /// </summary>
    public class TftLeagueV1Endpoints : Endpoints
    {
        internal TftLeagueV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the challenger league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetChallengerLeague(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetChallengerLeagueAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get the challenger league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetChallengerLeagueAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/challenger");
            return @base.Send<TftLeagueV1.LeagueList>(route.ToString(), "tft-league-v1.getChallengerLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league entries for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueEntry[] GetLeagueEntriesForSummoner(PlatformRoute route, string summonerId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesForSummonerAsync(route, summonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league entries for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueEntry[]> GetLeagueEntriesForSummonerAsync(PlatformRoute route, string summonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/entries/by-summoner/{summonerId}");
            return @base.Send<TftLeagueV1.LeagueEntry[]>(route.ToString(), "tft-league-v1.getLeagueEntriesForSummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueEntry[] GetLeagueEntries(PlatformRoute route, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(route, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="division">(required, in path)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueEntry[]> GetLeagueEntriesAsync(PlatformRoute route, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != page) queryParams.Add(new KeyValuePair<string?, string?>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/entries/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return @base.Send<TftLeagueV1.LeagueEntry[]>(route.ToString(), "tft-league-v1.getLeagueEntries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the grandmaster league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetGrandmasterLeague(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetGrandmasterLeagueAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get the grandmaster league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetGrandmasterLeagueAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/grandmaster");
            return @base.Send<TftLeagueV1.LeagueList>(route.ToString(), "tft-league-v1.getGrandmasterLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList? GetLeagueById(PlatformRoute route, string leagueId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueByIdAsync(route, leagueId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList?> GetLeagueByIdAsync(PlatformRoute route, string leagueId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/leagues/{leagueId}");
            return @base.Send<TftLeagueV1.LeagueList?>(route.ToString(), "tft-league-v1.getLeagueById", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the master league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetMasterLeague(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetMasterLeagueAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get the master league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetMasterLeagueAsync(PlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/master");
            return @base.Send<TftLeagueV1.LeagueList>(route.ToString(), "tft-league-v1.getMasterLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the top rated ladder for given queue
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.TopRatedLadderEntry[] GetTopRatedLadder(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetTopRatedLadderAsync(route, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the top rated ladder for given queue
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.TopRatedLadderEntry[]> GetTopRatedLadderAsync(PlatformRoute route, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/rated-ladders/{queue}/top");
            return @base.Send<TftLeagueV1.TopRatedLadderEntry[]>(route.ToString(), "tft-league-v1.getTopRatedLadder", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-match-v1">https://developer.riotgames.com/api-methods/#tft-match-v1</a>
    /// </summary>
    public class TftMatchV1Endpoints : Endpoints
    {
        internal TftMatchV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a list of match ids by PUUID
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="count">Defaults to 20. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] GetMatchIdsByPUUID(RegionalRoute route, string puuid, int? count = null, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByPUUIDAsync(route, puuid, count, cancellationToken).Result;
        }

        /// <summary>
        /// Get a list of match ids by PUUID
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="count">Defaults to 20. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> GetMatchIdsByPUUIDAsync(RegionalRoute route, string puuid, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != count) queryParams.Add(new KeyValuePair<string?, string?>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/tft/match/v1/matches/by-puuid/{puuid}/ids?{content.ReadAsStringAsync().Result}");
            return @base.Send<string[]>(route.ToString(), "tft-match-v1.getMatchIdsByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a match by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftMatchV1.Match? GetMatch(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a match by match id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftMatchV1.Match?> GetMatchAsync(RegionalRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/match/v1/matches/{matchId}");
            return @base.Send<TftMatchV1.Match?>(route.ToString(), "tft-match-v1.getMatch", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftSummonerV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1">https://developer.riotgames.com/api-methods/#tft-summoner-v1</a>
    /// </summary>
    public class TftSummonerV1Endpoints : Endpoints
    {
        internal TftSummonerV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetByAccountId(PlatformRoute route, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return GetByAccountIdAsync(route, encryptedAccountId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedAccountId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetByAccountIdAsync(PlatformRoute route, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-account/{encryptedAccountId}");
            return @base.Send<TftSummonerV1.Summoner>(route.ToString(), "tft-summoner-v1.getByAccountId", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerName">Summoner Name (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner? GetBySummonerName(PlatformRoute route, string summonerName, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerNameAsync(route, summonerName, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="summonerName">Summoner Name (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner?> GetBySummonerNameAsync(PlatformRoute route, string summonerName, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-name/{summonerName}");
            return @base.Send<TftSummonerV1.Summoner?>(route.ToString(), "tft-summoner-v1.getBySummonerName", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetByPUUID(PlatformRoute route, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return GetByPUUIDAsync(route, encryptedPUUID, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetByPUUIDAsync(PlatformRoute route, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}");
            return @base.Send<TftSummonerV1.Summoner>(route.ToString(), "tft-summoner-v1.getByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by access token.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">Bearer token. (optional, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetByAccessToken(PlatformRoute route, string? Authorization = null, CancellationToken? cancellationToken = null)
        {
            return GetByAccessTokenAsync(route, Authorization, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by access token.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccessToken">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccessToken</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="Authorization">Bearer token. (optional, in header)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetByAccessTokenAsync(PlatformRoute route, string? Authorization = null, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/me");
            request.Headers.Add(nameof(Authorization), Authorization);
            return @base.Send<TftSummonerV1.Summoner>(route.ToString(), "tft-summoner-v1.getByAccessToken", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetBySummonerId(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerIdAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetBySummonerIdAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/{encryptedSummonerId}");
            return @base.Send<TftSummonerV1.Summoner>(route.ToString(), "tft-summoner-v1.getBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ThirdPartyCodeV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4">https://developer.riotgames.com/api-methods/#third-party-code-v4</a>
    /// </summary>
    public class ThirdPartyCodeV4Endpoints : Endpoints
    {
        internal ThirdPartyCodeV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get third party code for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId">https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string GetThirdPartyCodeBySummonerId(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetThirdPartyCodeBySummonerIdAsync(route, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get third party code for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId">https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="encryptedSummonerId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string> GetThirdPartyCodeBySummonerIdAsync(PlatformRoute route, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}");
            return @base.Send<string>(route.ToString(), "third-party-code-v4.getThirdPartyCodeBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TournamentStubV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4">https://developer.riotgames.com/api-methods/#tournament-stub-v4</a>
    /// </summary>
    public class TournamentStubV4Endpoints : Endpoints
    {
        internal TournamentStubV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Create a mock tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional, in query)</param>
        /// <param name="tournamentId">The tournament ID (required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] CreateTournamentCode(RegionalRoute route, TournamentStubV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            return CreateTournamentCodeAsync(route, body, tournamentId, count, cancellationToken).Result;
        }

        /// <summary>
        /// Create a mock tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional, in query)</param>
        /// <param name="tournamentId">The tournament ID (required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> CreateTournamentCodeAsync(RegionalRoute route, TournamentStubV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.Add(new KeyValuePair<string?, string?>(nameof(tournamentId), tournamentId.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string?, string?>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/codes?{content.ReadAsStringAsync().Result}");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<string[]>(route.ToString(), "tournament-stub-v4.createTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentStubV4.LobbyEventWrapper GetLobbyEventsByCode(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetLobbyEventsByCodeAsync(route, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentStubV4.LobbyEventWrapper> GetLobbyEventsByCodeAsync(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}");
            return @base.Send<TournamentStubV4.LobbyEventWrapper>(route.ToString(), "tournament-stub-v4.getLobbyEventsByCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a mock tournament provider and returns its ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterProviderData(RegionalRoute route, TournamentStubV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterProviderDataAsync(route, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a mock tournament provider and returns its ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterProviderDataAsync(RegionalRoute route, TournamentStubV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/providers");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<int>(route.ToString(), "tournament-stub-v4.registerProviderData", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a mock tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterTournament(RegionalRoute route, TournamentStubV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterTournamentAsync(route, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a mock tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterTournamentAsync(RegionalRoute route, TournamentStubV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/tournaments");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<int>(route.ToString(), "tournament-stub-v4.registerTournament", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TournamentV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-v4">https://developer.riotgames.com/api-methods/#tournament-v4</a>
    /// </summary>
    public class TournamentV4Endpoints : Endpoints
    {
        internal TournamentV4Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Create a tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional, in query)</param>
        /// <param name="tournamentId">The tournament ID (required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] CreateTournamentCode(RegionalRoute route, TournamentV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            return CreateTournamentCodeAsync(route, body, tournamentId, count, cancellationToken).Result;
        }

        /// <summary>
        /// Create a tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional, in query)</param>
        /// <param name="tournamentId">The tournament ID (required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> CreateTournamentCodeAsync(RegionalRoute route, TournamentV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.Add(new KeyValuePair<string?, string?>(nameof(tournamentId), tournamentId.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string?, string?>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/codes?{content.ReadAsStringAsync().Result}");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<string[]>(route.ToString(), "tournament-v4.createTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code string. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentV4.TournamentCode GetTournamentCode(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetTournamentCodeAsync(route, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code string. (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentV4.TournamentCode> GetTournamentCodeAsync(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament/v4/codes/{tournamentCode}");
            return @base.Send<TournamentV4.TournamentCode>(route.ToString(), "tournament-v4.getTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Update the pick type, map, spectator type, or allowed summoners for a code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code to update (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void UpdateCode(RegionalRoute route, TournamentV4.TournamentCodeUpdateParameters body, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            UpdateCodeAsync(route, body, tournamentCode, cancellationToken).Wait();
        }

        /// <summary>
        /// Update the pick type, map, spectator type, or allowed summoners for a code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The tournament code to update (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task UpdateCodeAsync(RegionalRoute route, TournamentV4.TournamentCodeUpdateParameters body, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"/lol/tournament/v4/codes/{tournamentCode}");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send(route.ToString(), "tournament-v4.updateCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentV4.LobbyEventWrapper GetLobbyEventsByCode(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetLobbyEventsByCodeAsync(route, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentV4.LobbyEventWrapper> GetLobbyEventsByCodeAsync(RegionalRoute route, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament/v4/lobby-events/by-code/{tournamentCode}");
            return @base.Send<TournamentV4.LobbyEventWrapper>(route.ToString(), "tournament-v4.getLobbyEventsByCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a tournament provider and returns its ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterProviderData(RegionalRoute route, TournamentV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterProviderDataAsync(route, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a tournament provider and returns its ID.
        /// <para /><h4>Implementation Notes</h4>
        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterProviderDataAsync(RegionalRoute route, TournamentV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/providers");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<int>(route.ToString(), "tournament-v4.registerProviderData", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterTournament(RegionalRoute route, TournamentV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterTournamentAsync(route, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterTournamentAsync(RegionalRoute route, TournamentV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/tournaments");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<int>(route.ToString(), "tournament-v4.registerTournament", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ValContentV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-content-v1">https://developer.riotgames.com/api-methods/#val-content-v1</a>
    /// </summary>
    public class ValContentV1Endpoints : Endpoints
    {
        internal ValContentV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get content optionally filtered by locale
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent">https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="locale">(optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValContentV1.Content GetContent(ValPlatformRoute route, string? locale = null, CancellationToken? cancellationToken = null)
        {
            return GetContentAsync(route, locale, cancellationToken).Result;
        }

        /// <summary>
        /// Get content optionally filtered by locale
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent">https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="locale">(optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValContentV1.Content> GetContentAsync(ValPlatformRoute route, string? locale = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != locale) queryParams.Add(new KeyValuePair<string?, string?>(nameof(locale), locale));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/val/content/v1/contents?{content.ReadAsStringAsync().Result}");
            return @base.Send<ValContentV1.Content>(route.ToString(), "val-content-v1.getContent", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ValMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-match-v1">https://developer.riotgames.com/api-methods/#val-match-v1</a>
    /// </summary>
    public class ValMatchV1Endpoints : Endpoints
    {
        internal ValMatchV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get match by id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValMatchV1.Match? GetMatch(ValPlatformRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(route, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by id
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="matchId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValMatchV1.Match?> GetMatchAsync(ValPlatformRoute route, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/val/match/v1/matches/{matchId}");
            return @base.Send<ValMatchV1.Match?>(route.ToString(), "val-match-v1.getMatch", request, cancellationToken, false);
        }

        /// <summary>
        /// Get matchlist for games played by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValMatchV1.Matchlist GetMatchlist(ValPlatformRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            return GetMatchlistAsync(route, puuid, cancellationToken).Result;
        }

        /// <summary>
        /// Get matchlist for games played by puuid
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValMatchV1.Matchlist> GetMatchlistAsync(ValPlatformRoute route, string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/val/match/v1/matchlists/by-puuid/{puuid}");
            return @base.Send<ValMatchV1.Matchlist>(route.ToString(), "val-match-v1.getMatchlist", request, cancellationToken, false);
        }

        /// <summary>
        /// Get recent matches
        /// <para /><h4>Implementation Notes</h4>
        /// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValMatchV1.RecentMatches GetRecent(ValPlatformRoute route, string queue, CancellationToken? cancellationToken = null)
        {
            return GetRecentAsync(route, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get recent matches
        /// <para /><h4>Implementation Notes</h4>
        /// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="queue">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValMatchV1.RecentMatches> GetRecentAsync(ValPlatformRoute route, string queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/val/match/v1/recent-matches/by-queue/{queue}");
            return @base.Send<ValMatchV1.RecentMatches>(route.ToString(), "val-match-v1.getRecent", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ValRankedV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1">https://developer.riotgames.com/api-methods/#val-ranked-v1</a>
    /// </summary>
    public class ValRankedV1Endpoints : Endpoints
    {
        internal ValRankedV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get leaderboard for the competitive queue
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard">https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="actId">Act ids can be found using the val-content API. (required, in path)</param>
        /// <param name="size">Defaults to 200. Valid values: 1 to 200. (optional, in query)</param>
        /// <param name="startIndex">Defaults to 0. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValRankedV1.Leaderboard? GetLeaderboard(ValPlatformRoute route, string actId, int? size = null, int? startIndex = null, CancellationToken? cancellationToken = null)
        {
            return GetLeaderboardAsync(route, actId, size, startIndex, cancellationToken).Result;
        }

        /// <summary>
        /// Get leaderboard for the competitive queue
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard">https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="actId">Act ids can be found using the val-content API. (required, in path)</param>
        /// <param name="size">Defaults to 200. Valid values: 1 to 200. (optional, in query)</param>
        /// <param name="startIndex">Defaults to 0. (optional, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValRankedV1.Leaderboard?> GetLeaderboardAsync(ValPlatformRoute route, string actId, int? size = null, int? startIndex = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            if (null != size) queryParams.Add(new KeyValuePair<string?, string?>(nameof(size), size.Value.ToString()));
            if (null != startIndex) queryParams.Add(new KeyValuePair<string?, string?>(nameof(startIndex), startIndex.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/val/ranked/v1/leaderboards/by-act/{actId}?{content.ReadAsStringAsync().Result}");
            return @base.Send<ValRankedV1.Leaderboard?>(route.ToString(), "val-ranked-v1.getLeaderboard", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ValStatusV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-status-v1">https://developer.riotgames.com/api-methods/#val-status-v1</a>
    /// </summary>
    public class ValStatusV1Endpoints : Endpoints
    {
        internal ValStatusV1Endpoints(IRiotGamesApi @base) : base(@base)
        {}

        /// <summary>
        /// Get VALORANT status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValStatusV1.PlatformData GetPlatformData(ValPlatformRoute route, CancellationToken? cancellationToken = null)
        {
            return GetPlatformDataAsync(route, cancellationToken).Result;
        }

        /// <summary>
        /// Get VALORANT status for the given platform.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="route">Route to query. Corresponds to a Riot API subdomain for a region or platform. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ValStatusV1.PlatformData> GetPlatformDataAsync(ValPlatformRoute route, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/val/status/v1/platform-data");
            return @base.Send<ValStatusV1.PlatformData>(route.ToString(), "val-status-v1.getPlatformData", request, cancellationToken, false);
        }

    }
}

#pragma warning restore IDE0028 // Simplify collection initialization
#pragma warning restore IDE0017 // Simplify object initialization

