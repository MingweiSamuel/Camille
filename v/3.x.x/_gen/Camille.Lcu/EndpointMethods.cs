﻿
// This file is automatically generated.
// Do not directly edit.
// Generated on 2021-05-21T02:41:41.643Z

using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Camille.Core;
using Camille.Enums;


#pragma warning disable IDE0017 // Simplify object initialization
#pragma warning disable IDE0028 // Simplify collection initialization

namespace Camille.Lcu
{
    /// <summary>
    /// LolChampSelect endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#LolChampSelect">https://developer.riotgames.com/api-methods/#LolChampSelect</a>
    /// </summary>
    public class LolChampSelectEndpoints : Endpoints
    {
        internal LolChampSelectEndpoints(ILcuApi @base) : base(@base)
        {}

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectBannableChampions GetBannableChampionsV1(CancellationToken? cancellationToken = null)
        {
            return GetBannableChampionsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectBannableChampions> GetBannableChampionsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/bannable-champions");
            return @base.Send<LolChampSelect.ChampSelectBannableChampions>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostBattleTrainingLaunchV1(CancellationToken? cancellationToken = null)
        {
            return PostBattleTrainingLaunchV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostBattleTrainingLaunchV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/battle-training/launch");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetCurrentChampionV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentChampionV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> GetCurrentChampionV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/current-champion");
            return @base.Send<int>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectDisabledChampions GetDisabledChampionsV1(CancellationToken? cancellationToken = null)
        {
            return GetDisabledChampionsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectDisabledChampions> GetDisabledChampionsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/disabled-champions");
            return @base.Send<LolChampSelect.ChampSelectDisabledChampions>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectPickableChampions GetPickableChampionsV1(CancellationToken? cancellationToken = null)
        {
            return GetPickableChampionsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectPickableChampions> GetPickableChampionsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/pickable-champions");
            return @base.Send<LolChampSelect.ChampSelectPickableChampions>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectPickableSkins GetPickableSkinsV1(CancellationToken? cancellationToken = null)
        {
            return GetPickableSkinsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectPickableSkins> GetPickableSkinsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/pickable-skins");
            return @base.Send<LolChampSelect.ChampSelectPickableSkins>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostRetrieveLatestGameDtoV1(CancellationToken? cancellationToken = null)
        {
            return PostRetrieveLatestGameDtoV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostRetrieveLatestGameDtoV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/retrieve-latest-game-dto");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectSession GetSessionV1(CancellationToken? cancellationToken = null)
        {
            return GetSessionV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectSession> GetSessionV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/session");
            return @base.Send<LolChampSelect.ChampSelectSession>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PatchSessionActionsByIdV1(LolChampSelect.ChampSelectAction body, long id, CancellationToken? cancellationToken = null)
        {
            return PatchSessionActionsByIdV1Async(body, id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PatchSessionActionsByIdV1Async(LolChampSelect.ChampSelectAction body, long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethodPatch, $"/lol-champ-select/v1/session/actions/{id}");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionActionsByIdCompleteV1(long id, CancellationToken? cancellationToken = null)
        {
            return PostSessionActionsByIdCompleteV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionActionsByIdCompleteV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/actions/{id}/complete");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="championId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionBenchSwapByChampionIdV1(int championId, CancellationToken? cancellationToken = null)
        {
            return PostSessionBenchSwapByChampionIdV1Async(championId, cancellationToken).Result;
        }

        /// <param name="championId">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionBenchSwapByChampionIdV1Async(int championId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/bench/swap/{(int)championId}");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PatchSessionMySelectionV1(LolChampSelect.ChampSelectMySelection body, CancellationToken? cancellationToken = null)
        {
            return PatchSessionMySelectionV1Async(body, cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PatchSessionMySelectionV1Async(LolChampSelect.ChampSelectMySelection body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethodPatch, $"/lol-champ-select/v1/session/my-selection");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionMySelectionRerollV1(CancellationToken? cancellationToken = null)
        {
            return PostSessionMySelectionRerollV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionMySelectionRerollV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/my-selection/reroll");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionSimpleInventoryV1(CancellationToken? cancellationToken = null)
        {
            return PostSessionSimpleInventoryV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionSimpleInventoryV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/simple-inventory");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectTimer GetSessionTimerV1(CancellationToken? cancellationToken = null)
        {
            return GetSessionTimerV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectTimer> GetSessionTimerV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/session/timer");
            return @base.Send<LolChampSelect.ChampSelectTimer>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectTradeContract[] GetSessionTradesV1(CancellationToken? cancellationToken = null)
        {
            return GetSessionTradesV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectTradeContract[]> GetSessionTradesV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/session/trades");
            return @base.Send<LolChampSelect.ChampSelectTradeContract[]>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectTradeContract GetSessionTradesByIdV1(long id, CancellationToken? cancellationToken = null)
        {
            return GetSessionTradesByIdV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectTradeContract> GetSessionTradesByIdV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/session/trades/{id}");
            return @base.Send<LolChampSelect.ChampSelectTradeContract>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionTradesByIdAcceptV1(long id, CancellationToken? cancellationToken = null)
        {
            return PostSessionTradesByIdAcceptV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionTradesByIdAcceptV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/trades/{id}/accept");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionTradesByIdCancelV1(long id, CancellationToken? cancellationToken = null)
        {
            return PostSessionTradesByIdCancelV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionTradesByIdCancelV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/trades/{id}/cancel");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostSessionTradesByIdDeclineV1(long id, CancellationToken? cancellationToken = null)
        {
            return PostSessionTradesByIdDeclineV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostSessionTradesByIdDeclineV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/trades/{id}/decline");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.ChampSelectTradeContract PostSessionTradesByIdRequestV1(long id, CancellationToken? cancellationToken = null)
        {
            return PostSessionTradesByIdRequestV1Async(id, cancellationToken).Result;
        }

        /// <param name="id">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.ChampSelectTradeContract> PostSessionTradesByIdRequestV1Async(long id, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/session/trades/{id}/request");
            return @base.Send<LolChampSelect.ChampSelectTradeContract>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolChampSelect.TeamBoost GetTeamBoostV1(CancellationToken? cancellationToken = null)
        {
            return GetTeamBoostV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolChampSelect.TeamBoost> GetTeamBoostV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-champ-select/v1/team-boost");
            return @base.Send<LolChampSelect.TeamBoost>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostTeamBoostPurchaseV1(CancellationToken? cancellationToken = null)
        {
            return PostTeamBoostPurchaseV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostTeamBoostPurchaseV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-champ-select/v1/team-boost/purchase");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

    }
    /// <summary>
    /// LolLogin endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#LolLogin">https://developer.riotgames.com/api-methods/#LolLogin</a>
    /// </summary>
    public class LolLoginEndpoints : Endpoints
    {
        internal LolLoginEndpoints(ILcuApi @base) : base(@base)
        {}

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void DeleteSessionV1(CancellationToken? cancellationToken = null)
        {
            DeleteSessionV1Async(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task DeleteSessionV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, $"/lol-login/v1/session");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolLogin.LoginSession GetSessionV1(CancellationToken? cancellationToken = null)
        {
            return GetSessionV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolLogin.LoginSession> GetSessionV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-login/v1/session");
            return @base.Send<LolLogin.LoginSession>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolLogin.LoginSession PostSessionV1(LolLogin.UsernameAndPassword body, CancellationToken? cancellationToken = null)
        {
            return PostSessionV1Async(body, cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolLogin.LoginSession> PostSessionV1Async(LolLogin.UsernameAndPassword body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-login/v1/session");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<LolLogin.LoginSession>(request, cancellationToken);
        }

    }
    /// <summary>
    /// LolRanked endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#LolRanked">https://developer.riotgames.com/api-methods/#LolRanked</a>
    /// </summary>
    public class LolRankedEndpoints : Endpoints
    {
        internal LolRankedEndpoints(ILcuApi @base) : base(@base)
        {}

        /// <param name="queueType">(required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolRanked.LeagueLadderInfo GetApexLeaguesByQueueTypeByTierV1(QueueType queueType, Tier tier, CancellationToken? cancellationToken = null)
        {
            return GetApexLeaguesByQueueTypeByTierV1Async(queueType, tier, cancellationToken).Result;
        }

        /// <param name="queueType">(required, in path)</param>
        /// <param name="tier">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolRanked.LeagueLadderInfo> GetApexLeaguesByQueueTypeByTierV1Async(QueueType queueType, Tier tier, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v1/apex-leagues/{queueType}/{tier}");
            return @base.Send<LolRanked.LeagueLadderInfo>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolRanked.RankedStats GetCurrentRankedStatsV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentRankedStatsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolRanked.RankedStats> GetCurrentRankedStatsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v1/current-ranked-stats");
            return @base.Send<LolRanked.RankedStats>(request, cancellationToken);
        }

        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolRanked.LeagueLadderInfo[] GetLeagueLaddersByPuuidV1(string puuid, CancellationToken? cancellationToken = null)
        {
            return GetLeagueLaddersByPuuidV1Async(puuid, cancellationToken).Result;
        }

        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolRanked.LeagueLadderInfo[]> GetLeagueLaddersByPuuidV1Async(string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v1/league-ladders/{puuid}");
            return @base.Send<LolRanked.LeagueLadderInfo[]>(request, cancellationToken);
        }

        /// <param name="puuids">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, LolRanked.RankedStats> GetRankedStatsV1(string[] puuids, CancellationToken? cancellationToken = null)
        {
            return GetRankedStatsV1Async(puuids, cancellationToken).Result;
        }

        /// <param name="puuids">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, LolRanked.RankedStats>> GetRankedStatsV1Async(string[] puuids, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.AddRange(puuids.Select(w => new KeyValuePair<string?, string?>(nameof(puuids), w)));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v1/ranked-stats?{content.ReadAsStringAsync().Result}");
            return @base.Send<IDictionary<string, LolRanked.RankedStats>>(request, cancellationToken);
        }

        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolRanked.RankedStats GetRankedStatsByPuuidV1(string puuid, CancellationToken? cancellationToken = null)
        {
            return GetRankedStatsByPuuidV1Async(puuid, cancellationToken).Result;
        }

        /// <param name="puuid">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolRanked.RankedStats> GetRankedStatsByPuuidV1Async(string puuid, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v1/ranked-stats/{puuid}");
            return @base.Send<LolRanked.RankedStats>(request, cancellationToken);
        }

        /// <param name="summonerIds">(required, in query)</param>
        /// <param name="queueTypes">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolRanked.ParticipantTiers[] GetTiersV2(long[] summonerIds, QueueType[] queueTypes, CancellationToken? cancellationToken = null)
        {
            return GetTiersV2Async(summonerIds, queueTypes, cancellationToken).Result;
        }

        /// <param name="summonerIds">(required, in query)</param>
        /// <param name="queueTypes">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolRanked.ParticipantTiers[]> GetTiersV2Async(long[] summonerIds, QueueType[] queueTypes, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.AddRange(summonerIds.Select(w => new KeyValuePair<string?, string?>(nameof(summonerIds), w.ToString())));
            queryParams.AddRange(queueTypes.Select(w => new KeyValuePair<string?, string?>(nameof(queueTypes), ((int) w).ToString())));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol-ranked/v2/tiers?{content.ReadAsStringAsync().Result}");
            return @base.Send<LolRanked.ParticipantTiers[]>(request, cancellationToken);
        }

    }
    /// <summary>
    /// LolSummoner endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#LolSummoner">https://developer.riotgames.com/api-methods/#LolSummoner</a>
    /// </summary>
    public class LolSummonerEndpoints : Endpoints
    {
        internal LolSummonerEndpoints(ILcuApi @base) : base(@base)
        {}

        /// <param name="name">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool GetCheckNameAvailabilityNewSummonersByNameV1(string name, CancellationToken? cancellationToken = null)
        {
            return GetCheckNameAvailabilityNewSummonersByNameV1Async(name, cancellationToken).Result;
        }

        /// <param name="name">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<bool> GetCheckNameAvailabilityNewSummonersByNameV1Async(string name, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/check-name-availability-new-summoners/{name}");
            return @base.Send<bool>(request, cancellationToken);
        }

        /// <param name="name">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool GetCheckNameAvailabilityByNameV1(string name, CancellationToken? cancellationToken = null)
        {
            return GetCheckNameAvailabilityByNameV1Async(name, cancellationToken).Result;
        }

        /// <param name="name">(required, in path)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<bool> GetCheckNameAvailabilityByNameV1Async(string name, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/check-name-availability/{name}");
            return @base.Send<bool>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.Summoner GetCurrentSummonerV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentSummonerV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.Summoner> GetCurrentSummonerV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/current-summoner");
            return @base.Send<LolSummoner.Summoner>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.AutoFill GetCurrentSummonerAutofillV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentSummonerAutofillV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.AutoFill> GetCurrentSummonerAutofillV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/current-summoner/autofill");
            return @base.Send<LolSummoner.AutoFill>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.Summoner PutCurrentSummonerIconV1(LolSummoner.SummonerIcon body, CancellationToken? cancellationToken = null)
        {
            return PutCurrentSummonerIconV1Async(body, cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.Summoner> PutCurrentSummonerIconV1Async(LolSummoner.SummonerIcon body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"/lol-summoner/v1/current-summoner/icon");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<LolSummoner.Summoner>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.SummonerRerollPoints GetCurrentSummonerRerollPointsV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentSummonerRerollPointsV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.SummonerRerollPoints> GetCurrentSummonerRerollPointsV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/current-summoner/rerollPoints");
            return @base.Send<LolSummoner.SummonerRerollPoints>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> GetCurrentSummonerSummonerProfileV1(CancellationToken? cancellationToken = null)
        {
            return GetCurrentSummonerSummonerProfileV1Async(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> GetCurrentSummonerSummonerProfileV1Async(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/current-summoner/summoner-profile");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> PostCurrentSummonerSummonerProfileV1(LolSummoner.SummonerProfileUpdate body, CancellationToken? cancellationToken = null)
        {
            return PostCurrentSummonerSummonerProfileV1Async(body, cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> PostCurrentSummonerSummonerProfileV1Async(LolSummoner.SummonerProfileUpdate body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-summoner/v1/current-summoner/summoner-profile");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="puuid">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IDictionary<string, Dictionary<string, object>> GetSummonerProfileV1(string puuid, CancellationToken? cancellationToken = null)
        {
            return GetSummonerProfileV1Async(puuid, cancellationToken).Result;
        }

        /// <param name="puuid">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<IDictionary<string, Dictionary<string, object>>> GetSummonerProfileV1Async(string puuid, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.Add(new KeyValuePair<string?, string?>(nameof(puuid), puuid));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/summoner-profile?{content.ReadAsStringAsync().Result}");
            return @base.Send<IDictionary<string, Dictionary<string, object>>>(request, cancellationToken);
        }

        /// <param name="name">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.Summoner GetSummonersV1(string name, CancellationToken? cancellationToken = null)
        {
            return GetSummonersV1Async(name, cancellationToken).Result;
        }

        /// <param name="name">(required, in query)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.Summoner> GetSummonersV1Async(string name, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string?, string?>>();
            queryParams.Add(new KeyValuePair<string?, string?>(nameof(name), name));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol-summoner/v1/summoners?{content.ReadAsStringAsync().Result}");
            return @base.Send<LolSummoner.Summoner>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolSummoner.InternalSummoner PostSummonersV1(LolSummoner.SummonerRequestedName body, CancellationToken? cancellationToken = null)
        {
            return PostSummonersV1Async(body, cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolSummoner.InternalSummoner> PostSummonersV1Async(LolSummoner.SummonerRequestedName body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol-summoner/v1/summoners");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send<LolSummoner.InternalSummoner>(request, cancellationToken);
        }

    }
    /// <summary>
    /// RiotClient endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#RiotClient">https://developer.riotgames.com/api-methods/#RiotClient</a>
    /// </summary>
    public class RiotClientEndpoints : Endpoints
    {
        internal RiotClientEndpoints(ILcuApi @base) : base(@base)
        {}

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostKillAndRestartUx(CancellationToken? cancellationToken = null)
        {
            PostKillAndRestartUxAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostKillAndRestartUxAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/kill-and-restart-ux");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostKillUx(CancellationToken? cancellationToken = null)
        {
            PostKillUxAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostKillUxAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/kill-ux");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostLaunchUx(CancellationToken? cancellationToken = null)
        {
            PostLaunchUxAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostLaunchUxAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/launch-ux");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RiotClient.RegionLocale GetRegionLocale(CancellationToken? cancellationToken = null)
        {
            return GetRegionLocaleAsync(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<RiotClient.RegionLocale> GetRegionLocaleAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riotclient/region-locale");
            return @base.Send<RiotClient.RegionLocale>(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PutRegionLocale(RiotClient.RegionLocale body, CancellationToken? cancellationToken = null)
        {
            PutRegionLocaleAsync(body, cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PutRegionLocaleAsync(RiotClient.RegionLocale body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"/riotclient/region-locale");
            request.Content = new StringContent(JsonHandler.Serialize(body), Encoding.UTF8, "application/json");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostUnload(CancellationToken? cancellationToken = null)
        {
            PostUnloadAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostUnloadAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/unload");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostUxFlash(CancellationToken? cancellationToken = null)
        {
            PostUxFlashAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostUxFlashAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/ux-flash");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostUxMinimize(CancellationToken? cancellationToken = null)
        {
            PostUxMinimizeAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostUxMinimizeAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/ux-minimize");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PostUxShow(CancellationToken? cancellationToken = null)
        {
            PostUxShowAsync(cancellationToken).Wait();
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task PostUxShowAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/riotclient/ux-show");
            return @base.Send(request, cancellationToken);
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string GetUxState(CancellationToken? cancellationToken = null)
        {
            return GetUxStateAsync(cancellationToken).Result;
        }

        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string> GetUxStateAsync(CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/riotclient/ux-state");
            return @base.Send<string>(request, cancellationToken);
        }

    }
}

#pragma warning restore IDE0028 // Simplify collection initialization
#pragma warning restore IDE0017 // Simplify object initialization

