
// This file is automatically generated.
// Do not directly edit.
// Generated on 2022-07-31T03:42:08.316Z

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 917881d21fb7e0cfcaabf845e5c80b484e0b7462

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using MingweiSamuel.Camille.Enums;

namespace MingweiSamuel.Camille
{
    /// <summary>
    /// AccountV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#account-v1">https://developer.riotgames.com/api-methods/#account-v1</a>
    /// </summary>
    public class AccountV1Endpoints : Endpoints
    {
        internal AccountV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get account by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid">https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public AccountV1.Account? GetByPuuid(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<AccountV1.Account?>("account-v1.getByPuuid", $"/riot/account/v1/accounts/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get account by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid">https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<AccountV1.Account?> GetByPuuidAsync(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<AccountV1.Account?>("account-v1.getByPuuid", $"/riot/account/v1/accounts/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get account by riot id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId">https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tagLine">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required)</param>
        /// <param name="gameName">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public AccountV1.Account? GetByRiotId(Region region, string tagLine, string gameName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<AccountV1.Account?>("account-v1.getByRiotId", $"/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get account by riot id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId">https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tagLine">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required)</param>
        /// <param name="gameName">When querying for a player by their riot id, the gameName and tagLine query params are required. However not all accounts have a gameName and tagLine associated so these fields may not be included in the response. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<AccountV1.Account?> GetByRiotIdAsync(Region region, string tagLine, string gameName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<AccountV1.Account?>("account-v1.getByRiotId", $"/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get active shard for a player<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard">https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="game"> (required)</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public AccountV1.ActiveShard? GetActiveShard(Region region, string game, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<AccountV1.ActiveShard?>("account-v1.getActiveShard", $"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get active shard for a player<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard">https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="game"> (required)</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<AccountV1.ActiveShard?> GetActiveShardAsync(Region region, string game, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<AccountV1.ActiveShard?>("account-v1.getActiveShard", $"/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// ChampionMasteryV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4">https://developer.riotgames.com/api-methods/#champion-mastery-v4</a>
    /// </summary>
    public class ChampionMasteryV4Endpoints : Endpoints
    {
        internal ChampionMasteryV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ChampionMasteryV4.ChampionMastery[]? GetAllChampionMasteries(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ChampionMasteryV4.ChampionMastery[]?>("champion-mastery-v4.getAllChampionMasteries", $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ChampionMasteryV4.ChampionMastery[]?> GetAllChampionMasteriesAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ChampionMasteryV4.ChampionMastery[]?>("champion-mastery-v4.getAllChampionMasteries", $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ChampionMasteryV4.ChampionMastery? GetChampionMastery(Region region, long championId, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ChampionMasteryV4.ChampionMastery?>("champion-mastery-v4.getChampionMastery", $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ChampionMasteryV4.ChampionMastery?> GetChampionMasteryAsync(Region region, long championId, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ChampionMasteryV4.ChampionMastery?>("champion-mastery-v4.getChampionMastery", $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public int GetChampionMasteryScore(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<int>("champion-mastery-v4.getChampionMasteryScore", $"/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<int> GetChampionMasteryScoreAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<int>("champion-mastery-v4.getChampionMasteryScore", $"/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// ChampionV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-v3">https://developer.riotgames.com/api-methods/#champion-v3</a>
    /// </summary>
    public class ChampionV3Endpoints : Endpoints
    {
        internal ChampionV3Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ChampionV3.ChampionInfo? GetChampionInfo(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ChampionV3.ChampionInfo?>("champion-v3.getChampionInfo", $"/lol/platform/v3/champion-rotations",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ChampionV3.ChampionInfo?> GetChampionInfoAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ChampionV3.ChampionInfo?>("champion-v3.getChampionInfo", $"/lol/platform/v3/champion-rotations",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// ClashV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#clash-v1">https://developer.riotgames.com/api-methods/#clash-v1</a>
    /// </summary>
    public class ClashV1Endpoints : Endpoints
    {
        internal ClashV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get players by summoner ID.<para />
        /// ## Implementation Notes<para />
        /// This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner">https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ClashV1.Player[]? GetPlayersBySummoner(Region region, string summonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ClashV1.Player[]?>("clash-v1.getPlayersBySummoner", $"/lol/clash/v1/players/by-summoner/{summonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get players by summoner ID.<para />
        /// ## Implementation Notes<para />
        /// This endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner">https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ClashV1.Player[]?> GetPlayersBySummonerAsync(Region region, string summonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ClashV1.Player[]?>("clash-v1.getPlayersBySummoner", $"/lol/clash/v1/players/by-summoner/{summonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get team by ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="teamId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ClashV1.Team? GetTeamById(Region region, string teamId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ClashV1.Team?>("clash-v1.getTeamById", $"/lol/clash/v1/teams/{teamId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get team by ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="teamId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ClashV1.Team?> GetTeamByIdAsync(Region region, string teamId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ClashV1.Team?>("clash-v1.getTeamById", $"/lol/clash/v1/teams/{teamId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get all active or upcoming tournaments.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ClashV1.Tournament[]? GetTournaments(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ClashV1.Tournament[]?>("clash-v1.getTournaments", $"/lol/clash/v1/tournaments",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get all active or upcoming tournaments.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ClashV1.Tournament[]?> GetTournamentsAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ClashV1.Tournament[]?>("clash-v1.getTournaments", $"/lol/clash/v1/tournaments",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get tournament by team ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="teamId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ClashV1.Tournament? GetTournamentByTeam(Region region, string teamId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ClashV1.Tournament?>("clash-v1.getTournamentByTeam", $"/lol/clash/v1/tournaments/by-team/{teamId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get tournament by team ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="teamId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ClashV1.Tournament?> GetTournamentByTeamAsync(Region region, string teamId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ClashV1.Tournament?>("clash-v1.getTournamentByTeam", $"/lol/clash/v1/tournaments/by-team/{teamId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get tournament by ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ClashV1.Tournament? GetTournamentById(Region region, int tournamentId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ClashV1.Tournament?>("clash-v1.getTournamentById", $"/lol/clash/v1/tournaments/{tournamentId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get tournament by ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById">https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ClashV1.Tournament?> GetTournamentByIdAsync(Region region, int tournamentId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ClashV1.Tournament?>("clash-v1.getTournamentById", $"/lol/clash/v1/tournaments/{tournamentId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LeagueExpV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-exp-v4">https://developer.riotgames.com/api-methods/#league-exp-v4</a>
    /// </summary>
    public class LeagueExpV4Endpoints : Endpoints
    {
        internal LeagueExpV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="tier"> (required)</param>
        /// <param name="division"> (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueExpV4.LeagueEntry[]? GetLeagueEntries(Region region, string queue, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.Get<LeagueExpV4.LeagueEntry[]?>("league-exp-v4.getLeagueEntries", $"/lol/league-exp/v4/entries/{queue}/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="tier"> (required)</param>
        /// <param name="division"> (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueExpV4.LeagueEntry[]?> GetLeagueEntriesAsync(Region region, string queue, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.GetAsync<LeagueExpV4.LeagueEntry[]?>("league-exp-v4.getLeagueEntries", $"/lol/league-exp/v4/entries/{queue}/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

    }
    /// <summary>
    /// LeagueV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-v4">https://developer.riotgames.com/api-methods/#league-v4</a>
    /// </summary>
    public class LeagueV4Endpoints : Endpoints
    {
        internal LeagueV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get the challenger league for given queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueList? GetChallengerLeague(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LeagueV4.LeagueList?>("league-v4.getChallengerLeague", $"/lol/league/v4/challengerleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the challenger league for given queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueList?> GetChallengerLeagueAsync(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LeagueV4.LeagueList?>("league-v4.getChallengerLeague", $"/lol/league/v4/challengerleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueEntry[]? GetLeagueEntriesForSummoner(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LeagueV4.LeagueEntry[]?>("league-v4.getLeagueEntriesForSummoner", $"/lol/league/v4/entries/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueEntry[]?> GetLeagueEntriesForSummonerAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LeagueV4.LeagueEntry[]?>("league-v4.getLeagueEntriesForSummoner", $"/lol/league/v4/entries/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="division"> (required)</param>
        /// <param name="tier"> (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueEntry[]? GetLeagueEntries(Region region, string division, string tier, string queue, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.Get<LeagueV4.LeagueEntry[]?>("league-v4.getLeagueEntries", $"/lol/league/v4/entries/{queue}/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="division"> (required)</param>
        /// <param name="tier"> (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueEntry[]?> GetLeagueEntriesAsync(Region region, string division, string tier, string queue, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.GetAsync<LeagueV4.LeagueEntry[]?>("league-v4.getLeagueEntries", $"/lol/league/v4/entries/{queue}/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueList? GetGrandmasterLeague(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LeagueV4.LeagueList?>("league-v4.getGrandmasterLeague", $"/lol/league/v4/grandmasterleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueList?> GetGrandmasterLeagueAsync(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LeagueV4.LeagueList?>("league-v4.getGrandmasterLeague", $"/lol/league/v4/grandmasterleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueList? GetLeagueById(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LeagueV4.LeagueList?>("league-v4.getLeagueById", $"/lol/league/v4/leagues/{leagueId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueList?> GetLeagueByIdAsync(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LeagueV4.LeagueList?>("league-v4.getLeagueById", $"/lol/league/v4/leagues/{leagueId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the master league for given queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LeagueV4.LeagueList? GetMasterLeague(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LeagueV4.LeagueList?>("league-v4.getMasterLeague", $"/lol/league/v4/masterleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the master league for given queue.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LeagueV4.LeagueList?> GetMasterLeagueAsync(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LeagueV4.LeagueList?>("league-v4.getMasterLeague", $"/lol/league/v4/masterleagues/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LolChallengesV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1">https://developer.riotgames.com/api-methods/#lol-challenges-v1</a>
    /// </summary>
    public class LolChallengesV1Endpoints : Endpoints
    {
        internal LolChallengesV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// List of all basic challenge configuration information (includes all translations for names and descriptions)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengeConfigs">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengeConfigs</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolChallengesV1.ChallengeConfigInfo[]? GetAllChallengeConfigs(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LolChallengesV1.ChallengeConfigInfo[]?>("lol-challenges-v1.getAllChallengeConfigs", $"/lol/challenges/v1/challenges/config",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// List of all basic challenge configuration information (includes all translations for names and descriptions)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengeConfigs">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengeConfigs</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolChallengesV1.ChallengeConfigInfo[]?> GetAllChallengeConfigsAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LolChallengesV1.ChallengeConfigInfo[]?>("lol-challenges-v1.getAllChallengeConfigs", $"/lol/challenges/v1/challenges/config",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengePercentiles">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengePercentiles</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public IDictionary<long, IDictionary<string, double>>? GetAllChallengePercentiles(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<IDictionary<long, IDictionary<string, double>>?>("lol-challenges-v1.getAllChallengePercentiles", $"/lol/challenges/v1/challenges/percentiles",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level -> percentile of players who achieved it<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengePercentiles">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getAllChallengePercentiles</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<IDictionary<long, IDictionary<string, double>>?> GetAllChallengePercentilesAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<IDictionary<long, IDictionary<string, double>>?>("lol-challenges-v1.getAllChallengePercentiles", $"/lol/challenges/v1/challenges/percentiles",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get challenge configuration (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeConfigs">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeConfigs</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolChallengesV1.ChallengeConfigInfo? GetChallengeConfigs(Region region, long challengeId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LolChallengesV1.ChallengeConfigInfo?>("lol-challenges-v1.getChallengeConfigs", $"/lol/challenges/v1/challenges/{challengeId}/config",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get challenge configuration (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeConfigs">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeConfigs</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolChallengesV1.ChallengeConfigInfo?> GetChallengeConfigsAsync(Region region, long challengeId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LolChallengesV1.ChallengeConfigInfo?>("lol-challenges-v1.getChallengeConfigs", $"/lol/challenges/v1/challenges/{challengeId}/config",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeLeaderboards">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="level"> (required)</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolChallengesV1.ApexPlayerInfo[]? GetChallengeLeaderboards(Region region, string level, long challengeId, int? limit = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != limit) queryParams.Add(new KeyValuePair<string, string>(nameof(limit), limit.Value.ToString()));
            return RiotApi.Get<LolChallengesV1.ApexPlayerInfo[]?>("lol-challenges-v1.getChallengeLeaderboards", $"/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeLeaderboards">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengeLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="level"> (required)</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolChallengesV1.ApexPlayerInfo[]?> GetChallengeLeaderboardsAsync(Region region, string level, long challengeId, int? limit = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != limit) queryParams.Add(new KeyValuePair<string, string>(nameof(limit), limit.Value.ToString()));
            return RiotApi.GetAsync<LolChallengesV1.ApexPlayerInfo[]?>("lol-challenges-v1.getChallengeLeaderboards", $"/lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Map of level to percentile of players who have achieved it<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public IDictionary<string, double>? GetChallengePercentiles(Region region, long challengeId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<IDictionary<string, double>?>("lol-challenges-v1.getChallengePercentiles", $"/lol/challenges/v1/challenges/{challengeId}/percentiles",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Map of level to percentile of players who have achieved it<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getChallengePercentiles</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="challengeId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<IDictionary<string, double>?> GetChallengePercentilesAsync(Region region, long challengeId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<IDictionary<string, double>?>("lol-challenges-v1.getChallengePercentiles", $"/lol/challenges/v1/challenges/{challengeId}/percentiles",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Returns player information with list of all progressed challenges (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getPlayerData">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getPlayerData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolChallengesV1.PlayerInfo? GetPlayerData(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LolChallengesV1.PlayerInfo?>("lol-challenges-v1.getPlayerData", $"/lol/challenges/v1/player-data/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Returns player information with list of all progressed challenges (REST)<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getPlayerData">https://developer.riotgames.com/api-methods/#lol-challenges-v1/GET_getPlayerData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolChallengesV1.PlayerInfo?> GetPlayerDataAsync(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LolChallengesV1.PlayerInfo?>("lol-challenges-v1.getPlayerData", $"/lol/challenges/v1/player-data/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LolStatusV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-status-v3">https://developer.riotgames.com/api-methods/#lol-status-v3</a>
    /// </summary>
    public class LolStatusV3Endpoints : Endpoints
    {
        internal LolStatusV3Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get League of Legends status for the given shard.<para />
        /// ## Rate Limit Notes<para />
        /// Requests to this API are not counted against the application Rate Limits.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolStatusV3.ShardStatus? GetShardData(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LolStatusV3.ShardStatus?>("lol-status-v3.getShardData", $"/lol/status/v3/shard-data",
                region, QUERY_PARAMS_EMPTY, true, cancellationToken);
        }

        /// <summary>
        /// Get League of Legends status for the given shard.<para />
        /// ## Rate Limit Notes<para />
        /// Requests to this API are not counted against the application Rate Limits.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolStatusV3.ShardStatus?> GetShardDataAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LolStatusV3.ShardStatus?>("lol-status-v3.getShardData", $"/lol/status/v3/shard-data",
                region, QUERY_PARAMS_EMPTY, true, cancellationToken);
        }

    }
    /// <summary>
    /// LolStatusV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-status-v4">https://developer.riotgames.com/api-methods/#lol-status-v4</a>
    /// </summary>
    public class LolStatusV4Endpoints : Endpoints
    {
        internal LolStatusV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get League of Legends status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LolStatusV4.PlatformData? GetPlatformData(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LolStatusV4.PlatformData?>("lol-status-v4.getPlatformData", $"/lol/status/v4/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get League of Legends status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lol-status-v4/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LolStatusV4.PlatformData?> GetPlatformDataAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LolStatusV4.PlatformData?>("lol-status-v4.getPlatformData", $"/lol/status/v4/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LorDeckV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-deck-v1">https://developer.riotgames.com/api-methods/#lor-deck-v1</a>
    /// </summary>
    public class LorDeckV1Endpoints : Endpoints
    {
        internal LorDeckV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

    }
    /// <summary>
    /// LorInventoryV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-inventory-v1">https://developer.riotgames.com/api-methods/#lor-inventory-v1</a>
    /// </summary>
    public class LorInventoryV1Endpoints : Endpoints
    {
        internal LorInventoryV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

    }
    /// <summary>
    /// LorMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-match-v1">https://developer.riotgames.com/api-methods/#lor-match-v1</a>
    /// </summary>
    public class LorMatchV1Endpoints : Endpoints
    {
        internal LorMatchV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a list of match ids by PUUID<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public string[]? GetMatchIdsByPUUID(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<string[]?>("lor-match-v1.getMatchIdsByPUUID", $"/lor/match/v1/matches/by-puuid/{puuid}/ids",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a list of match ids by PUUID<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<string[]?> GetMatchIdsByPUUIDAsync(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<string[]?>("lor-match-v1.getMatchIdsByPUUID", $"/lor/match/v1/matches/by-puuid/{puuid}/ids",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get match by id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LorMatchV1.Match? GetMatch(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LorMatchV1.Match?>("lor-match-v1.getMatch", $"/lor/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get match by id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#lor-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LorMatchV1.Match?> GetMatchAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LorMatchV1.Match?>("lor-match-v1.getMatch", $"/lor/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LorRankedV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1">https://developer.riotgames.com/api-methods/#lor-ranked-v1</a>
    /// </summary>
    public class LorRankedV1Endpoints : Endpoints
    {
        internal LorRankedV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get the players in Master tier.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LorRankedV1.Leaderboard? GetLeaderboards(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LorRankedV1.Leaderboard?>("lor-ranked-v1.getLeaderboards", $"/lor/ranked/v1/leaderboards",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the players in Master tier.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LorRankedV1.Leaderboard?> GetLeaderboardsAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LorRankedV1.Leaderboard?>("lor-ranked-v1.getLeaderboards", $"/lor/ranked/v1/leaderboards",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// LorStatusV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-status-v1">https://developer.riotgames.com/api-methods/#lor-status-v1</a>
    /// </summary>
    public class LorStatusV1Endpoints : Endpoints
    {
        internal LorStatusV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get Legends of Runeterra status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public LorStatusV1.PlatformData? GetPlatformData(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<LorStatusV1.PlatformData?>("lor-status-v1.getPlatformData", $"/lor/status/v1/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get Legends of Runeterra status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#lor-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<LorStatusV1.PlatformData?> GetPlatformDataAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<LorStatusV1.PlatformData?>("lor-status-v1.getPlatformData", $"/lor/status/v1/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// MatchV5 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#match-v5">https://developer.riotgames.com/api-methods/#match-v5</a>
    /// </summary>
    public class MatchV5Endpoints : Endpoints
    {
        internal MatchV5Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a list of match ids by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="startTime">Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. (optional)</param>
        /// <param name="endTime">Epoch timestamp in seconds. (optional)</param>
        /// <param name="queue">Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type filter meaning any match ids returned must match both the queue and type filters. (optional)</param>
        /// <param name="type">Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue filter meaning any match ids returned must match both the queue and type filters. (optional)</param>
        /// <param name="start">Defaults to 0. Start index. (optional)</param>
        /// <param name="count">Defaults to 20. Valid values: 0 to 100. Number of match ids to return. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public string[]? GetMatchIdsByPUUID(Region region, string puuid, long? startTime = null, long? endTime = null, int? queue = null, string? type = null, int? start = null, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != startTime) queryParams.Add(new KeyValuePair<string, string>(nameof(startTime), startTime.Value.ToString()));
            if (null != endTime) queryParams.Add(new KeyValuePair<string, string>(nameof(endTime), endTime.Value.ToString()));
            if (null != queue) queryParams.Add(new KeyValuePair<string, string>(nameof(queue), queue.Value.ToString()));
            if (null != type) queryParams.Add(new KeyValuePair<string, string>(nameof(type), type.ToString()));
            if (null != start) queryParams.Add(new KeyValuePair<string, string>(nameof(start), start.Value.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            return RiotApi.Get<string[]?>("match-v5.getMatchIdsByPUUID", $"/lol/match/v5/matches/by-puuid/{puuid}/ids",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get a list of match ids by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="startTime">Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. (optional)</param>
        /// <param name="endTime">Epoch timestamp in seconds. (optional)</param>
        /// <param name="queue">Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type filter meaning any match ids returned must match both the queue and type filters. (optional)</param>
        /// <param name="type">Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue filter meaning any match ids returned must match both the queue and type filters. (optional)</param>
        /// <param name="start">Defaults to 0. Start index. (optional)</param>
        /// <param name="count">Defaults to 20. Valid values: 0 to 100. Number of match ids to return. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<string[]?> GetMatchIdsByPUUIDAsync(Region region, string puuid, long? startTime = null, long? endTime = null, int? queue = null, string? type = null, int? start = null, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != startTime) queryParams.Add(new KeyValuePair<string, string>(nameof(startTime), startTime.Value.ToString()));
            if (null != endTime) queryParams.Add(new KeyValuePair<string, string>(nameof(endTime), endTime.Value.ToString()));
            if (null != queue) queryParams.Add(new KeyValuePair<string, string>(nameof(queue), queue.Value.ToString()));
            if (null != type) queryParams.Add(new KeyValuePair<string, string>(nameof(type), type.ToString()));
            if (null != start) queryParams.Add(new KeyValuePair<string, string>(nameof(start), start.Value.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            return RiotApi.GetAsync<string[]?>("match-v5.getMatchIdsByPUUID", $"/lol/match/v5/matches/by-puuid/{puuid}/ids",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get a match by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public MatchV5.Match? GetMatch(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<MatchV5.Match?>("match-v5.getMatch", $"/lol/match/v5/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a match by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v5/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<MatchV5.Match?> GetMatchAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<MatchV5.Match?>("match-v5.getMatch", $"/lol/match/v5/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a match timeline by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline">https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public MatchV5.MatchTimeline? GetTimeline(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<MatchV5.MatchTimeline?>("match-v5.getTimeline", $"/lol/match/v5/matches/{matchId}/timeline",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a match timeline by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline">https://developer.riotgames.com/api-methods/#match-v5/GET_getTimeline</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<MatchV5.MatchTimeline?> GetTimelineAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<MatchV5.MatchTimeline?>("match-v5.getTimeline", $"/lol/match/v5/matches/{matchId}/timeline",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// SpectatorV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#spectator-v4">https://developer.riotgames.com/api-methods/#spectator-v4</a>
    /// </summary>
    public class SpectatorV4Endpoints : Endpoints
    {
        internal SpectatorV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get current game information for the given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SpectatorV4.CurrentGameInfo? GetCurrentGameInfoBySummoner(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SpectatorV4.CurrentGameInfo?>("spectator-v4.getCurrentGameInfoBySummoner", $"/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get current game information for the given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SpectatorV4.CurrentGameInfo?> GetCurrentGameInfoBySummonerAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SpectatorV4.CurrentGameInfo?>("spectator-v4.getCurrentGameInfoBySummoner", $"/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get list of featured games.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SpectatorV4.FeaturedGames? GetFeaturedGames(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SpectatorV4.FeaturedGames?>("spectator-v4.getFeaturedGames", $"/lol/spectator/v4/featured-games",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get list of featured games.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SpectatorV4.FeaturedGames?> GetFeaturedGamesAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SpectatorV4.FeaturedGames?>("spectator-v4.getFeaturedGames", $"/lol/spectator/v4/featured-games",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// SummonerV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#summoner-v4">https://developer.riotgames.com/api-methods/#summoner-v4</a>
    /// </summary>
    public class SummonerV4Endpoints : Endpoints
    {
        internal SummonerV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a summoner by account ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedAccountId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SummonerV4.Summoner? GetByAccountId(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SummonerV4.Summoner?>("summoner-v4.getByAccountId", $"/lol/summoner/v4/summoners/by-account/{encryptedAccountId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by account ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedAccountId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SummonerV4.Summoner?> GetByAccountIdAsync(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SummonerV4.Summoner?>("summoner-v4.getByAccountId", $"/lol/summoner/v4/summoners/by-account/{encryptedAccountId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner name.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SummonerV4.Summoner? GetBySummonerName(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SummonerV4.Summoner?>("summoner-v4.getBySummonerName", $"/lol/summoner/v4/summoners/by-name/{summonerName}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner name.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SummonerV4.Summoner?> GetBySummonerNameAsync(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SummonerV4.Summoner?>("summoner-v4.getBySummonerName", $"/lol/summoner/v4/summoners/by-name/{summonerName}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by PUUID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SummonerV4.Summoner? GetByPUUID(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SummonerV4.Summoner?>("summoner-v4.getByPUUID", $"/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by PUUID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SummonerV4.Summoner?> GetByPUUIDAsync(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SummonerV4.Summoner?>("summoner-v4.getByPUUID", $"/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public SummonerV4.Summoner? GetBySummonerId(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<SummonerV4.Summoner?>("summoner-v4.getBySummonerId", $"/lol/summoner/v4/summoners/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<SummonerV4.Summoner?> GetBySummonerIdAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<SummonerV4.Summoner?>("summoner-v4.getBySummonerId", $"/lol/summoner/v4/summoners/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// TftLeagueV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-league-v1">https://developer.riotgames.com/api-methods/#tft-league-v1</a>
    /// </summary>
    public class TftLeagueV1Endpoints : Endpoints
    {
        internal TftLeagueV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get the challenger league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueList? GetChallengerLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.LeagueList?>("tft-league-v1.getChallengerLeague", $"/tft/league/v1/challenger",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the challenger league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueList?> GetChallengerLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.LeagueList?>("tft-league-v1.getChallengerLeague", $"/tft/league/v1/challenger",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league entries for a given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueEntry[]? GetLeagueEntriesForSummoner(Region region, string summonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.LeagueEntry[]?>("tft-league-v1.getLeagueEntriesForSummoner", $"/tft/league/v1/entries/by-summoner/{summonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league entries for a given summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueEntry[]?> GetLeagueEntriesForSummonerAsync(Region region, string summonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.LeagueEntry[]?>("tft-league-v1.getLeagueEntriesForSummoner", $"/tft/league/v1/entries/by-summoner/{summonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tier"> (required)</param>
        /// <param name="division"> (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueEntry[]? GetLeagueEntries(Region region, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.Get<TftLeagueV1.LeagueEntry[]?>("tft-league-v1.getLeagueEntries", $"/tft/league/v1/entries/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get all the league entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tier"> (required)</param>
        /// <param name="division"> (required)</param>
        /// <param name="page">Defaults to 1. Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueEntry[]?> GetLeagueEntriesAsync(Region region, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            return RiotApi.GetAsync<TftLeagueV1.LeagueEntry[]?>("tft-league-v1.getLeagueEntries", $"/tft/league/v1/entries/{tier}/{division}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get the grandmaster league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueList? GetGrandmasterLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.LeagueList?>("tft-league-v1.getGrandmasterLeague", $"/tft/league/v1/grandmaster",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the grandmaster league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueList?> GetGrandmasterLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.LeagueList?>("tft-league-v1.getGrandmasterLeague", $"/tft/league/v1/grandmaster",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueList? GetLeagueById(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.LeagueList?>("tft-league-v1.getLeagueById", $"/tft/league/v1/leagues/{leagueId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueList?> GetLeagueByIdAsync(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.LeagueList?>("tft-league-v1.getLeagueById", $"/tft/league/v1/leagues/{leagueId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the master league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.LeagueList? GetMasterLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.LeagueList?>("tft-league-v1.getMasterLeague", $"/tft/league/v1/master",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the master league.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.LeagueList?> GetMasterLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.LeagueList?>("tft-league-v1.getMasterLeague", $"/tft/league/v1/master",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the top rated ladder for given queue<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftLeagueV1.TopRatedLadderEntry[]? GetTopRatedLadder(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftLeagueV1.TopRatedLadderEntry[]?>("tft-league-v1.getTopRatedLadder", $"/tft/league/v1/rated-ladders/{queue}/top",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get the top rated ladder for given queue<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getTopRatedLadder</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftLeagueV1.TopRatedLadderEntry[]?> GetTopRatedLadderAsync(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftLeagueV1.TopRatedLadderEntry[]?>("tft-league-v1.getTopRatedLadder", $"/tft/league/v1/rated-ladders/{queue}/top",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// TftMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-match-v1">https://developer.riotgames.com/api-methods/#tft-match-v1</a>
    /// </summary>
    public class TftMatchV1Endpoints : Endpoints
    {
        internal TftMatchV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a list of match ids by PUUID<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="start">Defaults to 0. Start index. (optional)</param>
        /// <param name="endTime">Epoch timestamp in seconds. (optional)</param>
        /// <param name="startTime">Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. (optional)</param>
        /// <param name="count">Defaults to 20. Number of match ids to return. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public string[]? GetMatchIdsByPUUID(Region region, string puuid, int? start = null, long? endTime = null, long? startTime = null, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != start) queryParams.Add(new KeyValuePair<string, string>(nameof(start), start.Value.ToString()));
            if (null != endTime) queryParams.Add(new KeyValuePair<string, string>(nameof(endTime), endTime.Value.ToString()));
            if (null != startTime) queryParams.Add(new KeyValuePair<string, string>(nameof(startTime), startTime.Value.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            return RiotApi.Get<string[]?>("tft-match-v1.getMatchIdsByPUUID", $"/tft/match/v1/matches/by-puuid/{puuid}/ids",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get a list of match ids by PUUID<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="start">Defaults to 0. Start index. (optional)</param>
        /// <param name="endTime">Epoch timestamp in seconds. (optional)</param>
        /// <param name="startTime">Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any matches played before June 16th, 2021 won't be included in the results if the startTime filter is set. (optional)</param>
        /// <param name="count">Defaults to 20. Number of match ids to return. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<string[]?> GetMatchIdsByPUUIDAsync(Region region, string puuid, int? start = null, long? endTime = null, long? startTime = null, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != start) queryParams.Add(new KeyValuePair<string, string>(nameof(start), start.Value.ToString()));
            if (null != endTime) queryParams.Add(new KeyValuePair<string, string>(nameof(endTime), endTime.Value.ToString()));
            if (null != startTime) queryParams.Add(new KeyValuePair<string, string>(nameof(startTime), startTime.Value.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            return RiotApi.GetAsync<string[]?>("tft-match-v1.getMatchIdsByPUUID", $"/tft/match/v1/matches/by-puuid/{puuid}/ids",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get a match by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftMatchV1.Match? GetMatch(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftMatchV1.Match?>("tft-match-v1.getMatch", $"/tft/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a match by match id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftMatchV1.Match?> GetMatchAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftMatchV1.Match?>("tft-match-v1.getMatch", $"/tft/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// TftSummonerV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1">https://developer.riotgames.com/api-methods/#tft-summoner-v1</a>
    /// </summary>
    public class TftSummonerV1Endpoints : Endpoints
    {
        internal TftSummonerV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a summoner by account ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedAccountId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftSummonerV1.Summoner? GetByAccountId(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftSummonerV1.Summoner?>("tft-summoner-v1.getByAccountId", $"/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by account ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedAccountId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftSummonerV1.Summoner?> GetByAccountIdAsync(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftSummonerV1.Summoner?>("tft-summoner-v1.getByAccountId", $"/tft/summoner/v1/summoners/by-account/{encryptedAccountId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner name.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftSummonerV1.Summoner? GetBySummonerName(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftSummonerV1.Summoner?>("tft-summoner-v1.getBySummonerName", $"/tft/summoner/v1/summoners/by-name/{summonerName}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner name.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftSummonerV1.Summoner?> GetBySummonerNameAsync(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftSummonerV1.Summoner?>("tft-summoner-v1.getBySummonerName", $"/tft/summoner/v1/summoners/by-name/{summonerName}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by PUUID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftSummonerV1.Summoner? GetByPUUID(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftSummonerV1.Summoner?>("tft-summoner-v1.getByPUUID", $"/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by PUUID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftSummonerV1.Summoner?> GetByPUUIDAsync(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftSummonerV1.Summoner?>("tft-summoner-v1.getByPUUID", $"/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TftSummonerV1.Summoner? GetBySummonerId(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TftSummonerV1.Summoner?>("tft-summoner-v1.getBySummonerId", $"/tft/summoner/v1/summoners/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get a summoner by summoner ID.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TftSummonerV1.Summoner?> GetBySummonerIdAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TftSummonerV1.Summoner?>("tft-summoner-v1.getBySummonerId", $"/tft/summoner/v1/summoners/{encryptedSummonerId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// TournamentStubV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4">https://developer.riotgames.com/api-methods/#tournament-stub-v4</a>
    /// </summary>
    public class TournamentStubV4Endpoints : Endpoints
    {
        internal TournamentStubV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TournamentStubV4.LobbyEventWrapper? GetLobbyEventsByCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TournamentStubV4.LobbyEventWrapper?>("tournament-stub-v4.getLobbyEventsByCode", $"/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TournamentStubV4.LobbyEventWrapper?> GetLobbyEventsByCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TournamentStubV4.LobbyEventWrapper?>("tournament-stub-v4.getLobbyEventsByCode", $"/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// TournamentV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-v4">https://developer.riotgames.com/api-methods/#tournament-v4</a>
    /// </summary>
    public class TournamentV4Endpoints : Endpoints
    {
        internal TournamentV4Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code string. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TournamentV4.TournamentCode? GetTournamentCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TournamentV4.TournamentCode?>("tournament-v4.getTournamentCode", $"/lol/tournament/v4/codes/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code string. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TournamentV4.TournamentCode?> GetTournamentCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TournamentV4.TournamentCode?>("tournament-v4.getTournamentCode", $"/lol/tournament/v4/codes/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public TournamentV4.LobbyEventWrapper? GetLobbyEventsByCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<TournamentV4.LobbyEventWrapper?>("tournament-v4.getLobbyEventsByCode", $"/lol/tournament/v4/lobby-events/by-code/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<TournamentV4.LobbyEventWrapper?> GetLobbyEventsByCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<TournamentV4.LobbyEventWrapper?>("tournament-v4.getLobbyEventsByCode", $"/lol/tournament/v4/lobby-events/by-code/{tournamentCode}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// ValContentV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-content-v1">https://developer.riotgames.com/api-methods/#val-content-v1</a>
    /// </summary>
    public class ValContentV1Endpoints : Endpoints
    {
        internal ValContentV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get content optionally filtered by locale<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent">https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValContentV1.Content? GetContent(Region region, string? locale = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != locale) queryParams.Add(new KeyValuePair<string, string>(nameof(locale), locale.ToString()));
            return RiotApi.Get<ValContentV1.Content?>("val-content-v1.getContent", $"/val/content/v1/contents",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get content optionally filtered by locale<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent">https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale"> (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValContentV1.Content?> GetContentAsync(Region region, string? locale = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != locale) queryParams.Add(new KeyValuePair<string, string>(nameof(locale), locale.ToString()));
            return RiotApi.GetAsync<ValContentV1.Content?>("val-content-v1.getContent", $"/val/content/v1/contents",
                region, queryParams, false, cancellationToken);
        }

    }
    /// <summary>
    /// ValMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-match-v1">https://developer.riotgames.com/api-methods/#val-match-v1</a>
    /// </summary>
    public class ValMatchV1Endpoints : Endpoints
    {
        internal ValMatchV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get match by id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValMatchV1.Match? GetMatch(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ValMatchV1.Match?>("val-match-v1.getMatch", $"/val/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get match by id<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValMatchV1.Match?> GetMatchAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ValMatchV1.Match?>("val-match-v1.getMatch", $"/val/match/v1/matches/{matchId}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get matchlist for games played by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValMatchV1.Matchlist? GetMatchlist(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ValMatchV1.Matchlist?>("val-match-v1.getMatchlist", $"/val/match/v1/matchlists/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get matchlist for games played by puuid<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="puuid"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValMatchV1.Matchlist?> GetMatchlistAsync(Region region, string puuid, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ValMatchV1.Matchlist?>("val-match-v1.getMatchlist", $"/val/match/v1/matchlists/by-puuid/{puuid}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get recent matches<para />
        /// ## Implementation Notes<para />
        /// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValMatchV1.RecentMatches? GetRecent(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ValMatchV1.RecentMatches?>("val-match-v1.getRecent", $"/val/match/v1/recent-matches/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get recent matches<para />
        /// ## Implementation Notes<para />
        /// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12 hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent matches will return a combined list of matches from those three regions. Requests are load balanced so you may see some inconsistencies as matches are added/removed from the list.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent">https://developer.riotgames.com/api-methods/#val-match-v1/GET_getRecent</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValMatchV1.RecentMatches?> GetRecentAsync(Region region, string queue, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ValMatchV1.RecentMatches?>("val-match-v1.getRecent", $"/val/match/v1/recent-matches/by-queue/{queue}",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
    /// <summary>
    /// ValRankedV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1">https://developer.riotgames.com/api-methods/#val-ranked-v1</a>
    /// </summary>
    public class ValRankedV1Endpoints : Endpoints
    {
        internal ValRankedV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get leaderboard for the competitive queue<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard">https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="actId">Act ids can be found using the val-content API. (required)</param>
        /// <param name="size">Defaults to 200. Valid values: 1 to 200. (optional)</param>
        /// <param name="startIndex">Defaults to 0. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValRankedV1.Leaderboard? GetLeaderboard(Region region, string actId, int? size = null, int? startIndex = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != size) queryParams.Add(new KeyValuePair<string, string>(nameof(size), size.Value.ToString()));
            if (null != startIndex) queryParams.Add(new KeyValuePair<string, string>(nameof(startIndex), startIndex.Value.ToString()));
            return RiotApi.Get<ValRankedV1.Leaderboard?>("val-ranked-v1.getLeaderboard", $"/val/ranked/v1/leaderboards/by-act/{actId}",
                region, queryParams, false, cancellationToken);
        }

        /// <summary>
        /// Get leaderboard for the competitive queue<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard">https://developer.riotgames.com/api-methods/#val-ranked-v1/GET_getLeaderboard</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="actId">Act ids can be found using the val-content API. (required)</param>
        /// <param name="size">Defaults to 200. Valid values: 1 to 200. (optional)</param>
        /// <param name="startIndex">Defaults to 0. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValRankedV1.Leaderboard?> GetLeaderboardAsync(Region region, string actId, int? size = null, int? startIndex = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != size) queryParams.Add(new KeyValuePair<string, string>(nameof(size), size.Value.ToString()));
            if (null != startIndex) queryParams.Add(new KeyValuePair<string, string>(nameof(startIndex), startIndex.Value.ToString()));
            return RiotApi.GetAsync<ValRankedV1.Leaderboard?>("val-ranked-v1.getLeaderboard", $"/val/ranked/v1/leaderboards/by-act/{actId}",
                region, queryParams, false, cancellationToken);
        }

    }
    /// <summary>
    /// ValStatusV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#val-status-v1">https://developer.riotgames.com/api-methods/#val-status-v1</a>
    /// </summary>
    public class ValStatusV1Endpoints : Endpoints
    {
        internal ValStatusV1Endpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get VALORANT status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public ValStatusV1.PlatformData? GetPlatformData(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.Get<ValStatusV1.PlatformData?>("val-status-v1.getPlatformData", $"/val/status/v1/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

        /// <summary>
        /// Get VALORANT status for the given platform.<para />
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData">https://developer.riotgames.com/api-methods/#val-status-v1/GET_getPlatformData</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public Task<ValStatusV1.PlatformData?> GetPlatformDataAsync(Region region, CancellationToken? cancellationToken = null)
        {
            return RiotApi.GetAsync<ValStatusV1.PlatformData?>("val-status-v1.getPlatformData", $"/val/status/v1/platform-data",
                region, QUERY_PARAMS_EMPTY, false, cancellationToken);
        }

    }
}
