
// This file is automatically generated.
// Do not directly edit.
// Generated on 2021-04-30T02:25:28.100Z

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version d8e88205331e1960ffb78a012c108d6a1d60b7f2

using System.Collections.Generic;
using System.Linq;

#if USE_NEWTONSOFT
using JsonPropertyAttribute = Newtonsoft.Json.JsonPropertyAttribute;
using JsonExtensionDataAttribute = Newtonsoft.Json.JsonExtensionDataAttribute;
#endif

#if USE_SYSTEXTJSON
using JsonPropertyAttribute = System.Text.Json.Serialization.JsonPropertyNameAttribute;
using JsonExtensionDataAttribute = System.Text.Json.Serialization.JsonExtensionDataAttribute;
#endif

// ReSharper disable RedundantStringInterpolation
// ReSharper disable InconsistentNaming

// account-v1
namespace MingweiSamuel.Camille.AccountV1
{
#nullable disable
    /// <summary>
    /// Account data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Account
    {
        public Account()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// This field may be excluded from the response if the account doesn't have a gameName.
        /// </summary>
        [JsonProperty("gameName")]
        public string GameName { get; set; }
        /// <summary>
        /// This field may be excluded from the response if the account doesn't have a tagLine.
        /// </summary>
        [JsonProperty("tagLine")]
        public string TagLine { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Account("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// account-v1
namespace MingweiSamuel.Camille.AccountV1
{
#nullable disable
    /// <summary>
    /// ActiveShard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ActiveShard
    {
        public ActiveShard()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("game")]
        public string Game { get; set; }
        [JsonProperty("activeShard")]
        public string ActiveShardstring { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ActiveShard("
                + "Puuid: " + Puuid + ", "
                + "Game: " + Game + ", "
                + "ActiveShardstring: " + ActiveShardstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// champion-mastery-v4
namespace MingweiSamuel.Camille.ChampionMasteryV4
{
#nullable disable
    /// <summary>
    /// ChampionMastery data object. This class is automatically generated.<para />
    /// This object contains single Champion Mastery information for player and champion combination.
    /// </summary>
    public class ChampionMastery
    {
        public ChampionMastery()
        {}
        /// <summary>
        /// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
        /// </summary>
        [JsonProperty("championPointsUntilNextLevel")]
        public long ChampionPointsUntilNextLevel { get; set; }
        /// <summary>
        /// Is chest granted for this champion or not in current season.
        /// </summary>
        [JsonProperty("chestGranted")]
        public bool ChestGranted { get; set; }
        /// <summary>
        /// Champion ID for this entry.
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// Last time this champion was played by this player - in Unix milliseconds time format.
        /// </summary>
        [JsonProperty("lastPlayTime")]
        public long LastPlayTime { get; set; }
        /// <summary>
        /// Champion level for specified player and champion combination.
        /// </summary>
        [JsonProperty("championLevel")]
        public int ChampionLevel { get; set; }
        /// <summary>
        /// Summoner ID for this entry. (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Total number of champion points for this player and champion combination - they are used to determine championLevel.
        /// </summary>
        [JsonProperty("championPoints")]
        public int ChampionPoints { get; set; }
        /// <summary>
        /// Number of points earned since current level has been achieved.
        /// </summary>
        [JsonProperty("championPointsSinceLastLevel")]
        public long ChampionPointsSinceLastLevel { get; set; }
        /// <summary>
        /// The token earned for this champion at the current championLevel. When the championLevel is advanced the tokensEarned resets to 0.
        /// </summary>
        [JsonProperty("tokensEarned")]
        public int TokensEarned { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionMastery("
                + "ChampionPointsUntilNextLevel: " + ChampionPointsUntilNextLevel + ", "
                + "ChestGranted: " + ChestGranted + ", "
                + "ChampionId: " + ChampionId + ", "
                + "LastPlayTime: " + LastPlayTime + ", "
                + "ChampionLevel: " + ChampionLevel + ", "
                + "SummonerId: " + SummonerId + ", "
                + "ChampionPoints: " + ChampionPoints + ", "
                + "ChampionPointsSinceLastLevel: " + ChampionPointsSinceLastLevel + ", "
                + "TokensEarned: " + TokensEarned + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// champion-v3
namespace MingweiSamuel.Camille.ChampionV3
{
#nullable disable
    /// <summary>
    /// ChampionInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ChampionInfo
    {
        public ChampionInfo()
        {}
        [JsonProperty("maxNewPlayerLevel")]
        public int MaxNewPlayerLevel { get; set; }
        [JsonProperty("freeChampionIdsForNewPlayers")]
        public int[] FreeChampionIdsForNewPlayers { get; set; }
        [JsonProperty("freeChampionIds")]
        public int[] FreeChampionIds { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionInfo("
                + "MaxNewPlayerLevel: " + MaxNewPlayerLevel + ", "
                + "FreeChampionIdsForNewPlayers: " + FreeChampionIdsForNewPlayers + ", "
                + "FreeChampionIds: " + FreeChampionIds + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// clash-v1
namespace MingweiSamuel.Camille.ClashV1
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }
        /// <summary>
        /// (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
        /// </summary>
        [JsonProperty("position")]
        public string Position { get; set; }
        /// <summary>
        /// (Legal values:  CAPTAIN,  MEMBER)
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "SummonerId: " + SummonerId + ", "
                + "TeamId: " + TeamId + ", "
                + "Position: " + Position + ", "
                + "Role: " + Role + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// clash-v1
namespace MingweiSamuel.Camille.ClashV1
{
#nullable disable
    /// <summary>
    /// Team data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Team
    {
        public Team()
        {}
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("iconId")]
        public int IconId { get; set; }
        [JsonProperty("tier")]
        public int Tier { get; set; }
        /// <summary>
        /// Summoner ID of the team captain.
        /// </summary>
        [JsonProperty("captain")]
        public string Captain { get; set; }
        [JsonProperty("abbreviation")]
        public string Abbreviation { get; set; }
        /// <summary>
        /// Team members.
        /// </summary>
        [JsonProperty("players")]
        public Player[] Players { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Team("
                + "Id: " + Id + ", "
                + "TournamentId: " + TournamentId + ", "
                + "Name: " + Name + ", "
                + "IconId: " + IconId + ", "
                + "Tier: " + Tier + ", "
                + "Captain: " + Captain + ", "
                + "Abbreviation: " + Abbreviation + ", "
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// clash-v1
namespace MingweiSamuel.Camille.ClashV1
{
#nullable disable
    /// <summary>
    /// Tournament data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Tournament
    {
        public Tournament()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("themeId")]
        public int ThemeId { get; set; }
        [JsonProperty("nameKey")]
        public string NameKey { get; set; }
        [JsonProperty("nameKeySecondary")]
        public string NameKeySecondary { get; set; }
        /// <summary>
        /// Tournament phase.
        /// </summary>
        [JsonProperty("schedule")]
        public TournamentPhase[] Schedule { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Tournament("
                + "Id: " + Id + ", "
                + "ThemeId: " + ThemeId + ", "
                + "NameKey: " + NameKey + ", "
                + "NameKeySecondary: " + NameKeySecondary + ", "
                + "Schedule: " + Schedule + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// clash-v1
namespace MingweiSamuel.Camille.ClashV1
{
#nullable disable
    /// <summary>
    /// TournamentPhase data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentPhase
    {
        public TournamentPhase()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("registrationTime")]
        public long RegistrationTime { get; set; }
        [JsonProperty("startTime")]
        public long StartTime { get; set; }
        [JsonProperty("cancelled")]
        public bool Cancelled { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentPhase("
                + "Id: " + Id + ", "
                + "RegistrationTime: " + RegistrationTime + ", "
                + "StartTime: " + StartTime + ", "
                + "Cancelled: " + Cancelled + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
#nullable disable
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
        public LeagueEntry()
        {}
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("queueType")]
        public string QueueType { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
#nullable disable
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
        public MiniSeries()
        {}
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {
        public LeagueList()
        {}
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public string Queue { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList("
                + "LeagueId: " + LeagueId + ", "
                + "Entries: " + Entries + ", "
                + "Tier: " + Tier + ", "
                + "Name: " + Name + ", "
                + "Queue: " + Queue + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {
        public LeagueItem()
        {}
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem("
                + "FreshBlood: " + FreshBlood + ", "
                + "Wins: " + Wins + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Inactive: " + Inactive + ", "
                + "Veteran: " + Veteran + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Losses: " + Losses + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
        public MiniSeries()
        {}
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
        public LeagueEntry()
        {}
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("queueType")]
        public string QueueType { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// ShardStatus data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ShardStatus
    {
        public ShardStatus()
        {}
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("hostname")]
        public string Hostname { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("services")]
        public Service[] Services { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }
        [JsonProperty("region_tag")]
        public string RegionTag { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ShardStatus("
                + "Locales: " + Locales + ", "
                + "Hostname: " + Hostname + ", "
                + "Name: " + Name + ", "
                + "Services: " + Services + ", "
                + "Slug: " + Slug + ", "
                + "RegionTag: " + RegionTag + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Service data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Service
    {
        public Service()
        {}
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("incidents")]
        public Incident[] Incidents { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Service("
                + "Name: " + Name + ", "
                + "Slug: " + Slug + ", "
                + "Status: " + Status + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Incident data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Incident
    {
        public Incident()
        {}
        [JsonProperty("id")]
        public long Id { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("updates")]
        public Message[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Incident("
                + "Id: " + Id + ", "
                + "Active: " + Active + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Updates: " + Updates + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Message data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Message
    {
        public Message()
        {}
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("heading")]
        public string Heading { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("severity")]
        public string Severity { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("translations")]
        public Translation[] Translations { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Message("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Heading: " + Heading + ", "
                + "Content: " + Content + ", "
                + "Severity: " + Severity + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Translations: " + Translations + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Translation data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Translation
    {
        public Translation()
        {}
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("locale")]
        public string Locale { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Translation("
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Locale: " + Locale + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v4
namespace MingweiSamuel.Camille.LolStatusV4
{
#nullable disable
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {
        public PlatformData()
        {}
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v4
namespace MingweiSamuel.Camille.LolStatusV4
{
#nullable disable
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {
        public Status()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v4
namespace MingweiSamuel.Camille.LolStatusV4
{
#nullable disable
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {
        public Content()
        {}
        [JsonProperty("locale")]
        public string Locale { get; set; }
        [JsonProperty("content")]
        public string Contentstring { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v4
namespace MingweiSamuel.Camille.LolStatusV4
{
#nullable disable
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {
        public Update()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-match-v1
namespace MingweiSamuel.Camille.LorMatchV1
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
        public Match()
        {}
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }
        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-match-v1
namespace MingweiSamuel.Camille.LorMatchV1
{
#nullable disable
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {
        public Metadata()
        {}
        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("data_version")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("match_id")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata("
                + "DataVersion: " + DataVersion + ", "
                + "MatchId: " + MatchId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-match-v1
namespace MingweiSamuel.Camille.LorMatchV1
{
#nullable disable
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {
        public Info()
        {}
        /// <summary>
        /// (Legal values:  Constructed,  Expeditions,  Tutorial)
        /// </summary>
        [JsonProperty("game_mode")]
        public string GameMode { get; set; }
        /// <summary>
        /// (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet)
        /// </summary>
        [JsonProperty("game_type")]
        public string GameType { get; set; }
        [JsonProperty("game_start_time_utc")]
        public string GameStartTimeUtc { get; set; }
        [JsonProperty("game_version")]
        public string GameVersion { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        /// <summary>
        /// Total turns taken by both players.
        /// </summary>
        [JsonProperty("total_turn_count")]
        public int TotalTurnCount { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info("
                + "GameMode: " + GameMode + ", "
                + "GameType: " + GameType + ", "
                + "GameStartTimeUtc: " + GameStartTimeUtc + ", "
                + "GameVersion: " + GameVersion + ", "
                + "Players: " + Players + ", "
                + "TotalTurnCount: " + TotalTurnCount + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-match-v1
namespace MingweiSamuel.Camille.LorMatchV1
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("deck_id")]
        public string DeckId { get; set; }
        /// <summary>
        /// Code for the deck played. Refer to LOR documentation for details on deck codes.
        /// </summary>
        [JsonProperty("deck_code")]
        public string DeckCode { get; set; }
        [JsonProperty("factions")]
        public string[] Factions { get; set; }
        [JsonProperty("game_outcome")]
        public string GameOutcome { get; set; }
        /// <summary>
        /// The order in which the players took turns.
        /// </summary>
        [JsonProperty("order_of_play")]
        public int OrderOfPlay { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "DeckId: " + DeckId + ", "
                + "DeckCode: " + DeckCode + ", "
                + "Factions: " + Factions + ", "
                + "GameOutcome: " + GameOutcome + ", "
                + "OrderOfPlay: " + OrderOfPlay + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-ranked-v1
namespace MingweiSamuel.Camille.LorRankedV1
{
#nullable disable
    /// <summary>
    /// Leaderboard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Leaderboard
    {
        public Leaderboard()
        {}
        /// <summary>
        /// A list of players in Master tier.
        /// </summary>
        [JsonProperty("players")]
        public Player[] Players { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Leaderboard("
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-ranked-v1
namespace MingweiSamuel.Camille.LorRankedV1
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }
        /// <summary>
        /// League points.
        /// </summary>
        [JsonProperty("lp")]
        public int Lp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Name: " + Name + ", "
                + "Rank: " + Rank + ", "
                + "Lp: " + Lp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-status-v1
namespace MingweiSamuel.Camille.LorStatusV1
{
#nullable disable
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {
        public PlatformData()
        {}
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-status-v1
namespace MingweiSamuel.Camille.LorStatusV1
{
#nullable disable
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {
        public Status()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-status-v1
namespace MingweiSamuel.Camille.LorStatusV1
{
#nullable disable
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {
        public Content()
        {}
        [JsonProperty("locale")]
        public string Locale { get; set; }
        [JsonProperty("content")]
        public string Contentstring { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lor-status-v1
namespace MingweiSamuel.Camille.LorStatusV1
{
#nullable disable
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {
        public Update()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
        public Match()
        {}
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// Participant identity information. Participant identity information is purposefully excluded for custom games.
        /// </summary>
        [JsonProperty("participantIdentities")]
        public ParticipantIdentity[] ParticipantIdentities { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("queueId")]
        public int QueueId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// Match duration in seconds.
        /// </summary>
        [JsonProperty("gameDuration")]
        public long GameDuration { get; set; }
        /// <summary>
        /// Team information.
        /// </summary>
        [JsonProperty("teams")]
        public TeamStats[] Teams { get; set; }
        /// <summary>
        /// Platform where the match was played.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.
        /// </summary>
        [JsonProperty("gameCreation")]
        public long GameCreation { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("seasonId")]
        public int SeasonId { get; set; }
        /// <summary>
        /// The major.minor version typically indicates the patch the match was played on.
        /// </summary>
        [JsonProperty("gameVersion")]
        public string GameVersion { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("mapId")]
        public int MapId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// Participant information.
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "GameId: " + GameId + ", "
                + "ParticipantIdentities: " + ParticipantIdentities + ", "
                + "QueueId: " + QueueId + ", "
                + "GameType: " + GameType + ", "
                + "GameDuration: " + GameDuration + ", "
                + "Teams: " + Teams + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameCreation: " + GameCreation + ", "
                + "SeasonId: " + SeasonId + ", "
                + "GameVersion: " + GameVersion + ", "
                + "MapId: " + MapId + ", "
                + "GameMode: " + GameMode + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantIdentity data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantIdentity
    {
        public ParticipantIdentity()
        {}
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// Player information not included in the response for custom matches. Custom matches are considered private unless a tournament code was used to create the match.
        /// </summary>
        [JsonProperty("player")]
        public Player Player { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantIdentity("
                + "ParticipantId: " + ParticipantId + ", "
                + "Player: " + Player + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("profileIcon")]
        public int ProfileIcon { get; set; }
        /// <summary>
        /// Player's original accountId.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        [JsonProperty("matchHistoryUri")]
        public string MatchHistoryUri { get; set; }
        /// <summary>
        /// Player's current accountId when the match was played.
        /// </summary>
        [JsonProperty("currentAccountId")]
        public string CurrentAccountId { get; set; }
        /// <summary>
        /// Player's current platformId when the match was played.
        /// </summary>
        [JsonProperty("currentPlatformId")]
        public string CurrentPlatformId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Player's original platformId.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "ProfileIcon: " + ProfileIcon + ", "
                + "AccountId: " + AccountId + ", "
                + "MatchHistoryUri: " + MatchHistoryUri + ", "
                + "CurrentAccountId: " + CurrentAccountId + ", "
                + "CurrentPlatformId: " + CurrentPlatformId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "SummonerId: " + SummonerId + ", "
                + "PlatformId: " + PlatformId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// TeamStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamStats
    {
        public TeamStats()
        {}
        /// <summary>
        /// Number of towers the team destroyed.
        /// </summary>
        [JsonProperty("towerKills")]
        public int TowerKills { get; set; }
        /// <summary>
        /// Number of times the team killed Rift Herald.
        /// </summary>
        [JsonProperty("riftHeraldKills")]
        public int RiftHeraldKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first blood.
        /// </summary>
        [JsonProperty("firstBlood")]
        public bool FirstBlood { get; set; }
        /// <summary>
        /// Number of inhibitors the team destroyed.
        /// </summary>
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        /// <summary>
        /// If match queueId has a draft, contains banned champion data, otherwise empty.
        /// </summary>
        [JsonProperty("bans")]
        public TeamBans[] Bans { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Baron kill.
        /// </summary>
        [JsonProperty("firstBaron")]
        public bool FirstBaron { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Dragon kill.
        /// </summary>
        [JsonProperty("firstDragon")]
        public bool FirstDragon { get; set; }
        /// <summary>
        /// For Dominion matches, specifies the points the team had at game end.
        /// </summary>
        [JsonProperty("dominionVictoryScore")]
        public int DominionVictoryScore { get; set; }
        /// <summary>
        /// Number of times the team killed Dragon.
        /// </summary>
        [JsonProperty("dragonKills")]
        public int DragonKills { get; set; }
        /// <summary>
        /// Number of times the team killed Baron.
        /// </summary>
        [JsonProperty("baronKills")]
        public int BaronKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first inhibitor.
        /// </summary>
        [JsonProperty("firstInhibitor")]
        public bool FirstInhibitor { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first tower.
        /// </summary>
        [JsonProperty("firstTower")]
        public bool FirstTower { get; set; }
        /// <summary>
        /// Number of times the team killed Vilemaw.
        /// </summary>
        [JsonProperty("vilemawKills")]
        public int VilemawKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Rift Herald kill.
        /// </summary>
        [JsonProperty("firstRiftHerald")]
        public bool FirstRiftHerald { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        /// <summary>
        /// String indicating whether or not the team won. There are only two values visibile in public match history.<para />
        /// (Legal values:  Fail,  Win)
        /// </summary>
        [JsonProperty("win")]
        public string Win { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamStats("
                + "TowerKills: " + TowerKills + ", "
                + "RiftHeraldKills: " + RiftHeraldKills + ", "
                + "FirstBlood: " + FirstBlood + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "Bans: " + Bans + ", "
                + "FirstBaron: " + FirstBaron + ", "
                + "FirstDragon: " + FirstDragon + ", "
                + "DominionVictoryScore: " + DominionVictoryScore + ", "
                + "DragonKills: " + DragonKills + ", "
                + "BaronKills: " + BaronKills + ", "
                + "FirstInhibitor: " + FirstInhibitor + ", "
                + "FirstTower: " + FirstTower + ", "
                + "VilemawKills: " + VilemawKills + ", "
                + "FirstRiftHerald: " + FirstRiftHerald + ", "
                + "TeamId: " + TeamId + ", "
                + "Win: " + Win + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// TeamBans data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamBans
    {
        public TeamBans()
        {}
        /// <summary>
        /// Banned championId.
        /// </summary>
        [JsonProperty("championId")]
        public int ChampionId { get; set; }
        /// <summary>
        /// Turn during which the champion was banned.
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamBans("
                + "ChampionId: " + ChampionId + ", "
                + "PickTurn: " + PickTurn + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
        public Participant()
        {}
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("championId")]
        public int ChampionId { get; set; }
        /// <summary>
        /// List of legacy Rune information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("runes")]
        public Rune[] Runes { get; set; }
        /// <summary>
        /// Participant statistics.
        /// </summary>
        [JsonProperty("stats")]
        public ParticipantStats Stats { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        /// <summary>
        /// Participant timeline data.
        /// </summary>
        [JsonProperty("timeline")]
        public ParticipantTimeline Timeline { get; set; }
        /// <summary>
        /// First Summoner Spell id.
        /// </summary>
        [JsonProperty("spell1Id")]
        public int Spell1Id { get; set; }
        /// <summary>
        /// Second Summoner Spell id.
        /// </summary>
        [JsonProperty("spell2Id")]
        public int Spell2Id { get; set; }
        /// <summary>
        /// Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.<para />
        /// (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
        /// </summary>
        [JsonProperty("highestAchievedSeasonTier")]
        public string HighestAchievedSeasonTier { get; set; }
        /// <summary>
        /// List of legacy Mastery information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("masteries")]
        public Mastery[] Masteries { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "ParticipantId: " + ParticipantId + ", "
                + "ChampionId: " + ChampionId + ", "
                + "Runes: " + Runes + ", "
                + "Stats: " + Stats + ", "
                + "TeamId: " + TeamId + ", "
                + "Timeline: " + Timeline + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "HighestAchievedSeasonTier: " + HighestAchievedSeasonTier + ", "
                + "Masteries: " + Masteries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Rune data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Rune
    {
        public Rune()
        {}
        [JsonProperty("runeId")]
        public int RuneId { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Rune("
                + "RuneId: " + RuneId + ", "
                + "Rank: " + Rank + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantStats
    {
        public ParticipantStats()
        {}
        [JsonProperty("item0")]
        public int Item0 { get; set; }
        [JsonProperty("item2")]
        public int Item2 { get; set; }
        [JsonProperty("totalUnitsHealed")]
        public int TotalUnitsHealed { get; set; }
        [JsonProperty("item1")]
        public int Item1 { get; set; }
        [JsonProperty("largestMultiKill")]
        public int LargestMultiKill { get; set; }
        [JsonProperty("goldEarned")]
        public int GoldEarned { get; set; }
        [JsonProperty("firstInhibitorKill")]
        public bool FirstInhibitorKill { get; set; }
        [JsonProperty("physicalDamageTaken")]
        public long PhysicalDamageTaken { get; set; }
        [JsonProperty("nodeNeutralizeAssist")]
        public int NodeNeutralizeAssist { get; set; }
        [JsonProperty("totalPlayerScore")]
        public int TotalPlayerScore { get; set; }
        [JsonProperty("champLevel")]
        public int ChampLevel { get; set; }
        [JsonProperty("damageDealtToObjectives")]
        public long DamageDealtToObjectives { get; set; }
        [JsonProperty("totalDamageTaken")]
        public long TotalDamageTaken { get; set; }
        [JsonProperty("neutralMinionsKilled")]
        public int NeutralMinionsKilled { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("tripleKills")]
        public int TripleKills { get; set; }
        [JsonProperty("magicDamageDealtToChampions")]
        public long MagicDamageDealtToChampions { get; set; }
        [JsonProperty("wardsKilled")]
        public int WardsKilled { get; set; }
        [JsonProperty("pentaKills")]
        public int PentaKills { get; set; }
        [JsonProperty("damageSelfMitigated")]
        public long DamageSelfMitigated { get; set; }
        [JsonProperty("largestCriticalStrike")]
        public int LargestCriticalStrike { get; set; }
        [JsonProperty("nodeNeutralize")]
        public int NodeNeutralize { get; set; }
        [JsonProperty("totalTimeCrowdControlDealt")]
        public int TotalTimeCrowdControlDealt { get; set; }
        [JsonProperty("firstTowerKill")]
        public bool FirstTowerKill { get; set; }
        [JsonProperty("magicDamageDealt")]
        public long MagicDamageDealt { get; set; }
        [JsonProperty("totalScoreRank")]
        public int TotalScoreRank { get; set; }
        [JsonProperty("nodeCapture")]
        public int NodeCapture { get; set; }
        [JsonProperty("wardsPlaced")]
        public int WardsPlaced { get; set; }
        [JsonProperty("totalDamageDealt")]
        public long TotalDamageDealt { get; set; }
        [JsonProperty("timeCCingOthers")]
        public long TimeCCingOthers { get; set; }
        [JsonProperty("magicalDamageTaken")]
        public long MagicalDamageTaken { get; set; }
        [JsonProperty("largestKillingSpree")]
        public int LargestKillingSpree { get; set; }
        [JsonProperty("totalDamageDealtToChampions")]
        public long TotalDamageDealtToChampions { get; set; }
        [JsonProperty("physicalDamageDealtToChampions")]
        public long PhysicalDamageDealtToChampions { get; set; }
        [JsonProperty("neutralMinionsKilledTeamJungle")]
        public int NeutralMinionsKilledTeamJungle { get; set; }
        [JsonProperty("totalMinionsKilled")]
        public int TotalMinionsKilled { get; set; }
        [JsonProperty("firstInhibitorAssist")]
        public bool FirstInhibitorAssist { get; set; }
        [JsonProperty("visionWardsBoughtInGame")]
        public int VisionWardsBoughtInGame { get; set; }
        [JsonProperty("objectivePlayerScore")]
        public int ObjectivePlayerScore { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("firstTowerAssist")]
        public bool FirstTowerAssist { get; set; }
        [JsonProperty("combatPlayerScore")]
        public int CombatPlayerScore { get; set; }
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        [JsonProperty("turretKills")]
        public int TurretKills { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("trueDamageTaken")]
        public long TrueDamageTaken { get; set; }
        [JsonProperty("firstBloodAssist")]
        public bool FirstBloodAssist { get; set; }
        [JsonProperty("nodeCaptureAssist")]
        public int NodeCaptureAssist { get; set; }
        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("teamObjective")]
        public int TeamObjective { get; set; }
        [JsonProperty("altarsNeutralized")]
        public int AltarsNeutralized { get; set; }
        [JsonProperty("goldSpent")]
        public int GoldSpent { get; set; }
        [JsonProperty("damageDealtToTurrets")]
        public long DamageDealtToTurrets { get; set; }
        [JsonProperty("altarsCaptured")]
        public int AltarsCaptured { get; set; }
        [JsonProperty("win")]
        public bool Win { get; set; }
        [JsonProperty("totalHeal")]
        public long TotalHeal { get; set; }
        [JsonProperty("unrealKills")]
        public int UnrealKills { get; set; }
        [JsonProperty("visionScore")]
        public long VisionScore { get; set; }
        [JsonProperty("physicalDamageDealt")]
        public long PhysicalDamageDealt { get; set; }
        [JsonProperty("firstBloodKill")]
        public bool FirstBloodKill { get; set; }
        [JsonProperty("longestTimeSpentLiving")]
        public int LongestTimeSpentLiving { get; set; }
        [JsonProperty("killingSprees")]
        public int KillingSprees { get; set; }
        [JsonProperty("sightWardsBoughtInGame")]
        public int SightWardsBoughtInGame { get; set; }
        [JsonProperty("trueDamageDealtToChampions")]
        public long TrueDamageDealtToChampions { get; set; }
        [JsonProperty("neutralMinionsKilledEnemyJungle")]
        public int NeutralMinionsKilledEnemyJungle { get; set; }
        [JsonProperty("doubleKills")]
        public int DoubleKills { get; set; }
        [JsonProperty("trueDamageDealt")]
        public long TrueDamageDealt { get; set; }
        [JsonProperty("quadraKills")]
        public int QuadraKills { get; set; }
        [JsonProperty("item4")]
        public int Item4 { get; set; }
        [JsonProperty("item3")]
        public int Item3 { get; set; }
        [JsonProperty("item6")]
        public int Item6 { get; set; }
        [JsonProperty("item5")]
        public int Item5 { get; set; }
        [JsonProperty("playerScore0")]
        public int PlayerScore0 { get; set; }
        [JsonProperty("playerScore1")]
        public int PlayerScore1 { get; set; }
        [JsonProperty("playerScore2")]
        public int PlayerScore2 { get; set; }
        [JsonProperty("playerScore3")]
        public int PlayerScore3 { get; set; }
        [JsonProperty("playerScore4")]
        public int PlayerScore4 { get; set; }
        [JsonProperty("playerScore5")]
        public int PlayerScore5 { get; set; }
        [JsonProperty("playerScore6")]
        public int PlayerScore6 { get; set; }
        [JsonProperty("playerScore7")]
        public int PlayerScore7 { get; set; }
        [JsonProperty("playerScore8")]
        public int PlayerScore8 { get; set; }
        [JsonProperty("playerScore9")]
        public int PlayerScore9 { get; set; }
        /// <summary>
        /// Primary path keystone rune.
        /// </summary>
        [JsonProperty("perk0")]
        public int Perk0 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var1")]
        public int Perk0Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var2")]
        public int Perk0Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var3")]
        public int Perk0Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk1")]
        public int Perk1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var1")]
        public int Perk1Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var2")]
        public int Perk1Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var3")]
        public int Perk1Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk2")]
        public int Perk2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var1")]
        public int Perk2Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var2")]
        public int Perk2Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var3")]
        public int Perk2Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk3")]
        public int Perk3 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var1")]
        public int Perk3Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var2")]
        public int Perk3Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var3")]
        public int Perk3Var3 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk4")]
        public int Perk4 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var1")]
        public int Perk4Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var2")]
        public int Perk4Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var3")]
        public int Perk4Var3 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk5")]
        public int Perk5 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var1")]
        public int Perk5Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var2")]
        public int Perk5Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var3")]
        public int Perk5Var3 { get; set; }
        /// <summary>
        /// Primary rune path
        /// </summary>
        [JsonProperty("perkPrimaryStyle")]
        public int PerkPrimaryStyle { get; set; }
        /// <summary>
        /// Secondary rune path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public int PerkSubStyle { get; set; }
        /// <summary>
        /// Stat rune
        /// </summary>
        [JsonProperty("statPerk0")]
        public int StatPerk0 { get; set; }
        /// <summary>
        /// Stat rune
        /// </summary>
        [JsonProperty("statPerk1")]
        public int StatPerk1 { get; set; }
        /// <summary>
        /// Stat rune
        /// </summary>
        [JsonProperty("statPerk2")]
        public int StatPerk2 { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantStats("
                + "Item0: " + Item0 + ", "
                + "Item2: " + Item2 + ", "
                + "TotalUnitsHealed: " + TotalUnitsHealed + ", "
                + "Item1: " + Item1 + ", "
                + "LargestMultiKill: " + LargestMultiKill + ", "
                + "GoldEarned: " + GoldEarned + ", "
                + "FirstInhibitorKill: " + FirstInhibitorKill + ", "
                + "PhysicalDamageTaken: " + PhysicalDamageTaken + ", "
                + "NodeNeutralizeAssist: " + NodeNeutralizeAssist + ", "
                + "TotalPlayerScore: " + TotalPlayerScore + ", "
                + "ChampLevel: " + ChampLevel + ", "
                + "DamageDealtToObjectives: " + DamageDealtToObjectives + ", "
                + "TotalDamageTaken: " + TotalDamageTaken + ", "
                + "NeutralMinionsKilled: " + NeutralMinionsKilled + ", "
                + "Deaths: " + Deaths + ", "
                + "TripleKills: " + TripleKills + ", "
                + "MagicDamageDealtToChampions: " + MagicDamageDealtToChampions + ", "
                + "WardsKilled: " + WardsKilled + ", "
                + "PentaKills: " + PentaKills + ", "
                + "DamageSelfMitigated: " + DamageSelfMitigated + ", "
                + "LargestCriticalStrike: " + LargestCriticalStrike + ", "
                + "NodeNeutralize: " + NodeNeutralize + ", "
                + "TotalTimeCrowdControlDealt: " + TotalTimeCrowdControlDealt + ", "
                + "FirstTowerKill: " + FirstTowerKill + ", "
                + "MagicDamageDealt: " + MagicDamageDealt + ", "
                + "TotalScoreRank: " + TotalScoreRank + ", "
                + "NodeCapture: " + NodeCapture + ", "
                + "WardsPlaced: " + WardsPlaced + ", "
                + "TotalDamageDealt: " + TotalDamageDealt + ", "
                + "TimeCCingOthers: " + TimeCCingOthers + ", "
                + "MagicalDamageTaken: " + MagicalDamageTaken + ", "
                + "LargestKillingSpree: " + LargestKillingSpree + ", "
                + "TotalDamageDealtToChampions: " + TotalDamageDealtToChampions + ", "
                + "PhysicalDamageDealtToChampions: " + PhysicalDamageDealtToChampions + ", "
                + "NeutralMinionsKilledTeamJungle: " + NeutralMinionsKilledTeamJungle + ", "
                + "TotalMinionsKilled: " + TotalMinionsKilled + ", "
                + "FirstInhibitorAssist: " + FirstInhibitorAssist + ", "
                + "VisionWardsBoughtInGame: " + VisionWardsBoughtInGame + ", "
                + "ObjectivePlayerScore: " + ObjectivePlayerScore + ", "
                + "Kills: " + Kills + ", "
                + "FirstTowerAssist: " + FirstTowerAssist + ", "
                + "CombatPlayerScore: " + CombatPlayerScore + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "TurretKills: " + TurretKills + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "TrueDamageTaken: " + TrueDamageTaken + ", "
                + "FirstBloodAssist: " + FirstBloodAssist + ", "
                + "NodeCaptureAssist: " + NodeCaptureAssist + ", "
                + "Assists: " + Assists + ", "
                + "TeamObjective: " + TeamObjective + ", "
                + "AltarsNeutralized: " + AltarsNeutralized + ", "
                + "GoldSpent: " + GoldSpent + ", "
                + "DamageDealtToTurrets: " + DamageDealtToTurrets + ", "
                + "AltarsCaptured: " + AltarsCaptured + ", "
                + "Win: " + Win + ", "
                + "TotalHeal: " + TotalHeal + ", "
                + "UnrealKills: " + UnrealKills + ", "
                + "VisionScore: " + VisionScore + ", "
                + "PhysicalDamageDealt: " + PhysicalDamageDealt + ", "
                + "FirstBloodKill: " + FirstBloodKill + ", "
                + "LongestTimeSpentLiving: " + LongestTimeSpentLiving + ", "
                + "KillingSprees: " + KillingSprees + ", "
                + "SightWardsBoughtInGame: " + SightWardsBoughtInGame + ", "
                + "TrueDamageDealtToChampions: " + TrueDamageDealtToChampions + ", "
                + "NeutralMinionsKilledEnemyJungle: " + NeutralMinionsKilledEnemyJungle + ", "
                + "DoubleKills: " + DoubleKills + ", "
                + "TrueDamageDealt: " + TrueDamageDealt + ", "
                + "QuadraKills: " + QuadraKills + ", "
                + "Item4: " + Item4 + ", "
                + "Item3: " + Item3 + ", "
                + "Item6: " + Item6 + ", "
                + "Item5: " + Item5 + ", "
                + "PlayerScore0: " + PlayerScore0 + ", "
                + "PlayerScore1: " + PlayerScore1 + ", "
                + "PlayerScore2: " + PlayerScore2 + ", "
                + "PlayerScore3: " + PlayerScore3 + ", "
                + "PlayerScore4: " + PlayerScore4 + ", "
                + "PlayerScore5: " + PlayerScore5 + ", "
                + "PlayerScore6: " + PlayerScore6 + ", "
                + "PlayerScore7: " + PlayerScore7 + ", "
                + "PlayerScore8: " + PlayerScore8 + ", "
                + "PlayerScore9: " + PlayerScore9 + ", "
                + "Perk0: " + Perk0 + ", "
                + "Perk0Var1: " + Perk0Var1 + ", "
                + "Perk0Var2: " + Perk0Var2 + ", "
                + "Perk0Var3: " + Perk0Var3 + ", "
                + "Perk1: " + Perk1 + ", "
                + "Perk1Var1: " + Perk1Var1 + ", "
                + "Perk1Var2: " + Perk1Var2 + ", "
                + "Perk1Var3: " + Perk1Var3 + ", "
                + "Perk2: " + Perk2 + ", "
                + "Perk2Var1: " + Perk2Var1 + ", "
                + "Perk2Var2: " + Perk2Var2 + ", "
                + "Perk2Var3: " + Perk2Var3 + ", "
                + "Perk3: " + Perk3 + ", "
                + "Perk3Var1: " + Perk3Var1 + ", "
                + "Perk3Var2: " + Perk3Var2 + ", "
                + "Perk3Var3: " + Perk3Var3 + ", "
                + "Perk4: " + Perk4 + ", "
                + "Perk4Var1: " + Perk4Var1 + ", "
                + "Perk4Var2: " + Perk4Var2 + ", "
                + "Perk4Var3: " + Perk4Var3 + ", "
                + "Perk5: " + Perk5 + ", "
                + "Perk5Var1: " + Perk5Var1 + ", "
                + "Perk5Var2: " + Perk5Var2 + ", "
                + "Perk5Var3: " + Perk5Var3 + ", "
                + "PerkPrimaryStyle: " + PerkPrimaryStyle + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "StatPerk0: " + StatPerk0 + ", "
                + "StatPerk1: " + StatPerk1 + ", "
                + "StatPerk2: " + StatPerk2 + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantTimeline
    {
        public ParticipantTimeline()
        {}
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// Creep score difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("csDiffPerMinDeltas")]
        public IDictionary<string, double> CsDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Damage taken for a specified period.
        /// </summary>
        [JsonProperty("damageTakenPerMinDeltas")]
        public IDictionary<string, double> DamageTakenPerMinDeltas { get; set; }
        /// <summary>
        /// Participant's calculated role.<para />
        /// (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; }
        /// <summary>
        /// Damage taken difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("damageTakenDiffPerMinDeltas")]
        public IDictionary<string, double> DamageTakenDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Experience change for a specified period.
        /// </summary>
        [JsonProperty("xpPerMinDeltas")]
        public IDictionary<string, double> XpPerMinDeltas { get; set; }
        /// <summary>
        /// Experience difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("xpDiffPerMinDeltas")]
        public IDictionary<string, double> XpDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Participant's calculated lane. MID and BOT are legacy values.<para />
        /// (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
        /// </summary>
        [JsonProperty("lane")]
        public string Lane { get; set; }
        /// <summary>
        /// Creeps for a specified period.
        /// </summary>
        [JsonProperty("creepsPerMinDeltas")]
        public IDictionary<string, double> CreepsPerMinDeltas { get; set; }
        /// <summary>
        /// Gold for a specified period.
        /// </summary>
        [JsonProperty("goldPerMinDeltas")]
        public IDictionary<string, double> GoldPerMinDeltas { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantTimeline("
                + "ParticipantId: " + ParticipantId + ", "
                + "CsDiffPerMinDeltas: " + CsDiffPerMinDeltas + ", "
                + "DamageTakenPerMinDeltas: " + DamageTakenPerMinDeltas + ", "
                + "Role: " + Role + ", "
                + "DamageTakenDiffPerMinDeltas: " + DamageTakenDiffPerMinDeltas + ", "
                + "XpPerMinDeltas: " + XpPerMinDeltas + ", "
                + "XpDiffPerMinDeltas: " + XpDiffPerMinDeltas + ", "
                + "Lane: " + Lane + ", "
                + "CreepsPerMinDeltas: " + CreepsPerMinDeltas + ", "
                + "GoldPerMinDeltas: " + GoldPerMinDeltas + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Mastery data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Mastery
    {
        public Mastery()
        {}
        [JsonProperty("rank")]
        public int Rank { get; set; }
        [JsonProperty("masteryId")]
        public int MasteryId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Mastery("
                + "Rank: " + Rank + ", "
                + "MasteryId: " + MasteryId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Matchlist data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Matchlist
    {
        public Matchlist()
        {}
        [JsonProperty("startIndex")]
        public int StartIndex { get; set; }
        /// <summary>
        /// There is a known issue that this field doesn't correctly return the total number of games that match the parameters of the request. Please paginate using beginIndex until you reach the end of a player's matchlist.
        /// </summary>
        [JsonProperty("totalGames")]
        public int TotalGames { get; set; }
        [JsonProperty("endIndex")]
        public int EndIndex { get; set; }
        [JsonProperty("matches")]
        public MatchReference[] Matches { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Matchlist("
                + "StartIndex: " + StartIndex + ", "
                + "TotalGames: " + TotalGames + ", "
                + "EndIndex: " + EndIndex + ", "
                + "Matches: " + Matches + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchReference data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchReference
    {
        public MatchReference()
        {}
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("season")]
        public int Season { get; set; }
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        [JsonProperty("champion")]
        public int Champion { get; set; }
        [JsonProperty("queue")]
        public int Queue { get; set; }
        [JsonProperty("lane")]
        public string Lane { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchReference("
                + "GameId: " + GameId + ", "
                + "Role: " + Role + ", "
                + "Season: " + Season + ", "
                + "PlatformId: " + PlatformId + ", "
                + "Champion: " + Champion + ", "
                + "Queue: " + Queue + ", "
                + "Lane: " + Lane + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimeline
    {
        public MatchTimeline()
        {}
        [JsonProperty("frames")]
        public MatchFrame[] Frames { get; set; }
        [JsonProperty("frameInterval")]
        public long FrameInterval { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimeline("
                + "Frames: " + Frames + ", "
                + "FrameInterval: " + FrameInterval + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchFrame
    {
        public MatchFrame()
        {}
        [JsonProperty("participantFrames")]
        public IDictionary<string, MatchParticipantFrame> ParticipantFrames { get; set; }
        [JsonProperty("events")]
        public MatchEvent[] Events { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchFrame("
                + "ParticipantFrames: " + ParticipantFrames + ", "
                + "Events: " + Events + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchParticipantFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchParticipantFrame
    {
        public MatchParticipantFrame()
        {}
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("minionsKilled")]
        public int MinionsKilled { get; set; }
        [JsonProperty("teamScore")]
        public int TeamScore { get; set; }
        [JsonProperty("dominionScore")]
        public int DominionScore { get; set; }
        [JsonProperty("totalGold")]
        public int TotalGold { get; set; }
        [JsonProperty("level")]
        public int Level { get; set; }
        [JsonProperty("xp")]
        public int Xp { get; set; }
        [JsonProperty("currentGold")]
        public int CurrentGold { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("jungleMinionsKilled")]
        public int JungleMinionsKilled { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchParticipantFrame("
                + "ParticipantId: " + ParticipantId + ", "
                + "MinionsKilled: " + MinionsKilled + ", "
                + "TeamScore: " + TeamScore + ", "
                + "DominionScore: " + DominionScore + ", "
                + "TotalGold: " + TotalGold + ", "
                + "Level: " + Level + ", "
                + "Xp: " + Xp + ", "
                + "CurrentGold: " + CurrentGold + ", "
                + "Position: " + Position + ", "
                + "JungleMinionsKilled: " + JungleMinionsKilled + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchPosition data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchPosition
    {
        public MatchPosition()
        {}
        [JsonProperty("x")]
        public int X { get; set; }
        [JsonProperty("y")]
        public int Y { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchPosition("
                + "X: " + X + ", "
                + "Y: " + Y + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchEvent
    {
        public MatchEvent()
        {}
        [JsonProperty("laneType")]
        public string LaneType { get; set; }
        [JsonProperty("skillSlot")]
        public int SkillSlot { get; set; }
        [JsonProperty("ascendedType")]
        public string AscendedType { get; set; }
        [JsonProperty("creatorId")]
        public int CreatorId { get; set; }
        [JsonProperty("afterId")]
        public int AfterId { get; set; }
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("levelUpType")]
        public string LevelUpType { get; set; }
        [JsonProperty("wardType")]
        public string WardType { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("towerType")]
        public string TowerType { get; set; }
        [JsonProperty("itemId")]
        public int ItemId { get; set; }
        [JsonProperty("beforeId")]
        public int BeforeId { get; set; }
        [JsonProperty("pointCaptured")]
        public string PointCaptured { get; set; }
        [JsonProperty("monsterType")]
        public string MonsterType { get; set; }
        [JsonProperty("monsterSubType")]
        public string MonsterSubType { get; set; }
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("killerId")]
        public int KillerId { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
        [JsonProperty("assistingParticipantIds")]
        public int[] AssistingParticipantIds { get; set; }
        [JsonProperty("buildingType")]
        public string BuildingType { get; set; }
        [JsonProperty("victimId")]
        public int VictimId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchEvent("
                + "LaneType: " + LaneType + ", "
                + "SkillSlot: " + SkillSlot + ", "
                + "AscendedType: " + AscendedType + ", "
                + "CreatorId: " + CreatorId + ", "
                + "AfterId: " + AfterId + ", "
                + "EventType: " + EventType + ", "
                + "Type: " + Type + ", "
                + "LevelUpType: " + LevelUpType + ", "
                + "WardType: " + WardType + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "TowerType: " + TowerType + ", "
                + "ItemId: " + ItemId + ", "
                + "BeforeId: " + BeforeId + ", "
                + "PointCaptured: " + PointCaptured + ", "
                + "MonsterType: " + MonsterType + ", "
                + "MonsterSubType: " + MonsterSubType + ", "
                + "TeamId: " + TeamId + ", "
                + "Position: " + Position + ", "
                + "KillerId: " + KillerId + ", "
                + "Timestamp: " + Timestamp + ", "
                + "AssistingParticipantIds: " + AssistingParticipantIds + ", "
                + "BuildingType: " + BuildingType + ", "
                + "VictimId: " + VictimId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v5
namespace MingweiSamuel.Camille.MatchV5
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// UNKNOWN TYPE.
    /// </summary>
    public class Match
    {
        public Match()
        {}

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v5
namespace MingweiSamuel.Camille.MatchV5
{
#nullable disable
    /// <summary>
    /// MatchTimeline data object. This class is automatically generated.<para />
    /// UNKNOWN TYPE.
    /// </summary>
    public class MatchTimeline
    {
        public MatchTimeline()
        {}

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimeline("
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// CurrentGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameInfo
    {
        public CurrentGameInfo()
        {}
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The game type
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public long MapId { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// The game mode
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public long GameQueueConfigId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public CurrentGameParticipant[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameInfo("
                + "GameId: " + GameId + ", "
                + "GameType: " + GameType + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "MapId: " + MapId + ", "
                + "GameLength: " + GameLength + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// BannedChampion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class BannedChampion
    {
        public BannedChampion()
        {}
        /// <summary>
        /// The turn during which the champion was banned
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }
        /// <summary>
        /// The ID of the banned champion
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// The ID of the team that banned the champion
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "BannedChampion("
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Observer data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Observer
    {
        public Observer()
        {}
        /// <summary>
        /// Key used to decrypt the spectator grid game data for playback
        /// </summary>
        [JsonProperty("encryptionKey")]
        public string EncryptionKey { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Observer("
                + "EncryptionKey: " + EncryptionKey + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// CurrentGameParticipant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameParticipant
    {
        public CurrentGameParticipant()
        {}
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// Perks/Runes Reforged Information
        /// </summary>
        [JsonProperty("perks")]
        public Perks Perks { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The encrypted summoner ID of this participant
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// List of Game Customizations
        /// </summary>
        [JsonProperty("gameCustomizationObjects")]
        public GameCustomizationObject[] GameCustomizationObjects { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameParticipant("
                + "ChampionId: " + ChampionId + ", "
                + "Perks: " + Perks + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "Bot: " + Bot + ", "
                + "TeamId: " + TeamId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "SummonerId: " + SummonerId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "GameCustomizationObjects: " + GameCustomizationObjects + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Perks data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Perks
    {
        public Perks()
        {}
        /// <summary>
        /// IDs of the perks/runes assigned.
        /// </summary>
        [JsonProperty("perkIds")]
        public long[] PerkIds { get; set; }
        /// <summary>
        /// Primary runes path
        /// </summary>
        [JsonProperty("perkStyle")]
        public long PerkStyle { get; set; }
        /// <summary>
        /// Secondary runes path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public long PerkSubStyle { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Perks("
                + "PerkIds: " + PerkIds + ", "
                + "PerkStyle: " + PerkStyle + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// GameCustomizationObject data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class GameCustomizationObject
    {
        public GameCustomizationObject()
        {}
        /// <summary>
        /// Category identifier for Game Customization
        /// </summary>
        [JsonProperty("category")]
        public string Category { get; set; }
        /// <summary>
        /// Game Customization content
        /// </summary>
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "GameCustomizationObject("
                + "Category: " + Category + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// FeaturedGames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGames
    {
        public FeaturedGames()
        {}
        /// <summary>
        /// The list of featured games
        /// </summary>
        [JsonProperty("gameList")]
        public FeaturedGameInfo[] GameList { get; set; }
        /// <summary>
        /// The suggested interval to wait before requesting FeaturedGames again
        /// </summary>
        [JsonProperty("clientRefreshInterval")]
        public long ClientRefreshInterval { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGames("
                + "GameList: " + GameList + ", "
                + "ClientRefreshInterval: " + ClientRefreshInterval + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// FeaturedGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGameInfo
    {
        public FeaturedGameInfo()
        {}
        /// <summary>
        /// The game mode<para />
        /// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public long MapId { get; set; }
        /// <summary>
        /// The game type<para />
        /// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public long GameQueueConfigId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGameInfo("
                + "GameMode: " + GameMode + ", "
                + "GameLength: " + GameLength + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "GameId: " + GameId + ", "
                + "Observers: " + Observers + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "Participants: " + Participants + ", "
                + "PlatformId: " + PlatformId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
        public Participant()
        {}
        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "Bot: " + Bot + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// summoner-v4
namespace MingweiSamuel.Camille.SummonerV4
{
#nullable disable
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {
        public Summoner()
        {}
        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change.
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner("
                + "AccountId: " + AccountId + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Name: " + Name + ", "
                + "Id: " + Id + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
#nullable disable
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {
        public LeagueList()
        {}
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public string Queue { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList("
                + "LeagueId: " + LeagueId + ", "
                + "Entries: " + Entries + ", "
                + "Tier: " + Tier + ", "
                + "Name: " + Name + ", "
                + "Queue: " + Queue + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
#nullable disable
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {
        public LeagueItem()
        {}
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem("
                + "FreshBlood: " + FreshBlood + ", "
                + "Wins: " + Wins + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Inactive: " + Inactive + ", "
                + "Veteran: " + Veteran + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Losses: " + Losses + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
#nullable disable
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
        public MiniSeries()
        {}
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries("
                + "Losses: " + Losses + ", "
                + "Progress: " + Progress + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
#nullable disable
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
        public LeagueEntry()
        {}
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("queueType")]
        public string QueueType { get; set; }
        /// <summary>
        /// Only included for the RANKED_TFT_TURBO queueType.<para />
        /// (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
        /// </summary>
        [JsonProperty("ratedTier")]
        public string RatedTier { get; set; }
        /// <summary>
        /// Only included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("ratedRating")]
        public int RatedRating { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("tier")]
        public string Tier { get; set; }
        /// <summary>
        /// A player's division within a tier. Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("rank")]
        public string Rank { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        /// <summary>
        /// Not included for the RANKED_TFT_TURBO queueType.
        /// </summary>
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry("
                + "LeagueId: " + LeagueId + ", "
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "QueueType: " + QueueType + ", "
                + "RatedTier: " + RatedTier + ", "
                + "RatedRating: " + RatedRating + ", "
                + "Tier: " + Tier + ", "
                + "Rank: " + Rank + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "Wins: " + Wins + ", "
                + "Losses: " + Losses + ", "
                + "HotStreak: " + HotStreak + ", "
                + "Veteran: " + Veteran + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
#nullable disable
    /// <summary>
    /// TopRatedLadderEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TopRatedLadderEntry
    {
        public TopRatedLadderEntry()
        {}
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
        /// </summary>
        [JsonProperty("ratedTier")]
        public string RatedTier { get; set; }
        [JsonProperty("ratedRating")]
        public int RatedRating { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("previousUpdateLadderPosition")]
        public int PreviousUpdateLadderPosition { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TopRatedLadderEntry("
                + "SummonerId: " + SummonerId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "RatedTier: " + RatedTier + ", "
                + "RatedRating: " + RatedRating + ", "
                + "Wins: " + Wins + ", "
                + "PreviousUpdateLadderPosition: " + PreviousUpdateLadderPosition + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
        public Match()
        {}
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }
        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "Metadata: " + Metadata + ", "
                + "Info: " + Info + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {
        public Metadata()
        {}
        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("data_version")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("match_id")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata("
                + "DataVersion: " + DataVersion + ", "
                + "MatchId: " + MatchId + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {
        public Info()
        {}
        /// <summary>
        /// Unix timestamp.
        /// </summary>
        [JsonProperty("game_datetime")]
        public long GameDatetime { get; set; }
        /// <summary>
        /// Game length in seconds.
        /// </summary>
        [JsonProperty("game_length")]
        public float GameLength { get; set; }
        /// <summary>
        /// Game variation key. Game variations documented in TFT static data.
        /// </summary>
        [JsonProperty("game_variation")]
        public string GameVariation { get; set; }
        /// <summary>
        /// Game client version.
        /// </summary>
        [JsonProperty("game_version")]
        public string GameVersion { get; set; }
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Please refer to the League of Legends documentation.
        /// </summary>
        [JsonProperty("queue_id")]
        public int QueueId { get; set; }
        /// <summary>
        /// Teamfight Tactics set number.
        /// </summary>
        [JsonProperty("tft_set_number")]
        public int TftSetNumber { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info("
                + "GameDatetime: " + GameDatetime + ", "
                + "GameLength: " + GameLength + ", "
                + "GameVariation: " + GameVariation + ", "
                + "GameVersion: " + GameVersion + ", "
                + "Participants: " + Participants + ", "
                + "QueueId: " + QueueId + ", "
                + "TftSetNumber: " + TftSetNumber + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
        public Participant()
        {}
        /// <summary>
        /// Participant's companion.
        /// </summary>
        [JsonProperty("companion")]
        public Companion Companion { get; set; }
        /// <summary>
        /// Gold left after participant was eliminated.
        /// </summary>
        [JsonProperty("gold_left")]
        public int GoldLeft { get; set; }
        /// <summary>
        /// The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
        /// </summary>
        [JsonProperty("last_round")]
        public int LastRound { get; set; }
        /// <summary>
        /// Participant Little Legend level. Note: This is not the number of active units.
        /// </summary>
        [JsonProperty("level")]
        public int Level { get; set; }
        /// <summary>
        /// Participant placement upon elimination.
        /// </summary>
        [JsonProperty("placement")]
        public int Placement { get; set; }
        /// <summary>
        /// Number of players the participant eliminated.
        /// </summary>
        [JsonProperty("players_eliminated")]
        public int PlayersEliminated { get; set; }
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// The number of seconds before the participant was eliminated.
        /// </summary>
        [JsonProperty("time_eliminated")]
        public float TimeEliminated { get; set; }
        /// <summary>
        /// Damage the participant dealt to other players.
        /// </summary>
        [JsonProperty("total_damage_to_players")]
        public int TotalDamageToPlayers { get; set; }
        /// <summary>
        /// A complete list of traits for the participant's active units.
        /// </summary>
        [JsonProperty("traits")]
        public Trait[] Traits { get; set; }
        /// <summary>
        /// A list of active units for the participant.
        /// </summary>
        [JsonProperty("units")]
        public Unit[] Units { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant("
                + "Companion: " + Companion + ", "
                + "GoldLeft: " + GoldLeft + ", "
                + "LastRound: " + LastRound + ", "
                + "Level: " + Level + ", "
                + "Placement: " + Placement + ", "
                + "PlayersEliminated: " + PlayersEliminated + ", "
                + "Puuid: " + Puuid + ", "
                + "TimeEliminated: " + TimeEliminated + ", "
                + "TotalDamageToPlayers: " + TotalDamageToPlayers + ", "
                + "Traits: " + Traits + ", "
                + "Units: " + Units + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Trait data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Trait
    {
        public Trait()
        {}
        /// <summary>
        /// Trait name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Number of units with this trait.
        /// </summary>
        [JsonProperty("num_units")]
        public int NumUnits { get; set; }
        /// <summary>
        /// Current style for this trait. (0 = No style, 1 = Bronze, 2 = Silver, 3 = Gold, 4 = Chromatic)
        /// </summary>
        [JsonProperty("style")]
        public int Style { get; set; }
        /// <summary>
        /// Current active tier for the trait.
        /// </summary>
        [JsonProperty("tier_current")]
        public int TierCurrent { get; set; }
        /// <summary>
        /// Total tiers for the trait.
        /// </summary>
        [JsonProperty("tier_total")]
        public int TierTotal { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Trait("
                + "Name: " + Name + ", "
                + "NumUnits: " + NumUnits + ", "
                + "Style: " + Style + ", "
                + "TierCurrent: " + TierCurrent + ", "
                + "TierTotal: " + TierTotal + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Unit data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Unit
    {
        public Unit()
        {}
        /// <summary>
        /// A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids.
        /// </summary>
        [JsonProperty("items")]
        public int[] Items { get; set; }
        /// <summary>
        /// This field was introduced in patch 9.22 with data_version 2.
        /// </summary>
        [JsonProperty("character_id")]
        public string CharacterId { get; set; }
        /// <summary>
        /// If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response.
        /// </summary>
        [JsonProperty("chosen")]
        public string Chosen { get; set; }
        /// <summary>
        /// Unit name. This field is often left blank.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Unit rarity. This doesn't equate to the unit cost.
        /// </summary>
        [JsonProperty("rarity")]
        public int Rarity { get; set; }
        /// <summary>
        /// Unit tier.
        /// </summary>
        [JsonProperty("tier")]
        public int Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Unit("
                + "Items: " + Items + ", "
                + "CharacterId: " + CharacterId + ", "
                + "Chosen: " + Chosen + ", "
                + "Name: " + Name + ", "
                + "Rarity: " + Rarity + ", "
                + "Tier: " + Tier + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
#nullable disable
    /// <summary>
    /// Companion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Companion
    {
        public Companion()
        {}
        [JsonProperty("skin_ID")]
        public int SkinID { get; set; }
        [JsonProperty("content_ID")]
        public string ContentID { get; set; }
        [JsonProperty("species")]
        public string Species { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Companion("
                + "SkinID: " + SkinID + ", "
                + "ContentID: " + ContentID + ", "
                + "Species: " + Species + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tft-summoner-v1
namespace MingweiSamuel.Camille.TftSummonerV1
{
#nullable disable
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {
        public Summoner()
        {}
        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change.
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner("
                + "AccountId: " + AccountId + ", "
                + "ProfileIconId: " + ProfileIconId + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Name: " + Name + ", "
                + "Id: " + Id + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
        public TournamentCodeParameters()
        {}
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string Metadata { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "Metadata: " + Metadata + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
        public LobbyEventWrapper()
        {}
        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper("
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
        public LobbyEvent()
        {}
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent("
                + "SummonerId: " + SummonerId + ", "
                + "EventType: " + EventType + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters()
        {}
        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters("
                + "Region: " + Region + ", "
                + "Url: " + Url + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters()
        {}
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters("
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
        public TournamentCodeParameters()
        {}
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string Metadata { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "Metadata: " + Metadata + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCode data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCode
    {
        public TournamentCode()
        {}
        /// <summary>
        /// The tournament code.
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }
        /// <summary>
        /// The spectator mode for the tournament code game.
        /// </summary>
        [JsonProperty("spectators")]
        public string Spectators { get; set; }
        /// <summary>
        /// The lobby name for the tournament code game.
        /// </summary>
        [JsonProperty("lobbyName")]
        public string LobbyName { get; set; }
        /// <summary>
        /// The metadata for tournament code.
        /// </summary>
        [JsonProperty("metaData")]
        public string MetaData { get; set; }
        /// <summary>
        /// The password for the tournament code game.
        /// </summary>
        [JsonProperty("password")]
        public string Password { get; set; }
        /// <summary>
        /// The team size for the tournament code game.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The provider's ID.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The pick mode for tournament code game.
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The tournament's ID.
        /// </summary>
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }
        /// <summary>
        /// The tournament code's ID.
        /// </summary>
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// The tournament code's region.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The game map for the tournament code game
        /// </summary>
        [JsonProperty("map")]
        public string Map { get; set; }
        /// <summary>
        /// The summonerIds of the participants (Encrypted)
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCode("
                + "Code: " + Code + ", "
                + "Spectators: " + Spectators + ", "
                + "LobbyName: " + LobbyName + ", "
                + "MetaData: " + MetaData + ", "
                + "Password: " + Password + ", "
                + "TeamSize: " + TeamSize + ", "
                + "ProviderId: " + ProviderId + ", "
                + "PickType: " + PickType + ", "
                + "TournamentId: " + TournamentId + ", "
                + "Id: " + Id + ", "
                + "Region: " + Region + ", "
                + "Map: " + Map + ", "
                + "Participants: " + Participants + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeUpdateParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeUpdateParameters
    {
        public TournamentCodeUpdateParameters()
        {}
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// The pick type<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The map type<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// The spectator type<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeUpdateParameters("
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "PickType: " + PickType + ", "
                + "MapType: " + MapType + ", "
                + "SpectatorType: " + SpectatorType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
        public LobbyEventWrapper()
        {}
        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper("
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
        public LobbyEvent()
        {}
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }
        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent("
                + "Timestamp: " + Timestamp + ", "
                + "EventType: " + EventType + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters()
        {}
        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters("
                + "Region: " + Region + ", "
                + "Url: " + Url + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters()
        {}
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters("
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-content-v1
namespace MingweiSamuel.Camille.ValContentV1
{
#nullable disable
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {
        public Content()
        {}
        [JsonProperty("version")]
        public string Version { get; set; }
        [JsonProperty("characters")]
        public ContentItem[] Characters { get; set; }
        [JsonProperty("maps")]
        public ContentItem[] Maps { get; set; }
        [JsonProperty("chromas")]
        public ContentItem[] Chromas { get; set; }
        [JsonProperty("skins")]
        public ContentItem[] Skins { get; set; }
        [JsonProperty("skinLevels")]
        public ContentItem[] SkinLevels { get; set; }
        [JsonProperty("equips")]
        public ContentItem[] Equips { get; set; }
        [JsonProperty("gameModes")]
        public ContentItem[] GameModes { get; set; }
        [JsonProperty("sprays")]
        public ContentItem[] Sprays { get; set; }
        [JsonProperty("sprayLevels")]
        public ContentItem[] SprayLevels { get; set; }
        [JsonProperty("charms")]
        public ContentItem[] Charms { get; set; }
        [JsonProperty("charmLevels")]
        public ContentItem[] CharmLevels { get; set; }
        [JsonProperty("playerCards")]
        public ContentItem[] PlayerCards { get; set; }
        [JsonProperty("playerTitles")]
        public ContentItem[] PlayerTitles { get; set; }
        [JsonProperty("acts")]
        public Act[] Acts { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Version: " + Version + ", "
                + "Characters: " + Characters + ", "
                + "Maps: " + Maps + ", "
                + "Chromas: " + Chromas + ", "
                + "Skins: " + Skins + ", "
                + "SkinLevels: " + SkinLevels + ", "
                + "Equips: " + Equips + ", "
                + "GameModes: " + GameModes + ", "
                + "Sprays: " + Sprays + ", "
                + "SprayLevels: " + SprayLevels + ", "
                + "Charms: " + Charms + ", "
                + "CharmLevels: " + CharmLevels + ", "
                + "PlayerCards: " + PlayerCards + ", "
                + "PlayerTitles: " + PlayerTitles + ", "
                + "Acts: " + Acts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-content-v1
namespace MingweiSamuel.Camille.ValContentV1
{
#nullable disable
    /// <summary>
    /// ContentItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ContentItem
    {
        public ContentItem()
        {}
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// This field is excluded from the response when a locale is set
        /// </summary>
        [JsonProperty("localizedNames")]
        public LocalizedNames LocalizedNames { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("assetName")]
        public string AssetName { get; set; }
        /// <summary>
        /// This field is only included for maps and game modes. These values are used in the match response.
        /// </summary>
        [JsonProperty("assetPath")]
        public string AssetPath { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ContentItem("
                + "Name: " + Name + ", "
                + "LocalizedNames: " + LocalizedNames + ", "
                + "Id: " + Id + ", "
                + "AssetName: " + AssetName + ", "
                + "AssetPath: " + AssetPath + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-content-v1
namespace MingweiSamuel.Camille.ValContentV1
{
#nullable disable
    /// <summary>
    /// LocalizedNames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LocalizedNames
    {
        public LocalizedNames()
        {}
        [JsonProperty("ar-AE")]
        public string ArAE { get; set; }
        [JsonProperty("de-DE")]
        public string DeDE { get; set; }
        [JsonProperty("en-GB")]
        public string EnGB { get; set; }
        [JsonProperty("en-US")]
        public string EnUS { get; set; }
        [JsonProperty("es-ES")]
        public string EsES { get; set; }
        [JsonProperty("es-MX")]
        public string EsMX { get; set; }
        [JsonProperty("fr-FR")]
        public string FrFR { get; set; }
        [JsonProperty("id-ID")]
        public string IdID { get; set; }
        [JsonProperty("it-IT")]
        public string ItIT { get; set; }
        [JsonProperty("ja-JP")]
        public string JaJP { get; set; }
        [JsonProperty("ko-KR")]
        public string KoKR { get; set; }
        [JsonProperty("pl-PL")]
        public string PlPL { get; set; }
        [JsonProperty("pt-BR")]
        public string PtBR { get; set; }
        [JsonProperty("ru-RU")]
        public string RuRU { get; set; }
        [JsonProperty("th-TH")]
        public string ThTH { get; set; }
        [JsonProperty("tr-TR")]
        public string TrTR { get; set; }
        [JsonProperty("vi-VN")]
        public string ViVN { get; set; }
        [JsonProperty("zh-CN")]
        public string ZhCN { get; set; }
        [JsonProperty("zh-TW")]
        public string ZhTW { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LocalizedNames("
                + "ArAE: " + ArAE + ", "
                + "DeDE: " + DeDE + ", "
                + "EnGB: " + EnGB + ", "
                + "EnUS: " + EnUS + ", "
                + "EsES: " + EsES + ", "
                + "EsMX: " + EsMX + ", "
                + "FrFR: " + FrFR + ", "
                + "IdID: " + IdID + ", "
                + "ItIT: " + ItIT + ", "
                + "JaJP: " + JaJP + ", "
                + "KoKR: " + KoKR + ", "
                + "PlPL: " + PlPL + ", "
                + "PtBR: " + PtBR + ", "
                + "RuRU: " + RuRU + ", "
                + "ThTH: " + ThTH + ", "
                + "TrTR: " + TrTR + ", "
                + "ViVN: " + ViVN + ", "
                + "ZhCN: " + ZhCN + ", "
                + "ZhTW: " + ZhTW + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-content-v1
namespace MingweiSamuel.Camille.ValContentV1
{
#nullable disable
    /// <summary>
    /// Act data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Act
    {
        public Act()
        {}
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// This field is excluded from the response when a locale is set
        /// </summary>
        [JsonProperty("localizedNames")]
        public LocalizedNames LocalizedNames { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("isActive")]
        public bool IsActive { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Act("
                + "Name: " + Name + ", "
                + "LocalizedNames: " + LocalizedNames + ", "
                + "Id: " + Id + ", "
                + "IsActive: " + IsActive + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
        public Match()
        {}
        [JsonProperty("matchInfo")]
        public MatchInfo MatchInfo { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }
        [JsonProperty("coaches")]
        public Coach[] Coaches { get; set; }
        [JsonProperty("teams")]
        public Team[] Teams { get; set; }
        [JsonProperty("roundResults")]
        public RoundResult[] RoundResults { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match("
                + "MatchInfo: " + MatchInfo + ", "
                + "Players: " + Players + ", "
                + "Coaches: " + Coaches + ", "
                + "Teams: " + Teams + ", "
                + "RoundResults: " + RoundResults + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// MatchInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchInfo
    {
        public MatchInfo()
        {}
        [JsonProperty("matchId")]
        public string MatchId { get; set; }
        [JsonProperty("mapId")]
        public string MapId { get; set; }
        [JsonProperty("gameLengthMillis")]
        public int GameLengthMillis { get; set; }
        [JsonProperty("gameStartMillis")]
        public long GameStartMillis { get; set; }
        [JsonProperty("provisioningFlowId")]
        public string ProvisioningFlowId { get; set; }
        [JsonProperty("isCompleted")]
        public bool IsCompleted { get; set; }
        [JsonProperty("customGameName")]
        public string CustomGameName { get; set; }
        [JsonProperty("queueId")]
        public string QueueId { get; set; }
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        [JsonProperty("isRanked")]
        public bool IsRanked { get; set; }
        [JsonProperty("seasonId")]
        public string SeasonId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchInfo("
                + "MatchId: " + MatchId + ", "
                + "MapId: " + MapId + ", "
                + "GameLengthMillis: " + GameLengthMillis + ", "
                + "GameStartMillis: " + GameStartMillis + ", "
                + "ProvisioningFlowId: " + ProvisioningFlowId + ", "
                + "IsCompleted: " + IsCompleted + ", "
                + "CustomGameName: " + CustomGameName + ", "
                + "QueueId: " + QueueId + ", "
                + "GameMode: " + GameMode + ", "
                + "IsRanked: " + IsRanked + ", "
                + "SeasonId: " + SeasonId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("gameName")]
        public string GameName { get; set; }
        [JsonProperty("tagLine")]
        public string TagLine { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }
        [JsonProperty("partyId")]
        public string PartyId { get; set; }
        [JsonProperty("characterId")]
        public string CharacterId { get; set; }
        [JsonProperty("stats")]
        public PlayerStats Stats { get; set; }
        [JsonProperty("competitiveTier")]
        public int CompetitiveTier { get; set; }
        [JsonProperty("playerCard")]
        public string PlayerCard { get; set; }
        [JsonProperty("playerTitle")]
        public string PlayerTitle { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "TeamId: " + TeamId + ", "
                + "PartyId: " + PartyId + ", "
                + "CharacterId: " + CharacterId + ", "
                + "Stats: " + Stats + ", "
                + "CompetitiveTier: " + CompetitiveTier + ", "
                + "PlayerCard: " + PlayerCard + ", "
                + "PlayerTitle: " + PlayerTitle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// PlayerStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerStats
    {
        public PlayerStats()
        {}
        [JsonProperty("score")]
        public int Score { get; set; }
        [JsonProperty("roundsPlayed")]
        public int RoundsPlayed { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("playtimeMillis")]
        public int PlaytimeMillis { get; set; }
        [JsonProperty("abilityCasts")]
        public AbilityCasts AbilityCasts { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerStats("
                + "Score: " + Score + ", "
                + "RoundsPlayed: " + RoundsPlayed + ", "
                + "Kills: " + Kills + ", "
                + "Deaths: " + Deaths + ", "
                + "Assists: " + Assists + ", "
                + "PlaytimeMillis: " + PlaytimeMillis + ", "
                + "AbilityCasts: " + AbilityCasts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// AbilityCasts data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class AbilityCasts
    {
        public AbilityCasts()
        {}
        [JsonProperty("grenadeCasts")]
        public int GrenadeCasts { get; set; }
        [JsonProperty("ability1Casts")]
        public int Ability1Casts { get; set; }
        [JsonProperty("ability2Casts")]
        public int Ability2Casts { get; set; }
        [JsonProperty("ultimateCasts")]
        public int UltimateCasts { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "AbilityCasts("
                + "GrenadeCasts: " + GrenadeCasts + ", "
                + "Ability1Casts: " + Ability1Casts + ", "
                + "Ability2Casts: " + Ability2Casts + ", "
                + "UltimateCasts: " + UltimateCasts + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Coach data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Coach
    {
        public Coach()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Coach("
                + "Puuid: " + Puuid + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Team data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Team
    {
        public Team()
        {}
        /// <summary>
        /// This is an arbitrary string. Red and Blue in bomb modes. The puuid of the player in deathmatch.
        /// </summary>
        [JsonProperty("teamId")]
        public string TeamId { get; set; }
        [JsonProperty("won")]
        public bool Won { get; set; }
        [JsonProperty("roundsPlayed")]
        public int RoundsPlayed { get; set; }
        [JsonProperty("roundsWon")]
        public int RoundsWon { get; set; }
        /// <summary>
        /// Team points scored. Number of kills in deathmatch.
        /// </summary>
        [JsonProperty("numPoints")]
        public int NumPoints { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Team("
                + "TeamId: " + TeamId + ", "
                + "Won: " + Won + ", "
                + "RoundsPlayed: " + RoundsPlayed + ", "
                + "RoundsWon: " + RoundsWon + ", "
                + "NumPoints: " + NumPoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// RoundResult data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class RoundResult
    {
        public RoundResult()
        {}
        [JsonProperty("roundNum")]
        public int RoundNum { get; set; }
        [JsonProperty("roundResult")]
        public string RoundResultstring { get; set; }
        [JsonProperty("roundCeremony")]
        public string RoundCeremony { get; set; }
        [JsonProperty("winningTeam")]
        public string WinningTeam { get; set; }
        /// <summary>
        /// PUUID of player
        /// </summary>
        [JsonProperty("bombPlanter")]
        public string BombPlanter { get; set; }
        /// <summary>
        /// PUUID of player
        /// </summary>
        [JsonProperty("bombDefuser")]
        public string BombDefuser { get; set; }
        [JsonProperty("plantRoundTime")]
        public int PlantRoundTime { get; set; }
        [JsonProperty("plantPlayerLocations")]
        public PlayerLocations[] PlantPlayerLocations { get; set; }
        [JsonProperty("plantLocation")]
        public Location PlantLocation { get; set; }
        [JsonProperty("plantSite")]
        public string PlantSite { get; set; }
        [JsonProperty("defuseRoundTime")]
        public int DefuseRoundTime { get; set; }
        [JsonProperty("defusePlayerLocations")]
        public PlayerLocations[] DefusePlayerLocations { get; set; }
        [JsonProperty("defuseLocation")]
        public Location DefuseLocation { get; set; }
        [JsonProperty("playerStats")]
        public PlayerRoundStats[] PlayerStats { get; set; }
        [JsonProperty("roundResultCode")]
        public string RoundResultCode { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "RoundResult("
                + "RoundNum: " + RoundNum + ", "
                + "RoundResultstring: " + RoundResultstring + ", "
                + "RoundCeremony: " + RoundCeremony + ", "
                + "WinningTeam: " + WinningTeam + ", "
                + "BombPlanter: " + BombPlanter + ", "
                + "BombDefuser: " + BombDefuser + ", "
                + "PlantRoundTime: " + PlantRoundTime + ", "
                + "PlantPlayerLocations: " + PlantPlayerLocations + ", "
                + "PlantLocation: " + PlantLocation + ", "
                + "PlantSite: " + PlantSite + ", "
                + "DefuseRoundTime: " + DefuseRoundTime + ", "
                + "DefusePlayerLocations: " + DefusePlayerLocations + ", "
                + "DefuseLocation: " + DefuseLocation + ", "
                + "PlayerStats: " + PlayerStats + ", "
                + "RoundResultCode: " + RoundResultCode + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// PlayerLocations data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerLocations
    {
        public PlayerLocations()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("viewRadians")]
        public float ViewRadians { get; set; }
        [JsonProperty("location")]
        public Location Location { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerLocations("
                + "Puuid: " + Puuid + ", "
                + "ViewRadians: " + ViewRadians + ", "
                + "Location: " + Location + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Location data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Location
    {
        public Location()
        {}
        [JsonProperty("x")]
        public int X { get; set; }
        [JsonProperty("y")]
        public int Y { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Location("
                + "X: " + X + ", "
                + "Y: " + Y + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// PlayerRoundStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlayerRoundStats
    {
        public PlayerRoundStats()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("kills")]
        public Kill[] Kills { get; set; }
        [JsonProperty("damage")]
        public Damage[] Damage { get; set; }
        [JsonProperty("score")]
        public int Score { get; set; }
        [JsonProperty("economy")]
        public Economy Economy { get; set; }
        [JsonProperty("ability")]
        public Ability Ability { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlayerRoundStats("
                + "Puuid: " + Puuid + ", "
                + "Kills: " + Kills + ", "
                + "Damage: " + Damage + ", "
                + "Score: " + Score + ", "
                + "Economy: " + Economy + ", "
                + "Ability: " + Ability + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Kill data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Kill
    {
        public Kill()
        {}
        [JsonProperty("timeSinceGameStartMillis")]
        public int TimeSinceGameStartMillis { get; set; }
        [JsonProperty("timeSinceRoundStartMillis")]
        public int TimeSinceRoundStartMillis { get; set; }
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("killer")]
        public string Killer { get; set; }
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("victim")]
        public string Victim { get; set; }
        [JsonProperty("victimLocation")]
        public Location VictimLocation { get; set; }
        /// <summary>
        /// List of PUUIDs
        /// </summary>
        [JsonProperty("assistants")]
        public string[] Assistants { get; set; }
        [JsonProperty("playerLocations")]
        public PlayerLocations[] PlayerLocations { get; set; }
        [JsonProperty("finishingDamage")]
        public FinishingDamage FinishingDamage { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Kill("
                + "TimeSinceGameStartMillis: " + TimeSinceGameStartMillis + ", "
                + "TimeSinceRoundStartMillis: " + TimeSinceRoundStartMillis + ", "
                + "Killer: " + Killer + ", "
                + "Victim: " + Victim + ", "
                + "VictimLocation: " + VictimLocation + ", "
                + "Assistants: " + Assistants + ", "
                + "PlayerLocations: " + PlayerLocations + ", "
                + "FinishingDamage: " + FinishingDamage + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// FinishingDamage data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FinishingDamage
    {
        public FinishingDamage()
        {}
        [JsonProperty("damageType")]
        public string DamageType { get; set; }
        [JsonProperty("damageItem")]
        public string DamageItem { get; set; }
        [JsonProperty("isSecondaryFireMode")]
        public bool IsSecondaryFireMode { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FinishingDamage("
                + "DamageType: " + DamageType + ", "
                + "DamageItem: " + DamageItem + ", "
                + "IsSecondaryFireMode: " + IsSecondaryFireMode + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Damage data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Damage
    {
        public Damage()
        {}
        /// <summary>
        /// PUUID
        /// </summary>
        [JsonProperty("receiver")]
        public string Receiver { get; set; }
        [JsonProperty("damage")]
        public int Damageint { get; set; }
        [JsonProperty("legshots")]
        public int Legshots { get; set; }
        [JsonProperty("bodyshots")]
        public int Bodyshots { get; set; }
        [JsonProperty("headshots")]
        public int Headshots { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Damage("
                + "Receiver: " + Receiver + ", "
                + "Damageint: " + Damageint + ", "
                + "Legshots: " + Legshots + ", "
                + "Bodyshots: " + Bodyshots + ", "
                + "Headshots: " + Headshots + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Economy data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Economy
    {
        public Economy()
        {}
        [JsonProperty("loadoutValue")]
        public int LoadoutValue { get; set; }
        [JsonProperty("weapon")]
        public string Weapon { get; set; }
        [JsonProperty("armor")]
        public string Armor { get; set; }
        [JsonProperty("remaining")]
        public int Remaining { get; set; }
        [JsonProperty("spent")]
        public int Spent { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Economy("
                + "LoadoutValue: " + LoadoutValue + ", "
                + "Weapon: " + Weapon + ", "
                + "Armor: " + Armor + ", "
                + "Remaining: " + Remaining + ", "
                + "Spent: " + Spent + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Ability data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Ability
    {
        public Ability()
        {}
        [JsonProperty("grenadeEffects")]
        public string GrenadeEffects { get; set; }
        [JsonProperty("ability1Effects")]
        public string Ability1Effects { get; set; }
        [JsonProperty("ability2Effects")]
        public string Ability2Effects { get; set; }
        [JsonProperty("ultimateEffects")]
        public string UltimateEffects { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Ability("
                + "GrenadeEffects: " + GrenadeEffects + ", "
                + "Ability1Effects: " + Ability1Effects + ", "
                + "Ability2Effects: " + Ability2Effects + ", "
                + "UltimateEffects: " + UltimateEffects + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// Matchlist data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Matchlist
    {
        public Matchlist()
        {}
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        [JsonProperty("history")]
        public MatchlistEntry[] History { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Matchlist("
                + "Puuid: " + Puuid + ", "
                + "History: " + History + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// MatchlistEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchlistEntry
    {
        public MatchlistEntry()
        {}
        [JsonProperty("matchId")]
        public string MatchId { get; set; }
        [JsonProperty("gameStartTimeMillis")]
        public long GameStartTimeMillis { get; set; }
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchlistEntry("
                + "MatchId: " + MatchId + ", "
                + "GameStartTimeMillis: " + GameStartTimeMillis + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-match-v1
namespace MingweiSamuel.Camille.ValMatchV1
{
#nullable disable
    /// <summary>
    /// RecentMatches data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class RecentMatches
    {
        public RecentMatches()
        {}
        [JsonProperty("currentTime")]
        public long CurrentTime { get; set; }
        /// <summary>
        /// A list of recent match ids.
        /// </summary>
        [JsonProperty("matchIds")]
        public string[] MatchIds { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "RecentMatches("
                + "CurrentTime: " + CurrentTime + ", "
                + "MatchIds: " + MatchIds + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-ranked-v1
namespace MingweiSamuel.Camille.ValRankedV1
{
#nullable disable
    /// <summary>
    /// Leaderboard data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Leaderboard
    {
        public Leaderboard()
        {}
        /// <summary>
        /// The shard for the given leaderboard.
        /// </summary>
        [JsonProperty("shard")]
        public string Shard { get; set; }
        /// <summary>
        /// The act id for the given leaderboard. Act ids can be found using the val-content API.
        /// </summary>
        [JsonProperty("actId")]
        public string ActId { get; set; }
        /// <summary>
        /// The total number of players in the leaderboard.
        /// </summary>
        [JsonProperty("totalPlayers")]
        public long TotalPlayers { get; set; }
        [JsonProperty("players")]
        public Player[] Players { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Leaderboard("
                + "Shard: " + Shard + ", "
                + "ActId: " + ActId + ", "
                + "TotalPlayers: " + TotalPlayers + ", "
                + "Players: " + Players + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-ranked-v1
namespace MingweiSamuel.Camille.ValRankedV1
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("gameName")]
        public string GameName { get; set; }
        /// <summary>
        /// This field may be omitted if the player has been anonymized.
        /// </summary>
        [JsonProperty("tagLine")]
        public string TagLine { get; set; }
        [JsonProperty("leaderboardRank")]
        public long LeaderboardRank { get; set; }
        [JsonProperty("rankedRating")]
        public long RankedRating { get; set; }
        [JsonProperty("numberOfWins")]
        public long NumberOfWins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player("
                + "Puuid: " + Puuid + ", "
                + "GameName: " + GameName + ", "
                + "TagLine: " + TagLine + ", "
                + "LeaderboardRank: " + LeaderboardRank + ", "
                + "RankedRating: " + RankedRating + ", "
                + "NumberOfWins: " + NumberOfWins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-status-v1
namespace MingweiSamuel.Camille.ValStatusV1
{
#nullable disable
    /// <summary>
    /// PlatformData data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class PlatformData
    {
        public PlatformData()
        {}
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }
        [JsonProperty("maintenances")]
        public Status[] Maintenances { get; set; }
        [JsonProperty("incidents")]
        public Status[] Incidents { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "PlatformData("
                + "Id: " + Id + ", "
                + "Name: " + Name + ", "
                + "Locales: " + Locales + ", "
                + "Maintenances: " + Maintenances + ", "
                + "Incidents: " + Incidents + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-status-v1
namespace MingweiSamuel.Camille.ValStatusV1
{
#nullable disable
    /// <summary>
    /// Status data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Status
    {
        public Status()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// (Legal values:  scheduled,  in_progress,  complete)
        /// </summary>
        [JsonProperty("maintenance_status")]
        public string MaintenanceStatus { get; set; }
        /// <summary>
        /// (Legal values:  info,  warning,  critical)
        /// </summary>
        [JsonProperty("incident_severity")]
        public string IncidentSeverity { get; set; }
        [JsonProperty("titles")]
        public Content[] Titles { get; set; }
        [JsonProperty("updates")]
        public Update[] Updates { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("archive_at")]
        public string ArchiveAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// (Legal values: windows, macos, android, ios, ps4, xbone, switch)
        /// </summary>
        [JsonProperty("platforms")]
        public string[] Platforms { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Status("
                + "Id: " + Id + ", "
                + "MaintenanceStatus: " + MaintenanceStatus + ", "
                + "IncidentSeverity: " + IncidentSeverity + ", "
                + "Titles: " + Titles + ", "
                + "Updates: " + Updates + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "ArchiveAt: " + ArchiveAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Platforms: " + Platforms + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-status-v1
namespace MingweiSamuel.Camille.ValStatusV1
{
#nullable disable
    /// <summary>
    /// Content data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Content
    {
        public Content()
        {}
        [JsonProperty("locale")]
        public string Locale { get; set; }
        [JsonProperty("content")]
        public string Contentstring { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Content("
                + "Locale: " + Locale + ", "
                + "Contentstring: " + Contentstring + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// val-status-v1
namespace MingweiSamuel.Camille.ValStatusV1
{
#nullable disable
    /// <summary>
    /// Update data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Update
    {
        public Update()
        {}
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("publish")]
        public bool Publish { get; set; }
        /// <summary>
        /// (Legal values: riotclient, riotstatus, game)
        /// </summary>
        [JsonProperty("publish_locations")]
        public string[] PublishLocations { get; set; }
        [JsonProperty("translations")]
        public Content[] Translations { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; set; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Update("
                + "Id: " + Id + ", "
                + "Author: " + Author + ", "
                + "Publish: " + Publish + ", "
                + "PublishLocations: " + PublishLocations + ", "
                + "Translations: " + Translations + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

