{{
    const routesTable = require(it.path + '/.routesTable.json');
}}
// This file is automatically generated.
// Do not directly edit.
// Generated on {{= (new Date).toISOString() }}

using System;
using System.ComponentModel.DataAnnotations;

namespace Camille.Enums
{
    /// <summary>
    /// Regional routes, used in tournament services, Legends of Runeterra (LoR), and some other endpoints.
    /// </summary>
#if USE_NEWTONSOFT
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
#elif USE_SYSTEXTJSON
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
#endif
    public enum RegionalRoute: byte
    {
{{
    for (const [ name, { id, description, deprecated } ] of Object.entries(routesTable['regional']))
    {
        const desc = description.split('\n');
}}
        /// <summary>
{{~ desc :line }}
        /// {{= line }}
{{~}}
        ///
        /// `{{= id }}` (riotapi-schema ID/repr)
        /// </summary>
{{? deprecated }}
        [Obsolete]
{{?}}
        [Display(Name = {{= JSON.stringify(name.toUpperCase()) }}, Description = {{= JSON.stringify(description) }})]
        {{= name.toUpperCase() }} = {{= id }},

{{
    }
}}
    }

    /// <summary>
    /// Platform routes for League of Legends (LoL), Teanfight Tactics (TFT), and Legends of Runeterra (LoR).
    /// </summary>
#if USE_NEWTONSOFT
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
#elif USE_SYSTEXTJSON
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
#endif
    public enum PlatformRoute: byte
    {
{{
    for (const [ name, { id, description, altName, deprecated } ] of Object.entries(routesTable['platform']))
    {
        const desc = description.split('\n');
}}
        /// <summary>
{{~ desc: line }}
        /// {{= line }}
{{~}}
        ///
        /// `{{= id }}` (riotapi-schema ID/repr)
        /// </summary>
{{? deprecated }}
        [Obsolete]
{{?}}
        [Display(Name = {{= JSON.stringify(name.toUpperCase()) }}, Description = {{= JSON.stringify(description) }})]
        {{= name.toUpperCase() }} = {{= id }},

{{
    }
}}
    }

    /// <summary>
    /// Platform routes for Valorant.
    /// </summary>
#if USE_NEWTONSOFT
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
#elif USE_SYSTEXTJSON
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
#endif
    public enum ValPlatformRoute: byte
    {
{{
    for (const [ name, { id, description, altName, deprecated } ] of Object.entries(routesTable['val-platform']))
    {
        const desc = description.split('\n');
}}
        /// <summary>
{{~ desc: line }}
        /// {{= line }}
{{~}}
        ///
        /// `{{= id }}` (riotapi-schema ID/repr)
        /// </summary>
{{? deprecated }}
        [Obsolete]
{{?}}
        [Display(Name = {{= JSON.stringify(name.toUpperCase()) }}, Description = {{= JSON.stringify(description) }})]
        {{= name.toUpperCase() }} = {{= id }},

{{
    }
}}
    }

    /// <summary>
    /// Tournament regions for League of Legends (LoL) used in TournamentStubV4 and TournamentV4's
    /// RegisterProviderData method.
    /// </summary>
#if USE_NEWTONSOFT
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
#elif USE_SYSTEXTJSON
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
#endif
    public enum TournamentRegion: byte
    {
{{
    for (const [ name, { id, description, tournamentRegion, deprecated } ] of Object.entries(routesTable['platform']))
    {
        if (tournamentRegion)
        {
            const desc = description.split('\n');
}}
        /// <summary>
{{~ desc: line }}
        /// {{= line }}
{{~}}
        ///
        /// For {{= name }}.
        /// </summary>
{{? deprecated }}
        [Obsolete]
{{?}}
        {{= tournamentRegion }} = {{= id }},

{{
        }
    }
}}
    }

    public static class RouteUtils
    {
        /// <summary>
        /// Converts the PlatformRoute into its corresponding RegionalRoute. Useful for MatchV5 and
        /// TftMatchV1 endpoints which use regional routes rather than platforms.
        /// </summary>
        /// <param name="value">This, the PlatformRoute to convert.</param>
        public static RegionalRoute ToRegional(this PlatformRoute value)
        {
            switch (value)
            {
{{
    for (const [ name, { regionalRoute } ] of Object.entries(routesTable['platform']))
    {
}}
                case PlatformRoute.{{= name.toUpperCase() }}: return RegionalRoute.{{= regionalRoute.toUpperCase() }};
{{
    }
}}
            }
            throw new ArgumentException($"Unexpected PlatformRoute value: {value}.");
        }

        /// <summary>
        /// Converts the PlatformRoute into its corresponding RegionalRoute for LoR endpoints. For
        /// example, LorMatchV1.
        /// </summary>
        /// <param name="value">This, the PlatformRoute to convert.</param>
        public static RegionalRoute ToRegionalLog(this PlatformRoute value)
        {
            switch (value)
            {
{{
    for (const [ name, { regionalRouteLor } ] of Object.entries(routesTable['platform']))
    {
}}
                case PlatformRoute.{{= name.toUpperCase() }}: return RegionalRoute.{{= regionalRouteLor.toUpperCase() }};
{{
    }
}}
            }
            throw new ArgumentException($"Unexpected PlatformRoute value: {value}.");
        }

        /// <summary>
        /// Used in the LoL Tournament API. Specifically, TournamentStubV4 and TournamentV4's
        /// RegisterProviderData method.
        /// </summary>
        /// <param name="value">This, the PlatformRoute to convert.</param>
        public static TournamentRegion? ToTournamentRegion(this PlatformRoute value)
        {
            switch (value)
            {
{{
    for (const [ name, { tournamentRegion } ] of Object.entries(routesTable['platform']))
    {
        if (tournamentRegion)
        {
}}
                case PlatformRoute.{{= name.toUpperCase() }}: return TournamentRegion.{{= tournamentRegion }};
{{
        }
    }
}}
            }
            return null;
        }

        /// <summary>
        /// Get the slightly more human-friendly alternate name for this `PlatformRoute`.
        /// Specifically excludes any trailing numbers and appends extra N(orth), S(outh), E(ast),
        /// and/or W(est) suffixes to some names. Some of these are old region names which are
        /// often still used as user-facing names, e.g. on op.gg.
        /// </summary>
        /// <param name="value">This, the PlatformRoute to convert.</param>
        public static string AsRegionString(this PlatformRoute value)
        {
            switch (value)
            {
{{
    for (const [ name, { altName } ] of Object.entries(routesTable['platform']))
    {
        if (altName)
        {
}}
                case PlatformRoute.{{= name.toUpperCase() }}: return "{{= altName }}";
{{
        }
    }
}}
            }
            return value.ToString();
        }
    }
}
