<!-- Common csproj configuration for published packages. -->
<Project><!-- Project tag cannot include Sdk attribute. -->
  <PropertyGroup>
    <!-- Lang stuff. -->
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>

    <!-- Project stuff. -->
    <!-- Author. -->
    <Authors>MingweiSamuel</Authors>
    <Company>MingweiSamuel</Company>
    <!-- Licensing. -->
    <PackageLicenseExpression>MIT OR Apache-2.0</PackageLicenseExpression>
    <Copyright>2020 Mingwei Samuel and contributors</Copyright>
    <!-- Version, should be overridden using the `-p:version` build CLI argument. -->
    <Version>0.0.0</Version>
    <!-- Repository. -->
    <RepositoryUrl>https://github.com/MingweiSamuel/Camille</RepositoryUrl>
    <PackageProjectUrl>https://github.com/MingweiSamuel/Camille</PackageProjectUrl>
    <RepositoryType>git</RepositoryType>
    <!-- Icon. -->
    <PackageIcon>Camille.png</PackageIcon>
    <PackageIconUrl>https://raw.githubusercontent.com/MingweiSamuel/Camille/release/3.x.x/Camille.png</PackageIconUrl>
    <!-- Tags. -->
    <PackageTags>$(PackageTags);Riot Games;League of Legends;LoL;Camille</PackageTags>
    <!-- README. -->
    <!--
        This is unused for now:
        https://github.com/NuGet/Home/wiki/Embedding-and-displaying-NuGet-READMEs
        https://github.com/NuGet/Home/issues/6873
    -->
    <PackageReadmeFile>README.md</PackageReadmeFile>

    <!-- Build stuff. -->
    <!-- Ensure package is generated for CI. -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <!-- Explicitly generate AssemblyInfo for InternalsVisibleToAttribute. -->
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <!-- Set source code generation directory. -->
    <GenDir>gen</GenDir>
  </PropertyGroup>
  <!-- Make internals visible for testing. -->
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <_Parameter1>$(AssemblyName).Test</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>


  <!-- Include project information files for packaging. -->
  <ItemGroup>
    <!-- Icon png for PackageIcon. -->
    <None Include="$(SolutionDir)\$(PackageIcon)" Pack="true" PackagePath="\" />
    <!-- Readme for PackageReadmeFile. -->
    <None Include="$(SolutionDir)\$(PackageReadmeFile)" Pack="true" PackagePath="\" />
    <!-- License files. -->
    <None Include="$(SolutionDir)\LICENSE.txt" Pack="true" PackagePath="\" />
    <None Include="$(SolutionDir)\LICENSE-MIT.txt" Pack="true" PackagePath="\" />
    <None Include="$(SolutionDir)\LICENSE-APACHE.txt" Pack="true" PackagePath="\" />
  </ItemGroup>

  <!-- Include RiotCertificateUtils for LCU or In-Game APIs. -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net461' Or '$(TargetFramework)' == 'netstandard2.1' Or '$(TargetFramework)' == 'netcoreapp3.1' Or '$(TargetFramework)' == 'net5.0' Or '$(TargetFramework)' == 'net6.0'">
    <DefineConstants>$(DefineConstants);INCLUDE_RIOTCERTIFICATEUTILS</DefineConstants>
  </PropertyGroup>

  <!-- Camille using Newtonsoft.Json. -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard1.1' Or '$(TargetFramework)' == 'net45'">
    <DefineConstants>$(DefineConstants);USE_NEWTONSOFT</DefineConstants>
  </PropertyGroup>
  <!-- Camille using System.Text.Json. -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net461' Or '$(TargetFramework)' == 'netstandard2.1' Or '$(TargetFramework)' == 'netcoreapp3.1' Or '$(TargetFramework)' == 'net5.0' Or '$(TargetFramework)' == 'net6.0'">
    <DefineConstants>$(DefineConstants);USE_SYSTEXTJSON</DefineConstants>
  </PropertyGroup>
  <!--
    HttpRequestMessage.Options in net5.0.
    https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httprequestoptions?view=net-5.0
    HttpContent.ReadAsStringAsync with CancellationToken in net5.0.
    https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpcontent.readasstringasync?view=net-5.0#System_Net_Http_HttpContent_ReadAsStringAsync_System_Threading_CancellationToken_
  -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net5.0' Or '$(TargetFramework)' == 'net6.0'">
    <DefineConstants>$(DefineConstants);USE_HTTPREQUESTMESSAGE_OPTIONS;USE_HTTPCONTENT_READASSTRINGASYNC_CANCELLATIONTOKEN</DefineConstants>
  </PropertyGroup>

  <!-- Newtonsoft from NuGet. -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1' Or '$(TargetFramework)' == 'net45'">
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>
  <!-- Nullable attributes from NuGet. -->
  <!--<ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1' Or '$(TargetFramework)' == 'net45'">
    <PackageReference Include="Nullable" Version="1.1.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime;build;native;contentfiles;analyzers;buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>-->
  <!-- System.Net.Http from Nuget. -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1' Or '$(TargetFramework)' == 'net45' Or '$(TargetFramework)' == 'net461'">
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
  </ItemGroup>
  <!-- System.Text.Json from NuGet, for tagets stricly below net6.0. -->
  <ItemGroup Condition="'$(TargetFramework)' == 'net461' Or '$(TargetFramework)' == 'netstandard2.1' Or '$(TargetFramework)' == 'netcoreapp3.1' Or '$(TargetFramework)' == 'net5.0'">
    <PackageReference Include="System.Text.Json" Version="5.0.0" />
  </ItemGroup>
  <!-- System.ComponentModel.DataAnnotations from NuGet. -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1' Or '$(TargetFramework)' == 'net45' Or '$(TargetFramework)' == 'net461' Or '$(TargetFramework)' == 'netstandard2.1'">
    <PackageReference Include="System.ComponentModel.Annotations" Version="4.6.0" />
  </ItemGroup>


  <!-- Empty target to use with BeforeTargets to download files. -->
  <Target Name="DownloadTemplateDataTrigger"></Target>

  <!-- On Windows DispatchToInnerBuilds is run due to multiple TargetFrameworks. -->
  <Target Name="BuildTemplates" BeforeTargets="DispatchToInnerBuilds" DependsOnTargets="DownloadTemplateDataTrigger">
    <Exec WorkingDirectory="$(SolutionDir)/srcgen" Command="PowerShell -ExecutionPolicy Bypass -File install.ps1" />
    <Exec WorkingDirectory="$(SolutionDir)" Command="node srcgen/index.js &quot;$(MSBuildProjectDirectory)&quot;" />
  </Target>
  <!-- On Unix/OSX DispatchToInnerBuilds is not run so we use GenerateTargetFrameworkMonikerAttribute. -->
  <Target Name="BuildTemplatesUnix" BeforeTargets="GenerateTargetFrameworkMonikerAttribute" DependsOnTargets="BuildTemplates" Condition="$(OS) == 'Unix'">
    <Message Text="Building templates on unix." Importance="high" />
  </Target>
</Project>
