{{
    const spec = require(it.path + '/configspec.json');
    const dotUtils = require('./dotUtils.js');
}}
// This file is automatically generated.
// Do not directly edit.
// Generated on {{= (new Date).toISOString() }}
using System;

namespace Camille.RiotGames
{
    public interface IRiotGamesApiConfig
    {
{{
    for (let [ key, value ] of Object.entries(spec))
    {
}}
        /// <summary>{{= value.desc }}</summary>
        {{= value.type }} {{= dotUtils.capitalize(key) }} { get; }

{{
    }
}}
    }


    public class RiotGamesApiConfig : IRiotGamesApiConfig
    {
{{
    for (let [ key, value ] of Object.entries(spec))
    {
}}
        /// <summary>{{= value.desc }}</summary>
        public {{= value.type }} {{= dotUtils.capitalize(key) }} { get; }

{{
    }
}}
        private RiotGamesApiConfig({{= Object.entries(spec).map(([ key, value ]) => `${value.type} ${key}`).join(', ') }})
        {
{{
    for (let [ key, value ] of Object.entries(spec))
    {
}}
            {{= dotUtils.capitalize(key) }} = {{= key }};
{{
    }
}}
        }

        public class Builder
        {
{{
    for (let [ key, value ] of Object.entries(spec))
    {
}}
            /// <summary>{{= value.desc }}</summary>
{{? value.val }}
            /// <example>
            /// Default value:
            /// <code>
            /// {{= value.val }}
            /// </code>
            /// </example>
{{?}}
            public {{= value.type }} {{= dotUtils.capitalize(key) }}{{= value.val ? ' = ' + value.val : '' }};

{{
    }
    let constructorArgs = Object.entries(spec).filter(([ key, value ]) => !value.val);
}}
            public Builder({{= constructorArgs.map(([ key, value ]) => `${value.type} ${key}`) }})
            {
{{
    for (let [ key, value ] of constructorArgs)
    {
}}
                {{= dotUtils.capitalize(key) }} = {{= key }} ?? throw new ArgumentException($"{nameof({{= key }})} cannot be null.");
{{
    }
}}
            }

            public RiotGamesApiConfig Build()
            {
                return new RiotGamesApiConfig({{= Object.keys(spec).map(dotUtils.capitalize).join(', ') }});
            }
        }
    }
}
