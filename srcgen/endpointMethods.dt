{{
    const dotUtils = require('./dotUtils.js');
}}
// This file is automatically generated.
// Do not directly edit.
// Generated on {{= (new Date).toISOString() }}

using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Camille.Enums;
using Camille.RiotApi.Enums;

namespace Camille.{{= it.namespace }}
{
{{
    const endpointGroups = {};
    for (let routePath of Object.entries(it.spec.paths)) {
        if (!it.useMethod(routePath))
            continue;
        let ep = routePath[1]['x-endpoint'];
        (endpointGroups[ep] = endpointGroups[ep] || []).push(routePath);
    }
}}
{{/* Endpoint Classes */}}
{{
    for (let [ endpointName, endpointMethods ] of Object.entries(endpointGroups))
    {
        let endpoint = dotUtils.normalizeEndpointName(endpointName);
}}
    /// <summary>
    /// {{= endpoint }} endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#{{= endpointName }}">https://developer.riotgames.com/api-methods/#{{= endpointName }}</a>
    /// </summary>
    public class {{= endpoint }}Endpoints : Endpoints
    {
        internal {{= endpoint }}Endpoints({{= it.namespace }} @base) : base(@base)
        {}

{{
        for (const [ route, path ] of endpointMethods)
        {
            for (const [ verb, operation ] of Object.entries(path))
            {
                if (verb.startsWith('x-')) continue;

                const httpVerb = dotUtils.capitalize(verb);
                const operationId = operation.operationId;
                const method = dotUtils.capitalize(operationId.slice(operationId.indexOf('.') + 1));

                const resp200 = operation.responses['200'];
                if (!resp200) /* TODO */
                    continue;
                if (!resp200.content)
                    continue; /* TODO */

                const jsonInfo = resp200.content['application/json'];
                let returnType = dotUtils.stringifyType(jsonInfo.schema, endpoint);
                if (operation['x-nullable-404']) returnType += '?';

                /* Cases if not rate limited. */
                let rateLimitExcluded = operation['x-app-rate-limit-excluded'] ? true : false;

                /* Description processing. */
                let desc = operation.description || '';
                let descArr = desc
                    .replace(/(#+)\s*([^\\]+)\\n(.*?)([\\n$])/g,
                        (m, g1, g2, g3, g4) => `<h${g1.length}>${g2}</h${g1.length}>\\n${g3}${g4}`)
                    .split('\n');

                /* Build argument comment & string. */
                let argBuilder = [];
                let makeParamCode = '';
                let allParams = operation.parameters;
                let queryParams = [];
                if (allParams && allParams.length)
                {
                    let pathParams = allParams.filter(p => 'path' === p.in)
                        .sortBy(({ name }) => route.indexOf(name));
                    let reqParams = allParams.filter(p => 'path' !== p.in && p.required);
                    let optParams = allParams.filter(p => 'path' !== p.in && !p.required)
                        .sortBy(({ name }) => {
                            let match = /(^[a-z]+|[A-Z]+(?![a-z])|[A-Z][a-z]+)/.exec(name);
                            return match.slice(1).reverse().join('');
                        });
                    queryParams = reqParams.concat(optParams);

                    for (let paramList of [ pathParams, reqParams, optParams ])
                    {
                        let required = paramList === pathParams;
                        for (let param of paramList)
                        {
                            argBuilder.push(', ',
                                dotUtils.stringifyType(param.schema, endpoint),
                                required ? ' ' : '? ',
                                param.name);
                            if (!required)
                                argBuilder.push(' = null');
                        }
                    }
                }

                for (let asynch of [ '', 'Async' ])
                {
}}
        /// <summary>
{{
                    for (var descLine of descArr)
                    {
}}
        /// {{= descLine }}<para />
{{
                    }
}}
{{? operation.externalDocs }}
        /// {{= operation.externalDocs.description }}: <a href="{{= operation.externalDocs.url }}">{{= operation.externalDocs.url }}</a>
{{?}}
        /// </summary>
        /// <param name="region">Region to query.</param>
{{
                    if (allParams)
                    {
                        for (let param of allParams)
                        {
}}
        /// <param name="{{= param.name }}">{{= param.description || '' }} ({{= param.required ? 'required' : 'optional' }})</param>
{{
                        }
                    }
}}
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task.</param>
        public {{= "Async" === asynch ? `Task<${returnType}>` : returnType }} {{= method }}{{= asynch }}(Region region{{= argBuilder.join('') }}, CancellationToken? cancellationToken = null)
        {
{{? queryParams.length }}
            var queryParams = new List<KeyValuePair<string, string>>();
{{
                    for (let queryParam of queryParams)
                    { 
}}
            {{= dotUtils.formatAddQueryParam(queryParam) }};
{{
                    }
}}
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.{{= httpVerb }}, $"{{= dotUtils.replaceEnumCasts(route) }}?{content.ReadAsStringAsync().Result}");
{{?}}
{{? !queryParams.length}}
            var request = new HttpRequestMessage(HttpMethod.{{= httpVerb }}, $"{{= dotUtils.replaceEnumCasts(route) }}");
{{?}}
            return {{= it.namespace }}.Send{{= asynch }}<{{= returnType }}>(region, "{{= operationId }}", {{= rateLimitExcluded }}, request, cancellationToken);
        }

{{
                }
            }
        }
}}
    }
{{
    }
}}
}
